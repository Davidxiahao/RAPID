/* AUTO-GENERATED FILE. DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * aapt tool from the resource data it found. It
 * should not be modified by hand.
 */


package android;


@SuppressWarnings({"unchecked", "deprecation", "all"})
public final class R {

public R() { throw new RuntimeException("Stub!"); }
@SuppressWarnings({"unchecked", "deprecation", "all"})
public static final class anim {

public anim() { throw new RuntimeException("Stub!"); }

public static final int accelerate_decelerate_interpolator = 17432580; // 0x10a0004

/**
 * Acceleration curve matching Flash's quadratic ease out function.
 */

public static final int accelerate_interpolator = 17432581; // 0x10a0005

public static final int anticipate_interpolator = 17432583; // 0x10a0007

public static final int anticipate_overshoot_interpolator = 17432585; // 0x10a0009

public static final int bounce_interpolator = 17432586; // 0x10a000a

public static final int cycle_interpolator = 17432588; // 0x10a000c

/**
 * Acceleration curve matching Flash's quadratic ease in function.
 */

public static final int decelerate_interpolator = 17432582; // 0x10a0006

public static final int fade_in = 17432576; // 0x10a0000

public static final int fade_out = 17432577; // 0x10a0001

public static final int linear_interpolator = 17432587; // 0x10a000b

public static final int overshoot_interpolator = 17432584; // 0x10a0008

public static final int slide_in_left = 17432578; // 0x10a0002

public static final int slide_out_right = 17432579; // 0x10a0003
}

@SuppressWarnings({"unchecked", "deprecation", "all"})
public static final class animator {

public animator() { throw new RuntimeException("Stub!"); }

/**
 * A simple fade-in animation.
 */

public static final int fade_in = 17498112; // 0x10b0000

/**
 * A simple fade-out animation.
 */

public static final int fade_out = 17498113; // 0x10b0001
}

@SuppressWarnings({"unchecked", "deprecation", "all"})
public static final class array {

public array() { throw new RuntimeException("Stub!"); }

/**
 * Email address types from android.provider.Contacts. This could be used when adding a new e-mail address for a contact, for example.
 */

public static final int emailAddressTypes = 17235968; // 0x1070000

/**
 * Instant Message protocols/providers from android.provider.Contacts
 */

public static final int imProtocols = 17235969; // 0x1070001

/**
 * Organization types from android.provider.Contacts. This could be used when adding a new organization for a contact, for example.
 */

public static final int organizationTypes = 17235970; // 0x1070002

/**
 * Phone number types from android.provider.Contacts. This could be used when adding a new phone number for a contact, for example.
 */

public static final int phoneTypes = 17235971; // 0x1070003

/**
 * Postal address types from android.provider.Contacts. This could be used when adding a new address for a contact, for example.
 */

public static final int postalAddressTypes = 17235972; // 0x1070004
}

@SuppressWarnings({"unchecked", "deprecation", "all"})
public static final class attr {

public attr() { throw new RuntimeException("Stub!"); }

/**
 * Default AbsListView style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int absListViewStyle = 16842858; // 0x101006a

/**
 * The event types this service would like to receive as specified in
 * {@link android.view.accessibility.AccessibilityEvent}. This setting
 * can be changed at runtime by calling
 * {@link android.accessibilityservice.AccessibilityService#setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)
 * android.accessibilityservice.AccessibilityService.setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)}.
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>typeAllMask</td><td>ffffffff</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPES_ALL_MASK} i.e. all events.</td></tr>
 * <tr><td>typeAnnouncement</td><td>4000</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_ANNOUNCEMENT} events.</td></tr>
 * <tr><td>typeAssistReadingContext</td><td>1000000</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_ASSIST_READING_CONTEXT} events.</td></tr>
 * <tr><td>typeContextClicked</td><td>800000</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_CONTEXT_CLICKED} events.</td></tr>
 * <tr><td>typeGestureDetectionEnd</td><td>80000</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_GESTURE_DETECTION_END} events.</td></tr>
 * <tr><td>typeGestureDetectionStart</td><td>40000</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_GESTURE_DETECTION_START} events.</td></tr>
 * <tr><td>typeNotificationStateChanged</td><td>40</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_NOTIFICATION_STATE_CHANGED} events.</td></tr>
 * <tr><td>typeTouchExplorationGestureEnd</td><td>400</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_TOUCH_EXPLORATION_GESTURE_END} events.</td></tr>
 * <tr><td>typeTouchExplorationGestureStart</td><td>200</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_TOUCH_EXPLORATION_GESTURE_START} events.</td></tr>
 * <tr><td>typeTouchInteractionEnd</td><td>200000</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_TOUCH_INTERACTION_END} events.</td></tr>
 * <tr><td>typeTouchInteractionStart</td><td>100000</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_TOUCH_INTERACTION_START} events.</td></tr>
 * <tr><td>typeViewAccessibilityFocusCleared</td><td>10000</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_ACCESSIBILITY_FOCUS_CLEARED} events.</td></tr>
 * <tr><td>typeViewAccessibilityFocused</td><td>8000</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_ACCESSIBILITY_FOCUSED} events.</td></tr>
 * <tr><td>typeViewClicked</td><td>1</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_CLICKED} events.</td></tr>
 * <tr><td>typeViewFocused</td><td>8</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_FOCUSED} events.</td></tr>
 * <tr><td>typeViewHoverEnter</td><td>80</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_HOVER_ENTER} events.</td></tr>
 * <tr><td>typeViewHoverExit</td><td>100</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_HOVER_EXIT} events.</td></tr>
 * <tr><td>typeViewLongClicked</td><td>2</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_LONG_CLICKED} events.</td></tr>
 * <tr><td>typeViewScrolled</td><td>1000</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_SCROLLED} events.</td></tr>
 * <tr><td>typeViewSelected</td><td>4</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_SELECTED} events.</td></tr>
 * <tr><td>typeViewTextChanged</td><td>10</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_TEXT_CHANGED} events.</td></tr>
 * <tr><td>typeViewTextSelectionChanged</td><td>2000</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_TEXT_SELECTION_CHANGED} events.</td></tr>
 * <tr><td>typeViewTextTraversedAtMovementGranularity</td><td>20000</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_TEXT_TRAVERSED_AT_MOVEMENT_GRANULARITY} events.</td></tr>
 * <tr><td>typeWindowContentChanged</td><td>800</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_WINDOW_CONTENT_CHANGED} events.</td></tr>
 * <tr><td>typeWindowStateChanged</td><td>20</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_WINDOW_STATE_CHANGED} events.</td></tr>
 * <tr><td>typeWindowsChanged</td><td>400000</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_WINDOWS_CHANGED} events.</td></tr>
 * </table>
 */

public static final int accessibilityEventTypes = 16843648; // 0x1010380

/**
 * The feedback types this service provides as specified in
 * {@link android.accessibilityservice.AccessibilityServiceInfo}. This setting
 * can be changed at runtime by calling
 * {@link android.accessibilityservice.AccessibilityService#setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)
 * android.accessibilityservice.AccessibilityService.setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)}.
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>feedbackAllMask</td><td>ffffffff</td><td>Provides {@link android.accessibilityservice.AccessibilityServiceInfo#FEEDBACK_ALL_MASK} feedback.</td></tr>
 * <tr><td>feedbackAudible</td><td>4</td><td>Provides {@link android.accessibilityservice.AccessibilityServiceInfo#FEEDBACK_AUDIBLE} feedback.</td></tr>
 * <tr><td>feedbackGeneric</td><td>10</td><td>Provides {@link android.accessibilityservice.AccessibilityServiceInfo#FEEDBACK_GENERIC} feedback.</td></tr>
 * <tr><td>feedbackHaptic</td><td>2</td><td>Provides {@link android.accessibilityservice.AccessibilityServiceInfo#FEEDBACK_HAPTIC} feedback.</td></tr>
 * <tr><td>feedbackSpoken</td><td>1</td><td>Provides {@link android.accessibilityservice.AccessibilityServiceInfo#FEEDBACK_SPOKEN} feedback.</td></tr>
 * <tr><td>feedbackVisual</td><td>8</td><td>Provides {@link android.accessibilityservice.AccessibilityServiceInfo#FEEDBACK_VISUAL} feedback.</td></tr>
 * </table>
 */

public static final int accessibilityFeedbackType = 16843650; // 0x1010382

/**
 * Additional flags as specified in
 * {@link android.accessibilityservice.AccessibilityServiceInfo}.
 * This setting can be changed at runtime by calling
 * {@link android.accessibilityservice.AccessibilityService#setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)
 * android.accessibilityservice.AccessibilityService.setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)}.
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>flagDefault</td><td>1</td><td>Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#DEFAULT}.</td></tr>
 * <tr><td>flagEnableAccessibilityVolume</td><td>80</td><td>Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#FLAG_ENABLE_ACCESSIBILITY_VOLUME}.</td></tr>
 * <tr><td>flagIncludeNotImportantViews</td><td>2</td><td>Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#FLAG_INCLUDE_NOT_IMPORTANT_VIEWS}.</td></tr>
 * <tr><td>flagReportViewIds</td><td>10</td><td>Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#FLAG_REPORT_VIEW_IDS}.</td></tr>
 * <tr><td>flagRequestAccessibilityButton</td><td>100</td><td>Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#FLAG_REQUEST_ACCESSIBILITY_BUTTON}.</td></tr>
 * <tr><td>flagRequestEnhancedWebAccessibility</td><td>8</td><td>Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#FLAG_REQUEST_ENHANCED_WEB_ACCESSIBILITY}.
 * Not used by the framework.</td></tr>
 * <tr><td>flagRequestFilterKeyEvents</td><td>20</td><td>Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#FLAG_REQUEST_FILTER_KEY_EVENTS}.</td></tr>
 * <tr><td>flagRequestFingerprintGestures</td><td>200</td><td>Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#FLAG_REQUEST_FINGERPRINT_GESTURES}.</td></tr>
 * <tr><td>flagRequestTouchExplorationMode</td><td>4</td><td>Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#FLAG_REQUEST_TOUCH_EXPLORATION_MODE}.</td></tr>
 * <tr><td>flagRetrieveInteractiveWindows</td><td>40</td><td>Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#FLAG_RETRIEVE_INTERACTIVE_WINDOWS}.</td></tr>
 * </table>
 */

public static final int accessibilityFlags = 16843652; // 0x1010384

/**
 * Whether or not this view is a heading for accessibility purposes.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int accessibilityHeading = 16844160; // 0x1010580

/**
 * Indicates to accessibility services whether the user should be notified when
 * this view changes.
 * <p>May be an integer value, such as "<code>100</code>".
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>assertive</td><td>2</td><td>Accessibility services should interrupt ongoing speech to immediately
 * announce changes to this view.</td></tr>
 * <tr><td>none</td><td>0</td><td>Accessibility services should not announce changes to this view.</td></tr>
 * <tr><td>polite</td><td>1</td><td>Accessibility services should announce changes to this view.</td></tr>
 * </table>
 */

public static final int accessibilityLiveRegion = 16843758; // 0x10103ee

/**
 * The title this view should present to accessibility as a pane title.
 * See {@link android.view.View#setAccessibilityPaneTitle(CharSequence)}
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int accessibilityPaneTitle = 16844156; // 0x101057c

/**
 * Sets the id of a view after which this one is visited in accessibility traversal.
 * A screen-reader must visit the content of the other view before the content of
 * this one.
 * {@see android.view.View#setAccessibilityTraversalAfter(int)}
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int accessibilityTraversalAfter = 16843986; // 0x10104d2

/**
 * Sets the id of a view before which this one is visited in accessibility traversal.
 * A screen-reader must visit the content of this view before the content of the one
 * it precedes.
 * {@see android.view.View#setAccessibilityTraversalBefore(int)}
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int accessibilityTraversalBefore = 16843985; // 0x10104d1

/**
 * A preferences.xml file for authenticator-specific settings.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int accountPreferences = 16843423; // 0x101029f

/**
 * The account type this authenticator handles.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int accountType = 16843407; // 0x101028f

/**
 * The action name to assign to the Intent, as per
 * {@link android.content.Intent#setAction Intent.setAction()}.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int action = 16842797; // 0x101002d

/**
 * Custom divider drawable to use for elements in the action bar.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int actionBarDivider = 16843675; // 0x101039b

/**
 * Custom item state list drawable background for action bar items.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int actionBarItemBackground = 16843676; // 0x101039c

/**
 * Reference to a theme that should be used to inflate popups
 * shown by widgets in the action bar.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int actionBarPopupTheme = 16843917; // 0x101048d

/**
 * Size of the Action Bar, including the contextual
 * bar used to present Action Modes.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>wrap_content</td><td>0</td><td></td></tr>
 * </table>
 */

public static final int actionBarSize = 16843499; // 0x10102eb

/**
 * Reference to a style for the split Action Bar. This style
 * controls the split component that holds the menu/action
 * buttons. actionBarStyle is still used for the primary
 * bar.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int actionBarSplitStyle = 16843656; // 0x1010388

/**
 * Reference to a style for the Action Bar.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int actionBarStyle = 16843470; // 0x10102ce

/**
 * Reference to a style for the Action Bar Tab Bar.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int actionBarTabBarStyle = 16843508; // 0x10102f4

/**
 * Default style for tabs within an action bar.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int actionBarTabStyle = 16843507; // 0x10102f3

/**
 * Reference to a style for the Action Bar Tab text.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int actionBarTabTextStyle = 16843509; // 0x10102f5

/**
 * Reference to a theme that should be used to inflate the
 * action bar. This will be inherited by any widget inflated
 * into the action bar.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int actionBarTheme = 16843825; // 0x1010431

/**
 * Reference to a theme that should be used to inflate widgets
 * and layouts destined for the action bar. Most of the time
 * this will be a reference to the current theme, but when
 * the action bar has a significantly different contrast
 * profile than the rest of the activity the difference
 * can become important. If this is set to @null the current
 * theme will be used.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int actionBarWidgetTheme = 16843671; // 0x1010397

/**
 * Default action button style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int actionButtonStyle = 16843480; // 0x10102d8

/**
 * Default ActionBar dropdown style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int actionDropDownStyle = 16843479; // 0x10102d7

/**
 * An optional layout to be used as an action view.
 * See {@link android.view.MenuItem#setActionView(android.view.View)}
 * for more info.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int actionLayout = 16843515; // 0x10102fb

/**
 * TextAppearance style that will be applied to text that
 * appears within action menu items.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int actionMenuTextAppearance = 16843616; // 0x1010360

/**
 * Color for text that appears within action menu items.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int actionMenuTextColor = 16843617; // 0x1010361

/**
 * Background drawable to use for action mode UI.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int actionModeBackground = 16843483; // 0x10102db

/**
 * Reference to a style for the Action Mode close button.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int actionModeCloseButtonStyle = 16843511; // 0x10102f7

/**
 * Drawable to use for the close action mode button.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int actionModeCloseDrawable = 16843484; // 0x10102dc

/**
 * Drawable to use for the Copy action button in Contextual Action Bar.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int actionModeCopyDrawable = 16843538; // 0x1010312

/**
 * Drawable to use for the Cut action button in Contextual Action Bar.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int actionModeCutDrawable = 16843537; // 0x1010311

/**
 * Drawable to use for the Find action button in WebView selection action modes.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int actionModeFindDrawable = 16843898; // 0x101047a

/**
 * Drawable to use for the Paste action button in Contextual Action Bar.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int actionModePasteDrawable = 16843539; // 0x1010313

/**
 * Drawable to use for the Select all action button in Contextual Action Bar.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int actionModeSelectAllDrawable = 16843646; // 0x101037e

/**
 * Drawable to use for the Share action button in WebView selection action modes.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int actionModeShareDrawable = 16843897; // 0x1010479

/**
 * Background drawable to use for action mode UI in the lower split bar.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int actionModeSplitBackground = 16843677; // 0x101039d

/**
 * Reference to a style for the Action Mode.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int actionModeStyle = 16843668; // 0x1010394

/**
 * Drawable to use for the Web Search action button in WebView selection action modes.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int actionModeWebSearchDrawable = 16843899; // 0x101047b

/**
 * Reference to a style for Action Bar overflow buttons.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int actionOverflowButtonStyle = 16843510; // 0x10102f6

/**
 * Reference to a style for the Action Bar menu.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int actionOverflowMenuStyle = 16843844; // 0x1010444

/**
 * The name of an optional ActionProvider class to instantiate an action view
 * and perform operations such as default action for that menu item.
 * See {@link android.view.MenuItem#setActionProvider(android.view.ActionProvider)}
 * for more info.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int actionProviderClass = 16843657; // 0x1010389

/**
 * The name of an optional View class to instantiate and use as an
 * action view. See {@link android.view.MenuItem#setActionView(android.view.View)}
 * for more info.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int actionViewClass = 16843516; // 0x10102fc

/**
 * Drawable used as a background for activated items.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int activatedBackgroundIndicator = 16843517; // 0x10102fd

/**
 * When closing the current activity, this is the animation that is
 * run on the next activity (which is entering the screen).
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int activityCloseEnterAnimation = 16842938; // 0x10100ba

/**
 * When closing the current activity, this is the animation that is
 * run on the current activity (which is exiting the screen).
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int activityCloseExitAnimation = 16842939; // 0x10100bb

/**
 * When opening a new activity, this is the animation that is
 * run on the next activity (which is entering the screen).
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int activityOpenEnterAnimation = 16842936; // 0x10100b8

/**
 * When opening a new activity, this is the animation that is
 * run on the previous activity (which is exiting the screen).
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int activityOpenExitAnimation = 16842937; // 0x10100b9

/**
 * Fully qualified class name of an activity that allows the user to manually
 * add printers to this print service.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int addPrintersActivity = 16843750; // 0x10103e6

/**
 * Sets whether this ViewGroup's drawable states also include
 * its children's drawable states.  This is used, for example, to
 * make a group appear to be focused when its child EditText or button
 * is focused.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int addStatesFromChildren = 16842992; // 0x10100f0

/**
 * Set this to true if you want the ImageView to adjust its bounds
 * to preserve the aspect ratio of its drawable.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int adjustViewBounds = 16843038; // 0x101011e

/**
 * Fully qualified class name of an activity with advanced print options
 * specific to this print service.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int advancedPrintOptionsActivity = 16843761; // 0x10103f1

/**
 * Icon drawable to use for alerts.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int alertDialogIcon = 16843605; // 0x1010355

/**
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int alertDialogStyle = 16842845; // 0x101005d

/**
 * Theme to use for alert dialogs spawned from this theme.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int alertDialogTheme = 16843529; // 0x1010309

/**
 * Alignment constants.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>alignBounds</td><td>0</td><td>Align the bounds of the children.
 * See {@link android.widget.GridLayout#ALIGN_BOUNDS}.</td></tr>
 * <tr><td>alignMargins</td><td>1</td><td>Align the margins of the children.
 * See {@link android.widget.GridLayout#ALIGN_MARGINS}.</td></tr>
 * </table>
 */

public static final int alignmentMode = 16843642; // 0x101037a

/**
 * Resource representing the term "All Contacts" (for example, "All Friends" or
 * "All connections"). Optional (Default is "All Contacts").
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int allContactsName = 16843468; // 0x10102cc

/**
 * Whether to allow the application to participate in the backup
 * and restore infrastructure.  If this attribute is set to <code>false</code>,
 * no backup or restore of the application will ever be performed, even by a
 * full-system backup that would otherwise cause all application data to be saved
 * via adb.  The default value of this attribute is <code>true</code>.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int allowBackup = 16843392; // 0x1010280

/**
 * Option to let applications specify that user data can/cannot be
 * cleared. This flag is turned on by default.
 * <em>This attribute is usable only by applications
 * included in the system image. Third-party apps cannot use it.</em>
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int allowClearUserData = 16842757; // 0x1010005

/**
 * Indicate that the activity can be launched as the embedded child of another
 * activity. Particularly in the case where the child lives in a container
 * such as a Display owned by another activity.
 * <p>The default value of this attribute is <code>false</code>.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int allowEmbedded = 16843765; // 0x10103f5

/**
 * Set to true to tell the SyncManager that this SyncAdapter supports
 * multiple simultaneous syncs for the same account type and authority.
 * Otherwise the SyncManager will be sure not to issue a start sync request
 * to this SyncAdapter if the SyncAdapter is already syncing another account.
 * Defaults to false.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int allowParallelSyncs = 16843570; // 0x1010332

/**
 * Indicates whether the drawer can be opened/closed by a single tap
 * on the handle.  (If false, the user must drag or fling, or click
 * using the trackball, to open/close the drawer.)  Default is true.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int allowSingleTap = 16843353; // 0x1010259

/**
 * Specify that an activity can be moved out of a task it is in to
 * the task it has an affinity for when appropriate.  Use with the
 * application tag (to supply a default for all activities in the
 * application), or with an activity tag (to supply a specific
 * setting for that component).
 * <p>Normally when an application is started, it is associated with
 * the task of the activity that started it and stays there for its
 * entire lifetime.  You can use the allowTaskReparenting feature to force an
 * activity to be re-parented to a different task when the task it is
 * in goes to the background.  Typically this is used to cause the
 * activities of an application to move back to the main task associated
 * with that application.  The activity is re-parented to the task
 * with the same {@link android.R.attr#taskAffinity} as it has.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int allowTaskReparenting = 16843268; // 0x1010204

/**
 * Whether undo should be allowed for editable text. Defaults to true.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int allowUndo = 16843999; // 0x10104df

/**
 * alpha property of the view, as a value between 0 (completely transparent) and 1
 * (completely opaque).
 * <p>May be a floating point value, such as "<code>1.2</code>".
 */

public static final int alpha = 16843551; // 0x101031f

/**
 * The alphabetic modifier key. This is the modifier when using a keyboard
 * with alphabetic keys. The values should be kept in sync with KeyEvent
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>ALT</td><td>2</td><td></td></tr>
 * <tr><td>CTRL</td><td>1000</td><td></td></tr>
 * <tr><td>FUNCTION</td><td>8</td><td></td></tr>
 * <tr><td>META</td><td>10000</td><td></td></tr>
 * <tr><td>SHIFT</td><td>1</td><td></td></tr>
 * <tr><td>SYM</td><td>4</td><td></td></tr>
 * </table>
 */

public static final int alphabeticModifiers = 16844110; // 0x101054e

/**
 * The alphabetic shortcut key.  This is the shortcut when using a keyboard
 * with alphabetic keys.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int alphabeticShortcut = 16843235; // 0x10101e3

/**
 * Defines whether the ViewGroup should always draw its children using their
 * drawing cache or not. The default value is true.
 * Deprecated: The view drawing cache was largely made obsolete with the introduction of
 * hardware-accelerated rendering in API 11.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int alwaysDrawnWithCache = 16842991; // 0x10100ef

/**
 * Specify whether an acitivty's task state should always be maintained
 * by the system, or if it is allowed to reset the task to its initial
 * state in certain situations.
 * <p>Normally the system will reset a task (remove all activities from
 * the stack and reset the root activity) in certain situations when
 * the user re-selects that task from the home screen.  Typically this
 * will be done if the user hasn't visited that task for a certain
 * amount of time, such as 30 minutes.
 * <p>By setting this attribute, the user will always return to your
 * task in its last state, regardless of how they get there.  This is
 * useful, for example, in an application like the web browser where there
 * is a lot of state (such as multiple open tabs) that the application
 * would not like to lose.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int alwaysRetainTaskState = 16843267; // 0x1010203

/**
 * The background color state list for the AM/PM selectors.
 * {@deprecated Use headerBackground instead.}
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

@Deprecated public static final int amPmBackgroundColor = 16843941; // 0x10104a5

/**
 * The color for the AM/PM selectors.
 * {@deprecated Use headerTextColor instead.}
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

@Deprecated public static final int amPmTextColor = 16843940; // 0x10104a4

/**
 * Alpha value of the ambient shadow projected by elevated views, between 0 and 1.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 */

public static final int ambientShadowAlpha = 16843966; // 0x10104be

/**
 * Angle of the gradient, used only with linear gradient. Must be a multiple of 45 in the
 * range [0, 315].
 * <p>May be a floating point value, such as "<code>1.2</code>".
 */

public static final int angle = 16843168; // 0x10101a0

/**
 * Defines whether to animate the current View when the ViewAnimation
 * is first displayed.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int animateFirstView = 16843477; // 0x10102d5

/**
 * Defines whether changes in layout (caused by adding and removing items) should
 * cause a LayoutTransition to run. When this flag is set to true, a default
 * LayoutTransition object will be set on the ViewGroup container and default
 * animations will run when these layout changes occur.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int animateLayoutChanges = 16843506; // 0x10102f2

/**
 * Indicates whether the drawer should be opened/closed with an animation
 * when the user clicks the handle. Default is true.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int animateOnClick = 16843356; // 0x101025c

/**
 * Animation to use on each child.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int animation = 16843213; // 0x10101cd

/**
 * Defines whether layout animations should create a drawing cache for their
 * children. Enabling the animation cache consumes more memory and requires
 * a longer initialization but provides better performance. The animation
 * cache is enabled by default.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int animationCache = 16842989; // 0x10100ed

/**
 * Sets how long a transition animation should run (in milliseconds)
 * when layout has changed.  Only relevant if animation is turned on.
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int animationDuration = 16843026; // 0x1010112

/**
 * The order in which the animations will be started.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>normal</td><td>0</td><td>Animations are started in the natural order.</td></tr>
 * <tr><td>random</td><td>2</td><td>Animations are started randomly.</td></tr>
 * <tr><td>reverse</td><td>1</td><td>Animations are started in the reverse order.</td></tr>
 * </table>
 */

public static final int animationOrder = 16843214; // 0x10101ce

/**
 * @deprecated Not used by the framework.
 * Timeout between frames of animation in milliseconds.
 * {@deprecated Not used by the framework}.
 * <p>May be an integer value, such as "<code>100</code>".
 */

@Deprecated public static final int animationResolution = 16843546; // 0x101031a

/**
 * Enables or disables antialiasing. Antialiasing can be used to smooth the
 * edges of a bitmap when rotated. Default value is false.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int antialias = 16843034; // 0x101011a

/**
 * Indicates whether the application can accommodate any screen
 * density.  Older applications are assumed to not be able to,
 * new ones able to.  You can explicitly supply your abilities
 * here.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int anyDensity = 16843372; // 0x101026c

/**
 * A drawable that can be rendered in Android's system UI for representing
 * the service.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int apduServiceBanner = 16843757; // 0x10103ed

/**
 * Value is a string that specifies the Maps API Key to use.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int apiKey = 16843281; // 0x1010211

/**
 * Declare the category of this app. Categories are used to cluster multiple apps
 * together into meaningful groups, such as when summarizing battery, network, or
 * disk usage. Apps should only define this value when they fit well into one of
 * the specific categories.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>audio</td><td>1</td><td>Apps which primarily work with audio or music, such as music players.</td></tr>
 * <tr><td>game</td><td>0</td><td>Apps which are primarily games.</td></tr>
 * <tr><td>image</td><td>3</td><td>Apps which primarily work with images or photos, such as camera or gallery apps.</td></tr>
 * <tr><td>maps</td><td>6</td><td>Apps which are primarily maps apps, such as navigation apps.</td></tr>
 * <tr><td>news</td><td>5</td><td>Apps which are primarily news apps, such as newspapers, magazines, or sports apps.</td></tr>
 * <tr><td>productivity</td><td>7</td><td>Apps which are primarily productivity apps, such as cloud storage or workplace apps.</td></tr>
 * <tr><td>social</td><td>4</td><td>Apps which are primarily social apps, such as messaging, communication, email, or social network apps.</td></tr>
 * <tr><td>video</td><td>2</td><td>Apps which primarily work with video or movies, such as streaming video apps.</td></tr>
 * </table>
 */

public static final int appCategory = 16844101; // 0x1010545

/**
 * The (optional) fully-qualified name for a subclass of
 * {@link android.app.AppComponentFactory} that the system uses to instantiate
 * every other manifest defined class. Most applications
 * don't need this attribute. If it's not specified, the system
 * instantiates items without it.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int appComponentFactory = 16844154; // 0x101057a

/**
 * Name of the author and/or source/collection of this component, for example,
 * Art Collection, Picasso.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int author = 16843444; // 0x10102b4

/**
 * Specify the authorities under which this content provider can be
 * found.  Multiple authorities may be supplied by separating them
 * with a semicolon.  Authority names should use a Java-style naming
 * convention (such as <code>com.google.provider.MyProvider</code>)
 * in order to avoid conflicts.  Typically this name is the same
 * as the class implementation describing the provider's data structure.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int authorities = 16842776; // 0x1010018

/**
 * The view id of the AppWidget subview which should be auto-advanced.
 * by the widget's host.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int autoAdvanceViewId = 16843535; // 0x101030f

/**
 * Default AutoCompleteTextView style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int autoCompleteTextViewStyle = 16842859; // 0x101006b

/**
 * Controls whether links such as urls and email addresses are
 * automatically found and converted to clickable links.  The default
 * value is "none", disabling this feature.
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>all</td><td>f</td><td>Match all patterns (equivalent to web|email|phone|map).</td></tr>
 * <tr><td>email</td><td>2</td><td>Match email addresses.</td></tr>
 * <tr><td>map</td><td>8</td><td>Match map addresses.</td></tr>
 * <tr><td>none</td><td>0</td><td>Match no patterns (default).</td></tr>
 * <tr><td>phone</td><td>4</td><td>Match phone numbers.</td></tr>
 * <tr><td>web</td><td>1</td><td>Match Web URLs.</td></tr>
 * </table>
 */

public static final int autoLink = 16842928; // 0x10100b0

/**
 * Indicates if the drawable needs to be mirrored when its layout direction is
 * RTL (right-to-left).  See
 * {@link android.graphics.drawable.Drawable#setAutoMirrored}.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int autoMirrored = 16843754; // 0x10103ea

/**
 * Tasks launched by activities with this attribute will remain in the recent tasks
 * list until the last activity in the task is completed.  When that happens the task
 * will be automatically removed from the recent tasks list.  This overrides the caller's
 * use of {@link android.content.Intent#FLAG_ACTIVITY_RETAIN_IN_RECENTS
 * Intent.FLAG_ACTIVITY_RETAIN_IN_RECENTS}
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int autoRemoveFromRecents = 16843847; // 0x1010447

/**
 * The maximum text size constraint to be used when auto-sizing text.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int autoSizeMaxTextSize = 16844102; // 0x1010546

/**
 * The minimum text size constraint to be used when auto-sizing text.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int autoSizeMinTextSize = 16844088; // 0x1010538

/**
 * Resource array of dimensions to be used in conjunction with
 * <code>autoSizeTextType</code> set to <code>uniform</code>. Overrides
 * <code>autoSizeStepGranularity</code> if set.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * <p>May be an integer value, such as "<code>100</code>".
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 */

public static final int autoSizePresetSizes = 16844087; // 0x1010537

/**
 * Specify the auto-size step size if <code>autoSizeTextType</code> is set to
 * <code>uniform</code>. The default is 1px. Overwrites
 * <code>autoSizePresetSizes</code> if set.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int autoSizeStepGranularity = 16844086; // 0x1010536

/**
 * Specify the type of auto-size. Note that this feature is not supported by EditText,
 * works only for TextView.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>none</td><td>0</td><td>No auto-sizing (default).</td></tr>
 * <tr><td>uniform</td><td>1</td><td>Uniform horizontal and vertical text size scaling to fit within the
 * container.</td></tr>
 * </table>
 */

public static final int autoSizeTextType = 16844085; // 0x1010535

/**
 * When true, automatically start animating.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int autoStart = 16843445; // 0x10102b5

/**
 * If set, specifies that this TextView has a textual input method
 * and automatically corrects some common spelling errors.
 * The default is "false".
 * {@deprecated Use inputType instead.}
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

@Deprecated public static final int autoText = 16843114; // 0x101016a

/**
 * If provided and <code>true</code>, URLs entered in the search dialog while searching
 * within this activity would be detected and treated as URLs (show a 'go' button in the
 * keyboard and invoke the browser directly when user launches the URL instead of passing
 * the URL to the activity). If set to <code>false</code> any URLs entered are treated as
 * normal query text.
 * The default value is <code>false</code>. <i>Optional attribute.</i>.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int autoUrlDetect = 16843404; // 0x101028c

/**
 * Specify whether an activity intent filter will need to be verified thru its set
 * of data URIs. This will only be used when the Intent's action is set to
 * {@link android.content.Intent#ACTION_VIEW Intent.ACTION_VIEW} and the Intent's category is
 * set to {@link android.content.Intent#CATEGORY_BROWSABLE Intent.CATEGORY_BROWSABLE} and the
 * intern filter data scheme is set to "http" or "https". When set to true, the intent filter
 * will need to use its data tag for getting the URIs to verify with.
 * For each URI, an HTTPS network request will be done to <code>/.well-known/statements.json</code>
 * host to verify that the web site is okay with the app intercepting the URI.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int autoVerify = 16844014; // 0x10104ee

/**
 * Describes the content of a view so that a autofill service can fill in the appropriate
 * data. Multiple hints can be combined in a comma separated list or an array of strings
 * to mean e.g. emailAddress or postalAddress.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int autofillHints = 16844118; // 0x1010556

/**
 * Drawable to be drawn over the view to mark it as autofilled
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int autofilledHighlight = 16844136; // 0x1010568

/**
 * A drawable to use as the background.  This can be either a reference
 * to a full drawable resource (such as a PNG image, 9-patch,
 * XML state list description, etc), or a solid color such as "#ff000000"
 * (black).
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int background = 16842964; // 0x10100d4

/**
 * Default background dim amount when a menu, dialog, or something similar pops up.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 */

public static final int backgroundDimAmount = 16842802; // 0x1010032

/**
 * Control whether dimming behind the window is enabled.  The default
 * theme does not set this value, meaning it is based on whether the
 * window is floating.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int backgroundDimEnabled = 16843295; // 0x101021f

/**
 * Specifies a background drawable for the bottom component of a split action bar.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int backgroundSplit = 16843659; // 0x101038b

/**
 * Specifies a background drawable for a second stacked row of the action bar.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int backgroundStacked = 16843658; // 0x101038a

/**
 * Tint to apply to the background.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int backgroundTint = 16843883; // 0x101046b

/**
 * Blending mode used to apply the background tint.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
 * result to valid color values. Saturate(S + D)</td></tr>
 * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
 * the tint. [Sa * Da, Sc * Dc]</td></tr>
 * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
 * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
 * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
 * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
 * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
 * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
 * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
 * </table>
 */

public static final int backgroundTintMode = 16843884; // 0x101046c

/**
 * The name of the class subclassing <code>BackupAgent</code> to manage
 * backup and restore of the application's data on external storage.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int backupAgent = 16843391; // 0x101027f

/**
 * Indicates that full-data backup operations for this application may
 * be performed even if the application is in a foreground-equivalent
 * state.  <em>Use with caution!</em>  Setting this flag to <code>true</code>
 * can impact app behavior while the user is interacting with the device.
 * <p>If unspecified, the default value of this attribute is <code>false</code>,
 * which means that the OS will avoid backing up the application while it is
 * running in the foreground (such as a music app that is actively playing
 * music via a service in the startForeground() state).
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int backupInForeground = 16844058; // 0x101051a

/**
 * A Drawable resource providing an extended graphical banner for its
 * associated item. Use with the application tag (to supply a default
 * banner for all application activities), or with the activity, tag to
 * supply a banner for a specific activity.
 * <p>The given banner will be used to display to the user a graphical
 * representation of an activity in the Leanback application launcher.
 * Since banners are displayed only in the Leanback launcher, they should
 * only be used with activities (and applications) that support Leanback
 * mode. These are activities that handle Intents of category
 * {@link android.content.Intent#CATEGORY_LEANBACK_LAUNCHER
 * Intent.CATEGORY_LEANBACK_LAUNCHER}.
 * <p>This must be a reference to a Drawable resource containing the image definition.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int banner = 16843762; // 0x10103f2

/**
 * The offset of the baseline within this view. See {see android.view.View#getBaseline}
 * for details
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int baseline = 16843548; // 0x101031c

/**
 * If true, the image view will be baseline aligned with based on its
 * bottom edge.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int baselineAlignBottom = 16843042; // 0x1010122

/**
 * When set to false, prevents the layout from aligning its children's
 * baselines. This attribute is particularly useful when the children
 * use different values for gravity. The default value is true.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int baselineAligned = 16843046; // 0x1010126

/**
 * When a linear layout is part of another layout that is baseline
 * aligned, it can specify which of its children to baseline align to
 * (that is, which child TextView).
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int baselineAlignedChildIndex = 16843047; // 0x1010127

/**
 * Drawable to use as the icon bitmap.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int bitmap = 16844054; // 0x1010516

/**
 * Style for buttons without an explicit border, often used in groups.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int borderlessButtonStyle = 16843563; // 0x101032b

/**
 * Amount of bottom padding inside the gradient shape.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int bottom = 16843184; // 0x10101b0

/**
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int bottomBright = 16842957; // 0x10100cd

/**
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int bottomDark = 16842953; // 0x10100c9

/**
 * Radius of the bottom left corner.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int bottomLeftRadius = 16843179; // 0x10101ab

/**
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int bottomMedium = 16842958; // 0x10100ce

/**
 * Extra offset for the handle at the bottom of the SlidingDrawer.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int bottomOffset = 16843351; // 0x1010257

/**
 * Radius of the bottom right corner.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int bottomRightRadius = 16843180; // 0x10101ac

/**
 * The short title for the bread crumb of this item.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int breadCrumbShortTitle = 16843524; // 0x1010304

/**
 * The title for the bread crumb of this item.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int breadCrumbTitle = 16843523; // 0x1010303

/**
 * Break strategy (control over paragraph layout).
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>balanced</td><td>2</td><td>Line breaking strategy balances line lengths.</td></tr>
 * <tr><td>high_quality</td><td>1</td><td>Line breaking uses high-quality strategy, including hyphenation.</td></tr>
 * <tr><td>simple</td><td>0</td><td>Line breaking uses simple strategy.</td></tr>
 * </table>
 */

public static final int breakStrategy = 16843997; // 0x10104dd

/**
 * Determines the minimum type that getText() will return.
 * The default is "normal".
 * Note that EditText and LogTextBox always return Editable,
 * even if you specify something less powerful here.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>editable</td><td>2</td><td>Can only return Spannable and Editable.</td></tr>
 * <tr><td>normal</td><td>0</td><td>Can return any CharSequence, possibly a
 * Spanned one if the source text was Spanned.</td></tr>
 * <tr><td>spannable</td><td>1</td><td>Can only return Spannable.</td></tr>
 * </table>
 */

public static final int bufferType = 16843086; // 0x101014e

/**
 * Drawable used for the button graphic (for example, checkbox and radio button).
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int button = 16843015; // 0x1010107

/**
 * Style for buttons within button bars.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int buttonBarButtonStyle = 16843567; // 0x101032f

/**
 * Style for the "negative" buttons within button bars.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int buttonBarNegativeButtonStyle = 16843915; // 0x101048b

/**
 * Style for the "neutral" buttons within button bars.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int buttonBarNeutralButtonStyle = 16843914; // 0x101048a

/**
 * Style for the "positive" buttons within button bars.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int buttonBarPositiveButtonStyle = 16843913; // 0x1010489

/**
 * Style for button bars.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int buttonBarStyle = 16843566; // 0x101032e

/**
 * Corner radius of buttons.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int buttonCornerRadius = 16844149; // 0x1010575

/**
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
 * <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
 * </table>
 */

public static final int buttonGravity = 16844030; // 0x10104fe

/**
 * Normal Button style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int buttonStyle = 16842824; // 0x1010048

/**
 * Button style to inset into an EditText.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int buttonStyleInset = 16842826; // 0x101004a

/**
 * Small Button style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int buttonStyleSmall = 16842825; // 0x1010049

/**
 * ToggleButton style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int buttonStyleToggle = 16842827; // 0x101004b

/**
 * Tint to apply to the button graphic.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int buttonTint = 16843887; // 0x101046f

/**
 * Blending mode used to apply the button graphic tint.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
 * result to valid color values. Saturate(S + D)</td></tr>
 * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
 * the tint. [Sa * Da, Sc * Dc]</td></tr>
 * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
 * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
 * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
 * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
 * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
 * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
 * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
 * </table>
 */

public static final int buttonTintMode = 16843888; // 0x1010470

/**
 * Indicates that this list will always be drawn on top of solid, single-color
 * opaque background. This allows the list to optimize drawing.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int cacheColorHint = 16843009; // 0x1010101

/**
 * The text color list of the calendar.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int calendarTextColor = 16843931; // 0x101049b

/**
 * Whether the calendar view is shown. Only valid for "spinner" mode.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int calendarViewShown = 16843596; // 0x101034c

/**
 * The CalendarView style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int calendarViewStyle = 16843613; // 0x101035d

/**
 * Attribute whether the accessibility service wants to be able to control
 * display magnification.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int canControlMagnification = 16844039; // 0x1010507

/**
 * Attribute whether the accessibility service wants to be able to perform gestures.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int canPerformGestures = 16844045; // 0x101050d

/**
 * Attribute whether the TV input service can record programs. This value can be changed
 * at runtime by calling
 * {@link android.media.tv.TvInputManager#updateTvInputInfo(android.media.tv.TvInputInfo)}.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int canRecord = 16844060; // 0x101051c

/**
 * Attribute whether the accessibility service wants to be able to request enhanced
 * web accessibility enhancements.
 * {@deprecated Not used by the framework}
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

@Deprecated public static final int canRequestEnhancedWebAccessibility = 16843736; // 0x10103d8

/**
 * Attribute whether the accessibility service wants to be able to request to
 * filter key events.
 * <p>
 * Required to allow setting the {@link android.accessibilityservice
 * #AccessibilityServiceInfo#FLAG_REQUEST_FILTER_KEY_EVENTS} flag.
 * </p>
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int canRequestFilterKeyEvents = 16843737; // 0x10103d9

/**
 * Attribute whether the accessibility service wants to be able to capture gestures from
 * the fingerprint sensor.
 * <p>
 * Required to allow setting the {@link android.accessibilityservice
 * #AccessibilityServiceInfo#FLAG_REQUEST_FINGERPRINT_GESTURES} flag to have any effect.
 * </p>
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int canRequestFingerprintGestures = 16844109; // 0x101054d

/**
 * Attribute whether the accessibility service wants to be able to request touch
 * exploration mode in which touched items are spoken aloud and the UI can be
 * explored via gestures.
 * <p>
 * Required to allow setting the {@link android.accessibilityservice
 * #AccessibilityServiceInfo#FLAG_REQUEST_TOUCH_EXPLORATION_MODE} flag.
 * </p>
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int canRequestTouchExplorationMode = 16843735; // 0x10103d7

/**
 * Attribute whether the accessibility service wants to be able to retrieve the
 * active window content. This setting cannot be changed at runtime.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int canRetrieveWindowContent = 16843653; // 0x1010385

/**
 * A styled string, specifying the style to be used for showing
 * inline candidate text when composing with an input method.  The
 * text itself will be ignored, but the style spans will be applied
 * to the candidate text as it is edited.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int candidatesTextStyleSpans = 16843312; // 0x1010230

/**
 * Declare that this application can't participate in the normal
 * state save/restore mechanism.  Since it is not able to save and
 * restore its state on demand,
 * it can not participate in the normal activity lifecycle.  It will
 * not be killed while in the background; the user must explicitly
 * quit it.  Only one such app can be running at a time; if the user
 * tries to launch a second such app, they will be prompted
 * to quit the first before doing so.  While the
 * application is running, the user will be informed of this.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int cantSaveState = 16844142; // 0x101056e

/**
 * If set, specifies that this TextView has a textual input method
 * and should automatically capitalize what the user types.
 * The default is "none".
 * {@deprecated Use inputType instead.}
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>characters</td><td>3</td><td>Capitalize every character.</td></tr>
 * <tr><td>none</td><td>0</td><td>Don't automatically capitalize anything.</td></tr>
 * <tr><td>sentences</td><td>1</td><td>Capitalize the first word of each sentence.</td></tr>
 * <tr><td>words</td><td>2</td><td>Capitalize the first letter of every word.</td></tr>
 * </table>
 */

@Deprecated public static final int capitalize = 16843113; // 0x1010169

/**
 * Category of the resource overlay.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int category = 16843752; // 0x10103e8

/**
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int centerBright = 16842956; // 0x10100cc

/**
 * Optional center color. For linear gradients, use centerX or centerY to place the center
 * color.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int centerColor = 16843275; // 0x101020b

/**
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int centerDark = 16842952; // 0x10100c8

/**
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int centerMedium = 16842959; // 0x10100cf

/**
 * X-position of the center point of the gradient within the shape as a fraction of the
 * width. The default value is 0.5.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 */

public static final int centerX = 16843170; // 0x10101a2

/**
 * Y-position of the center point of the gradient within the shape as a fraction of the
 * height. The default value is 0.5.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 */

public static final int centerY = 16843171; // 0x10101a3

/**
 * The SHA-256 digest of the library signing certificate.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int certDigest = 16844104; // 0x1010548

/**
 * Default style for CheckBoxPreference.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int checkBoxPreferenceStyle = 16842895; // 0x101008f

/**
 * Drawable used for the check mark graphic.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int checkMark = 16843016; // 0x1010108

/**
 * Tint to apply to the check mark.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int checkMarkTint = 16843943; // 0x10104a7

/**
 * Blending mode used to apply the check mark tint.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
 * result to valid color values. Saturate(S + D)</td></tr>
 * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
 * the tint. [Sa * Da, Sc * Dc]</td></tr>
 * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
 * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
 * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
 * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
 * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
 * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
 * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
 * </table>
 */

public static final int checkMarkTintMode = 16843944; // 0x10104a8

/**
 * Whether the item is capable of displaying a check mark.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int checkable = 16843237; // 0x10101e5

/**
 * Whether the items are capable of displaying a check mark.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>all</td><td>1</td><td>The items are all checkable.</td></tr>
 * <tr><td>none</td><td>0</td><td>The items are not checkable.</td></tr>
 * <tr><td>single</td><td>2</td><td>The items are checkable and there will only be a single checked item in
 * this group.</td></tr>
 * </table>
 */

public static final int checkableBehavior = 16843232; // 0x10101e0

/**
 * Default Checkbox style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int checkboxStyle = 16842860; // 0x101006c

/**
 * Indicates the initial checked state of this button.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int checked = 16843014; // 0x1010106

/**
 * The id of the child radio button that should be checked by default
 * within this radio group.
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int checkedButton = 16843080; // 0x1010148

/**
 * Default CheckedTextView style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int checkedTextViewStyle = 16843720; // 0x10103c8

/**
 * Drawable or color that is used as a divider for children. (It will drawn
 * below and above child items.) The height of this will be the same as
 * the height of the normal list item divider.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int childDivider = 16843025; // 0x1010111

/**
 * Indicator shown beside the child View. This can be a stateful Drawable.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int childIndicator = 16843020; // 0x101010c

/**
 * The end bound for a child's indicator.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int childIndicatorEnd = 16843732; // 0x10103d4

/**
 * The left bound for a child's indicator.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int childIndicatorLeft = 16843023; // 0x101010f

/**
 * The right bound for a child's indicator.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int childIndicatorRight = 16843024; // 0x1010110

/**
 * The start bound for a child's indicator.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int childIndicatorStart = 16843731; // 0x10103d3

/**
 * Defines the choice behavior for the view. By default, lists do not have
 * any choice behavior. By setting the choiceMode to singleChoice, the list
 * allows up to one item to be in a chosen state. By setting the choiceMode to
 * multipleChoice, the list allows any number of items to be chosen.
 * Finally, by setting the choiceMode to multipleChoiceModal the list allows
 * any number of items to be chosen in a special selection mode.
 * The application will supply a
 * {@link android.widget.AbsListView.MultiChoiceModeListener} using
 * {@link android.widget.AbsListView#setMultiChoiceModeListener} to control the
 * selection mode. This uses the {@link android.view.ActionMode} API.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>multipleChoice</td><td>2</td><td>The list allows multiple choices.</td></tr>
 * <tr><td>multipleChoiceModal</td><td>3</td><td>The list allows multiple choices in a custom selection mode.</td></tr>
 * <tr><td>none</td><td>0</td><td>Normal list that does not indicate choices.</td></tr>
 * <tr><td>singleChoice</td><td>1</td><td>The list allows up to one choice.</td></tr>
 * </table>
 */

public static final int choiceMode = 16843051; // 0x101012b

/**
 * The classname of the classloader used to load the application's classes
 * from its APK. The APK in question can either be the 'base' APK or any
 * of the application's 'split' APKs if it's using a feature split.
 * <p>
 * The supported values for this attribute are
 * <code>dalvik.system.PathClassLoader</code> and
 * <code>dalvik.system.DelegateLastClassLoader</code>. If unspecified,
 * the default value of this attribute is <code>dalvik.system.PathClassLoader</code>.
 * If an unknown classloader is provided, a PackageParserException with cause
 * <code>PackageManager.INSTALL_PARSE_FAILED_MANIFEST_MALFORMED</code> will be
 * thrown and the app will not be installed.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int classLoader = 16844139; // 0x101056b

/**
 * Specify whether an activity's task should be cleared when it
 * is re-launched from the home screen.  As a result, every time the
 * user starts the task, they will be brought to its root activity,
 * regardless of whether they used BACK or HOME to last leave it.
 * This flag only applies to activities that
 * are used to start the root of a new task.
 * <p>An example of the use of this flag would be for the case where
 * a user launches activity A from home, and from there goes to
 * activity B.  They now press home, and then return to activity A.
 * Normally they would see activity B, since that is what they were
 * last doing in A's task.  However, if A has set this flag to true,
 * then upon going to the background all of the tasks on top of it (B
 * in this case) are removed, so when the user next returns to A they
 * will restart at its original activity.
 * <p>When this option is used in conjunction with
 * {@link android.R.attr#allowTaskReparenting}, the allowTaskReparenting trumps the
 * clear.  That is, all activities above the root activity of the
 * task will be removed: those that have an affinity will be moved
 * to the task they are associated with, otherwise they will simply
 * be dropped as described here.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int clearTaskOnLaunch = 16842773; // 0x1010015

/**
 * Defines whether this view reacts to click events.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int clickable = 16842981; // 0x10100e5

/**
 * Defines whether a child is limited to draw inside of its bounds or not.
 * This is useful with animations that scale the size of the children to more
 * than 100% for instance. In such a case, this property should be set to false
 * to allow the children to draw outside of their bounds. The default value of
 * this property is true.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int clipChildren = 16842986; // 0x10100ea

/**
 * The orientation for the clip.
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>horizontal</td><td>1</td><td>Clip the drawable horizontally.</td></tr>
 * <tr><td>vertical</td><td>2</td><td>Clip the drawable vertically.</td></tr>
 * </table>
 */

public static final int clipOrientation = 16843274; // 0x101020a

/**
 * Defines whether the ViewGroup will clip its children and resize (but not clip) any
 * EdgeEffect to its padding, if padding is not zero. This property is set to true by
 * default.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int clipToPadding = 16842987; // 0x10100eb

/**
 * Close button icon.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int closeIcon = 16843905; // 0x1010481

/**
 * The unicode value or comma-separated values that this key outputs.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int codes = 16843330; // 0x1010242

/**
 * The zero-based index of the columns to collapse. The column indices
 * must be separated by a comma: 1, 2, 5. Illegal and duplicate
 * indices are ignored.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int collapseColumns = 16843083; // 0x101014b

/**
 * Text to set as the content description for the collapse button.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int collapseContentDescription = 16843984; // 0x10104d0

/**
 * Icon drawable to use for the collapse button.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int collapseIcon = 16844031; // 0x10104ff

/**
 * Solid color for the gradient shape.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int color = 16843173; // 0x10101a5

/**
 * Bright complement to the primary branding color. By default, this is the color applied
 * to framework controls (via colorControlActivated).
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int colorAccent = 16843829; // 0x1010435

/**
 * Default highlight color for items that are
 * activated. (Activated meaning persistent selection.)
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int colorActivatedHighlight = 16843664; // 0x1010390

/**
 * Default color of background imagery, ex. full-screen windows.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int colorBackground = 16842801; // 0x1010031

/**
 * This is a hint for a solid color that can be used for caching
 * rendered views.  This should be the color of the background when
 * there is a solid background color; it should be null when the
 * background is a texture or translucent.  When a device is able
 * to use accelerated drawing (thus setting state_accelerated), the
 * cache hint is ignored and always assumed to be transparent.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int colorBackgroundCacheHint = 16843435; // 0x10102ab

/**
 * Default color of background imagery for floating components, ex. dialogs, popups, and cards.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int colorBackgroundFloating = 16844002; // 0x10104e2

/**
 * The color applied to framework buttons in their normal state.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int colorButtonNormal = 16843819; // 0x101042b

/**
 * The color applied to framework controls in their activated (ex. checked) state.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int colorControlActivated = 16843818; // 0x101042a

/**
 * The color applied to framework control highlights (ex. ripples, list selectors).
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int colorControlHighlight = 16843820; // 0x101042c

/**
 * The color applied to framework controls in their normal state.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int colorControlNormal = 16843817; // 0x1010429

/**
 * The color applied to the edge effect on scrolling containers.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int colorEdgeEffect = 16843982; // 0x10104ce

/**
 * Color used for error states and things that need to be drawn to
 * the users attention..
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int colorError = 16844099; // 0x1010543

/**
 * Default highlight color for items that are
 * focused. (Focused meaning cursor-based selection.)
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int colorFocusedHighlight = 16843663; // 0x101038f

/**
 * Default color of foreground imagery.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int colorForeground = 16842800; // 0x1010030

/**
 * Default color of foreground imagery on an inverted background.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int colorForegroundInverse = 16843270; // 0x1010206

/**
 * Default highlight color for items that are long-pressed.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int colorLongPressedHighlight = 16843662; // 0x101038e

/**
 * Specify the color mode the activity desires. The requested color mode may be ignored
 * depending on the capabilities of the display the activity is displayed on.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>default</td><td>0</td><td>The default color mode (typically sRGB, low-dynamic range).</td></tr>
 * <tr><td>hdr</td><td>2</td><td>High dynamic range color mode.</td></tr>
 * <tr><td>wideColorGamut</td><td>1</td><td>Wide color gamut color mode.</td></tr>
 * </table>
 */

public static final int colorMode = 16844106; // 0x101054a

/**
 * Default highlight color for items in multiple selection
 * mode.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int colorMultiSelectHighlight = 16843665; // 0x1010391

/**
 * Default highlight color for items that are pressed.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int colorPressedHighlight = 16843661; // 0x101038d

/**
 * The primary branding color for the app. By default, this is the color applied to the
 * action bar background.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int colorPrimary = 16843827; // 0x1010433

/**
 * Dark variant of the primary branding color. By default, this is the color applied to
 * the status bar (via statusBarColor) and navigation bar (via navigationBarColor).
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int colorPrimaryDark = 16843828; // 0x1010434

/**
 * The secondary branding color for the app.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int colorSecondary = 16844080; // 0x1010530

/**
 * The maxmimum number of columns to create when automatically positioning children.
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int columnCount = 16843639; // 0x1010377

/**
 * Fraction of the animation duration used to delay the beginning of
 * the animation of each column.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 */

public static final int columnDelay = 16843215; // 0x10101cf

/**
 * When set to true, forces column boundaries to appear in the same order
 * as column indices.
 * The default is true.
 * See {@link android.widget.GridLayout#setColumnOrderPreserved(boolean)}.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int columnOrderPreserved = 16843640; // 0x1010378

/**
 * Specifies the fixed width for each column.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int columnWidth = 16843031; // 0x1010117

/**
 * Commit icon shown in the query suggestion row.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int commitIcon = 16843909; // 0x1010485

/**
 * Starting with {@link android.os.Build.VERSION_CODES#HONEYCOMB_MR2},
 * this is the new way to specify the largest screens an application is
 * compatible with.  This attribute provides the maximum
 * "smallest screen width" (as per the -swNNNdp resource configuration)
 * that the application is designed for.  If this value is smaller than
 * the "smallest screen width" of the device it is running on, the user
 * is offered to run it in a compatibility mode that emulates a
 * smaller screen and zooms it to fit the screen. Currently the compatibility mode only
 * emulates phone screens with a 320dp width, so compatibility mode is not applied if the
 * value for compatibleWidthLimitDp is larger than 320.
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int compatibleWidthLimitDp = 16843621; // 0x1010365

/**
 * Defines the hint displayed in the drop down menu.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int completionHint = 16843122; // 0x1010172

/**
 * Defines the hint view displayed in the drop down menu.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int completionHintView = 16843123; // 0x1010173

/**
 * Defines the number of characters that the user must type before
 * completion suggestions are displayed in a drop down menu.
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int completionThreshold = 16843124; // 0x1010174

/**
 * Specify one or more configuration changes that the activity will
 * handle itself.  If not specified, the activity will be restarted
 * if any of these configuration changes happen in the system.  Otherwise,
 * the activity will remain running and its
 * {@link android.app.Activity#onConfigurationChanged Activity.onConfigurationChanged}
 * method called with the new configuration.
 * <p>Note that all of these configuration changes can impact the
 * resource values seen by the application, so you will generally need
 * to re-retrieve all resources (including view layouts, drawables, etc)
 * to correctly handle any configuration change.
 * <p>These values must be kept in sync with those in
 * {@link android.content.pm.ActivityInfo} and
 * include/utils/ResourceTypes.h.
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>colorMode</td><td>4000</td><td>The color mode of the screen has changed (color gamut or dynamic range).</td></tr>
 * <tr><td>density</td><td>1000</td><td>The display density has changed. This might be caused by the user
 * specifying a different display scale, or it might be caused by a
 * different display being activated.</td></tr>
 * <tr><td>fontScale</td><td>40000000</td><td>The font scaling factor has changed, that is the user has
 * selected a new global font size.</td></tr>
 * <tr><td>keyboard</td><td>10</td><td>The keyboard type has changed, for example the user has plugged
 * in an external keyboard.</td></tr>
 * <tr><td>keyboardHidden</td><td>20</td><td>The keyboard or navigation accessibility has changed, for example
 * the user has slid the keyboard out to expose it.  Note that
 * despite its name, this applied to any accessibility: keyboard
 * or navigation.</td></tr>
 * <tr><td>layoutDirection</td><td>2000</td><td>The layout direction has changed. For example going from LTR to RTL.</td></tr>
 * <tr><td>locale</td><td>4</td><td>The locale has changed, that is the user has selected a new
 * language that text should be displayed in.</td></tr>
 * <tr><td>mcc</td><td>1</td><td>The IMSI MCC has changed, that is a SIM has been detected and
 * updated the Mobile Country Code. By default from Android O, we
 * don't recreate the activity even the app doesn't specify mcc in
 * configChanges. If the app wants to recreate the activity, specify
 * mcc in recreateOnConfigChanges.</td></tr>
 * <tr><td>mnc</td><td>2</td><td>The IMSI MNC has changed, that is a SIM has been detected and
 * updated the Mobile Network Code. By default from Android O, we
 * don't recreate the activity even the app doesn't specify mnc in
 * configChanges. If the app wants to recreate the acvitity, specify
 * mnc in recreateOnConfigChanges.</td></tr>
 * <tr><td>navigation</td><td>40</td><td>The navigation type has changed.  Should never normally happen.</td></tr>
 * <tr><td>orientation</td><td>80</td><td>The screen orientation has changed, that is the user has
 * rotated the device.</td></tr>
 * <tr><td>screenLayout</td><td>100</td><td>The screen layout has changed.  This might be caused by a
 * different display being activated.</td></tr>
 * <tr><td>screenSize</td><td>400</td><td>The current available screen size has changed.  If applications don't
 * target at least {@link android.os.Build.VERSION_CODES#HONEYCOMB_MR2}
 * then the activity will always handle this itself (the change
 * will not result in a restart).  This represents a change in the
 * currently available size, so will change when the user switches
 * between landscape and portrait.</td></tr>
 * <tr><td>smallestScreenSize</td><td>800</td><td>The physical screen size has changed.  If applications don't
 * target at least {@link android.os.Build.VERSION_CODES#HONEYCOMB_MR2}
 * then the activity will always handle this itself (the change
 * will not result in a restart).  This represents a change in size
 * regardless of orientation, so will only change when the actual
 * physical screen size has changed such as switching to an external
 * display.</td></tr>
 * <tr><td>touchscreen</td><td>8</td><td>The touchscreen has changed.  Should never normally happen.</td></tr>
 * <tr><td>uiMode</td><td>200</td><td>The global user interface mode has changed.  For example,
 * going in or out of car mode, night mode changing, etc.</td></tr>
 * </table>
 */

public static final int configChanges = 16842783; // 0x101001f

/**
 * A class name in the AppWidget's package to be launched to configure.
 * If not supplied, then no activity will be launched.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int configure = 16843357; // 0x101025d

/**
 * If true, the drawable's reported internal size will remain
 * constant as the state changes; the size is the maximum of all
 * of the states.  If false, the size will vary based on the
 * current state.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int constantSize = 16843158; // 0x1010196

/**
 * Identifier for the child that represents the drawer's content.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int content = 16843355; // 0x101025b

/**
 * The age associated with the content rating. The content of this rating is suitable for
 * people of this age or above.
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int contentAgeHint = 16843961; // 0x10104b9

/**
 * the authority of a content provider.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int contentAuthority = 16843408; // 0x1010290

/**
 * The content description associated with the item.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int contentDescription = 16843379; // 0x1010273

/**
 * Minimum inset for content views within a bar. Navigation buttons and
 * menu views are excepted. Only valid for some themes and configurations.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int contentInsetEnd = 16843860; // 0x1010454

/**
 * Minimum inset for content views within a bar when actions from a menu
 * are present. Only valid for some themes and configurations.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int contentInsetEndWithActions = 16844067; // 0x1010523

/**
 * Minimum inset for content views within a bar. Navigation buttons and
 * menu views are excepted. Only valid for some themes and configurations.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int contentInsetLeft = 16843861; // 0x1010455

/**
 * Minimum inset for content views within a bar. Navigation buttons and
 * menu views are excepted. Only valid for some themes and configurations.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int contentInsetRight = 16843862; // 0x1010456

/**
 * Minimum inset for content views within a bar. Navigation buttons and
 * menu views are excepted. Only valid for some themes and configurations.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int contentInsetStart = 16843859; // 0x1010453

/**
 * Minimum inset for content views within a bar when a navigation button
 * is present, such as the Up button. Only valid for some themes and configurations.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int contentInsetStartWithNavigation = 16844066; // 0x1010522

/**
 * Defines whether this view reacts to context click events.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int contextClickable = 16844007; // 0x10104e7

/**
 * Title of the uri that specifies a link for further context of this wallpaper,
 * for example, Explore collection.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int contextDescription = 16844078; // 0x101052e

/**
 * Default context menu PopupMenu style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int contextPopupMenuStyle = 16844033; // 0x1010501

/**
 * Uri that specifies a link for further context of this wallpaper, for example,
 * http://www.picasso.org.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int contextUri = 16844077; // 0x101052d

/**
 * The x coordinate of the first control point of the cubic Bezier.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 */

public static final int controlX1 = 16843772; // 0x10103fc

/**
 * The x coordinate of the second control point of the cubic Bezier.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 */

public static final int controlX2 = 16843774; // 0x10103fe

/**
 * The y coordinate of the first control point of the cubic Bezier.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 */

public static final int controlY1 = 16843773; // 0x10103fd

/**
 * The y coordinate of the second control point of the cubic Bezier.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 */

public static final int controlY2 = 16843775; // 0x10103ff

/**
 * Specifies whether this Chronometer counts down or counts up from the base.
 * If not specified this is false and the Chronometer counts up.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int countDown = 16844059; // 0x101051b

/**
 * The country code associated with the content rating system, which consists of two
 * uppercase letters that conform to the ISO 3166 standard.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int country = 16843962; // 0x10104ba

/**
 * If true, the image will be cropped to fit within its padding.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int cropToPadding = 16843043; // 0x1010123

/**
 * Makes the cursor visible (the default) or invisible.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int cursorVisible = 16843090; // 0x1010152

/**
 * Specifies a layout for custom navigation. Overrides navigationMode.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int customNavigationLayout = 16843474; // 0x10102d2

/**
 * Account handles its own token storage and permissions.
 * Default to false
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int customTokens = 16843579; // 0x101033b

/**
 * <p>May be a floating point value, such as "<code>1.2</code>".
 */

public static final int cycles = 16843220; // 0x10101d4

/**
 * Gap between dashes in the stroke.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int dashGap = 16843175; // 0x10101a7

/**
 * Length of a dash in the stroke.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int dashWidth = 16843174; // 0x10101a6

/**
 * The data URI to assign to the Intent, as per
 * {@link android.content.Intent#setData Intent.setData()}.
 * <p><em>Note: scheme and host name matching in the Android framework is
 * case-sensitive, unlike the formal RFC.  As a result,
 * URIs here should always be normalized to use lower case letters
 * for these elements (as well as other proper Uri normalization).</em></p>
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int data = 16842798; // 0x101002e

/**
 * The DatePicker dialog theme.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int datePickerDialogTheme = 16843948; // 0x10104ac

/**
 * Defines the look of the widget. Prior to the L release, the only choice was
 * spinner. As of L, with the Material theme selected, the default layout is calendar,
 * but this attribute can be used to force spinner to be used instead.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>calendar</td><td>2</td><td>Date picker with calendar to select the date.</td></tr>
 * <tr><td>spinner</td><td>1</td><td>Date picker with spinner controls to select the date.</td></tr>
 * </table>
 */

public static final int datePickerMode = 16843955; // 0x10104b3

/**
 * The DatePicker style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int datePickerStyle = 16843612; // 0x101035c

/**
 * The text appearance for the day numbers in the calendar grid.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int dateTextAppearance = 16843593; // 0x1010349

/**
 * The background color for the header's day of week.
 * {@deprecated No longer displayed.}
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

@Deprecated public static final int dayOfWeekBackground = 16843924; // 0x1010494

/**
 * The text color for the header's day of week.
 * {@deprecated No longer displayed.}
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

@Deprecated public static final int dayOfWeekTextAppearance = 16843925; // 0x1010495

/**
 * Flag indicating whether the application can be debugged, even when
 * running on a device that is running in user mode.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int debuggable = 16842767; // 0x101000f

/**
 * Whether this View should use a default focus highlight when it gets focused but
 * doesn't have {@link android.R.attr#state_focused} defined in its background.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int defaultFocusHighlightEnabled = 16844130; // 0x1010562

/**
 * Default height of the activity. Can be either a fixed value or fraction, in which case
 * the height will be constructed as a fraction of the total available height.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 */

public static final int defaultHeight = 16844021; // 0x10104f5

/**
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int defaultToDeviceProtectedStorage = 16844036; // 0x1010504

/**
 * The default value for the preference, which will be set either if persistence
 * is off or persistence is on and the preference is not found in the persistent
 * storage.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * <p>May be an integer value, such as "<code>100</code>".
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * <p>May be a floating point value, such as "<code>1.2</code>".
 */

public static final int defaultValue = 16843245; // 0x10101ed

/**
 * Default width of the activity. Can be either a fixed value or fraction, in which case
 * the width will be constructed as a fraction of the total available width.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 */

public static final int defaultWidth = 16844020; // 0x10104f4

/**
 * Fraction of the animation duration used to delay the beginning of
 * the animation of each child.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 */

public static final int delay = 16843212; // 0x10101cc

/**
 * The key of another Preference that this Preference will depend on.  If the other
 * Preference is not set or is off, this Preference will be disabled.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int dependency = 16843244; // 0x10101ec

/**
 * Defines the relationship between the ViewGroup and its descendants
 * when looking for a View to take focus.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>afterDescendants</td><td>1</td><td>The ViewGroup will get focus only if none of its descendants want it.</td></tr>
 * <tr><td>beforeDescendants</td><td>0</td><td>The ViewGroup will get focus before any of its descendants.</td></tr>
 * <tr><td>blocksDescendants</td><td>2</td><td>The ViewGroup will block its descendants from receiving focus.</td></tr>
 * </table>
 */

public static final int descendantFocusability = 16842993; // 0x10100f1

/**
 * Descriptive text for the associated data.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int description = 16842784; // 0x1010020

/**
 * Special option for window animations: if this window is on top
 * of a wallpaper, don't animate the wallpaper with it.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int detachWallpaper = 16843430; // 0x10102a6

/**
 * Column in data table that contains details for this data.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int detailColumn = 16843427; // 0x10102a3

/**
 * Flag indicating that detail should be built from SocialProvider.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int detailSocialSummary = 16843428; // 0x10102a4

/**
 * Background that can be used behind parts of a UI that provide
 * details on data the user is selecting.  For example, this is
 * the background element of PreferenceActivity's embedded
 * preference fragment.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int detailsElementBackground = 16843598; // 0x101034e

/**
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int dial = 16843010; // 0x1010102

/**
 * Corner radius of dialogs.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int dialogCornerRadius = 16844145; // 0x1010571

/**
 * The icon for the dialog.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int dialogIcon = 16843252; // 0x10101f4

/**
 * A layout to be used as the content View for the dialog. By default, this shouldn't
 * be needed. If a custom DialogPreference is required, this should be set. For example,
 * the EditTextPreference uses a layout with an EditText as this attribute.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int dialogLayout = 16843255; // 0x10101f7

/**
 * The message in the dialog. If a dialogLayout is provided and contains
 * a TextView with ID android:id/message, this message will be placed in there.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int dialogMessage = 16843251; // 0x10101f3

/**
 * Default style for DialogPreference.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int dialogPreferenceStyle = 16842897; // 0x1010091

/**
 * Preferred padding for dialog content.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int dialogPreferredPadding = 16843987; // 0x10104d3

/**
 * Theme to use for dialogs spawned from this theme.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int dialogTheme = 16843528; // 0x1010308

/**
 * The title in the dialog.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int dialogTitle = 16843250; // 0x10101f2

/**
 * If set, specifies that this TextView has a numeric input method
 * and that these specific characters are the ones that it will
 * accept.
 * If this is set, numeric is implied to be true.
 * The default is false.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int digits = 16843110; // 0x1010166

/**
 * Indicate if this component is aware of direct boot lifecycle, and can be
 * safely run before the user has entered their credentials (such as a lock
 * pattern or PIN).
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int directBootAware = 16844037; // 0x1010505

/**
 * Direction of the animation in the grid.
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>bottom_to_top</td><td>2</td><td>Animates rows from bottom to top.</td></tr>
 * <tr><td>left_to_right</td><td>0</td><td>Animates columns from left to right.</td></tr>
 * <tr><td>right_to_left</td><td>1</td><td>Animates columns from right to left.</td></tr>
 * <tr><td>top_to_bottom</td><td>0</td><td>Animates rows from top to bottom.</td></tr>
 * </table>
 */

public static final int direction = 16843217; // 0x10101d1

/**
 * @deprecated Removed.
 * Reference to an array resource that be used to announce the directions with targets around the circle.
 * {@deprecated Removed.}
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

@Deprecated public static final int directionDescriptions = 16843681; // 0x10103a1

/**
 * Priority of the rows and columns. When the priority is none,
 * both rows and columns have the same priority. When the priority is
 * column, the animations will be applied on the columns first. The same
 * goes for rows.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>column</td><td>1</td><td>Columns are animated first.</td></tr>
 * <tr><td>none</td><td>0</td><td>Rows and columns are animated at the same time.</td></tr>
 * <tr><td>row</td><td>2</td><td>Rows are animated first.</td></tr>
 * </table>
 */

public static final int directionPriority = 16843218; // 0x10101d2

/**
 * The state (true for on, or false for off) that causes dependents to be disabled. By default,
 * dependents will be disabled when this is unchecked, so the value of this preference is false.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int disableDependentsState = 16843249; // 0x10101f1

/**
 * Default disabled alpha for widgets that set enabled/disabled alpha programmatically.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 */

public static final int disabledAlpha = 16842803; // 0x1010033

/**
 * Options affecting how the action bar is displayed.
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>disableHome</td><td>20</td><td></td></tr>
 * <tr><td>homeAsUp</td><td>4</td><td></td></tr>
 * <tr><td>none</td><td>0</td><td></td></tr>
 * <tr><td>showCustom</td><td>10</td><td></td></tr>
 * <tr><td>showHome</td><td>2</td><td></td></tr>
 * <tr><td>showTitle</td><td>8</td><td></td></tr>
 * <tr><td>useLogo</td><td>1</td><td></td></tr>
 * </table>
 */

public static final int displayOptions = 16843472; // 0x10102d0

/**
 * Enables or disables dithering of the bitmap if the bitmap does not have the
 * same pixel configuration as the screen (for instance: a ARGB 8888 bitmap with
 * an RGB 565 screen).
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int dither = 16843036; // 0x101011c

/**
 * Drawable or color to draw between list items.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int divider = 16843049; // 0x1010129

/**
 * Height of the divider. Will use the intrinsic height of the divider if this
 * is not specified.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int dividerHeight = 16843050; // 0x101012a

/**
 * Drawable to use for generic horizontal dividers.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int dividerHorizontal = 16843564; // 0x101032c

/**
 * Size of padding on either end of a divider.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int dividerPadding = 16843562; // 0x101032a

/**
 * Drawable to use for generic vertical dividers.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int dividerVertical = 16843530; // 0x101030a

/**
 * This attribute specifies that an activity shall become the root activity of a
 * new task each time it is launched. Using this attribute permits the user to
 * have multiple documents from the same applications appear in the recent tasks list.
 * <p>Such a document is any kind of item for which an application may want to
 * maintain multiple simultaneous instances. Examples might be text files, web
 * pages, spreadsheets, or emails. Each such document will be in a separate
 * task in the recent taskss list.
 * <p>This attribute is equivalent to adding the flag {@link
 * android.content.Intent#FLAG_ACTIVITY_NEW_DOCUMENT} to every Intent used to launch
 * the activity.
 * <p>The documentLaunchMode attribute may be assigned one of four values, "none",
 * "intoExisting", "always" and "never", described in detail below. For values other than
 * <code>none</code> and <code>never</code> the activity must be defined with
 * {@link android.R.attr#launchMode} <code>standard</code>.
 * If this attribute is not specified, <code>none</code> will be used.
 * Note that <code>none</code> can be overridden at run time if the Intent used
 * to launch it contains the flag {@link android.content.Intent#FLAG_ACTIVITY_NEW_DOCUMENT
 * Intent.FLAG_ACTIVITY_NEW_DOCUMENT}.
 * Similarly <code>intoExisting</code> will be overridden by the flag
 * {@link android.content.Intent#FLAG_ACTIVITY_NEW_DOCUMENT
 * Intent.FLAG_ACTIVITY_NEW_DOCUMENT} combined with
 * {@link android.content.Intent#FLAG_ACTIVITY_MULTIPLE_TASK
 * Intent.FLAG_ACTIVITY_MULTIPLE_TASK}. If the value of
 * documentLaunchModes is <code>never</code> then any use of
 * {@link android.content.Intent#FLAG_ACTIVITY_NEW_DOCUMENT
 * Intent.FLAG_ACTIVITY_NEW_DOCUMENT} to launch this activity will be ignored.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>always</td><td>2</td><td>A new task rooted at this activity will be created. This will happen whether or
 * not there is an existing task whose ComponentName and data URI match
 * that of the launcing intent This is the equivalent of launching an activity
 * with {@link
 * android.content.Intent#FLAG_ACTIVITY_NEW_DOCUMENT Intent.FLAG_ACTIVITY_NEW_DOCUMENT}
 * and {@link android.content.Intent#FLAG_ACTIVITY_MULTIPLE_TASK
 * Intent.FLAG_ACTIVITY_MULTIPLE_TASK} both set.</td></tr>
 * <tr><td>intoExisting</td><td>1</td><td>All tasks will be searched for one whose base Intent's ComponentName and
 * data URI match those of the launching Intent. If such a task is found
 * that task will be cleared and restarted with the root activity receiving a call
 * to {@link android.app.Activity#onNewIntent Activity.onNewIntent}. If no
 * such task is found a new task will be created.
 * <p>This is the equivalent of launching an activity with {@link
 * android.content.Intent#FLAG_ACTIVITY_NEW_DOCUMENT Intent.FLAG_ACTIVITY_NEW_DOCUMENT}
 * set and without {@link android.content.Intent#FLAG_ACTIVITY_MULTIPLE_TASK
 * Intent.FLAG_ACTIVITY_MULTIPLE_TASK} set.</td></tr>
 * <tr><td>never</td><td>3</td><td>This activity will not be launched into a new document even if the Intent contains
 * {@link android.content.Intent#FLAG_ACTIVITY_NEW_DOCUMENT
 * Intent.FLAG_ACTIVITY_NEW_DOCUMENT}. This gives the activity writer ultimate
 * control over how their activity is used. Note that applications prior to api
 * 21 will default to documentLaunchMode="none" so only activities that explicitly
 * opt out with <code>"never"</code> may do so.</td></tr>
 * <tr><td>none</td><td>0</td><td>The default mode, which will create a new task only when
 * {@link android.content.Intent#FLAG_ACTIVITY_NEW_TASK
 * Intent.FLAG_ACTIVITY_NEW_TASK} is set.</td></tr>
 * </table>
 */

public static final int documentLaunchMode = 16843845; // 0x1010445

/**
 * When set to true, the selector will be drawn over the selected item.
 * Otherwise the selector is drawn behind the selected item. The default
 * value is false.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int drawSelectorOnTop = 16843004; // 0x10100fc

/**
 * Reference to a drawable resource to use for the frame.  If not
 * given, the drawable must be defined by the first child tag.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int drawable = 16843161; // 0x1010199

/**
 * The drawable to be drawn below the text.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int drawableBottom = 16843118; // 0x101016e

/**
 * The drawable to be drawn to the end of the text.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int drawableEnd = 16843667; // 0x1010393

/**
 * The drawable to be drawn to the left of the text.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int drawableLeft = 16843119; // 0x101016f

/**
 * The padding between the drawables and the text.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int drawablePadding = 16843121; // 0x1010171

/**
 * The drawable to be drawn to the right of the text.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int drawableRight = 16843120; // 0x1010170

/**
 * The drawable to be drawn to the start of the text.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int drawableStart = 16843666; // 0x1010392

/**
 * Tint to apply to the compound (left, top, etc.) drawables.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int drawableTint = 16843990; // 0x10104d6

/**
 * Blending mode used to apply the compound (left, top, etc.) drawables tint.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
 * result to valid color values. Saturate(S + D)</td></tr>
 * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
 * the tint. [Sa * Da, Sc * Dc]</td></tr>
 * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
 * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
 * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
 * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
 * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
 * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
 * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
 * </table>
 */

public static final int drawableTintMode = 16843991; // 0x10104d7

/**
 * The drawable to be drawn above the text.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int drawableTop = 16843117; // 0x101016d

/**
 * Defines the quality of translucent drawing caches. This property is used
 * only when the drawing cache is enabled and translucent. The default value is auto.
 * Deprecated: The view drawing cache was largely made obsolete with the introduction of
 * hardware-accelerated rendering in API 11.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>auto</td><td>0</td><td>Lets the framework decide what quality level should be used
 * for the drawing cache.
 * Deprecated: The view drawing cache was largely made obsolete with the introduction
 * of hardware-accelerated rendering in API 11.</td></tr>
 * <tr><td>high</td><td>2</td><td>High quality. When set to high quality, the drawing cache uses a higher
 * color depth but uses more memory.
 * Deprecated: The view drawing cache was largely made obsolete with the introduction
 * of hardware-accelerated rendering in API 11.</td></tr>
 * <tr><td>low</td><td>1</td><td>Low quality. When set to low quality, the drawing cache uses a lower color
 * depth, thus losing precision in rendering gradients, but uses less memory.
 * Deprecated: The view drawing cache was largely made obsolete with the introduction
 * of hardware-accelerated rendering in API 11.</td></tr>
 * </table>
 */

public static final int drawingCacheQuality = 16842984; // 0x10100e8

/**
 * View to anchor the auto-complete dropdown to. If not specified, the text view itself
 * is used.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int dropDownAnchor = 16843363; // 0x1010263

/**
 * Specifies the basic height of the dropdown. Its value may
 * be a dimension (such as "12dip") for a constant height,
 * fill_parent or match_parent to fill the height of the
 * screen, or wrap_content to match the height of
 * the content of the drop down.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>fill_parent</td><td>ffffffff</td><td>The dropdown should fit the height of the screen.
 * This constant is deprecated starting from API Level 8 and
 * is replaced by {@code match_parent}.</td></tr>
 * <tr><td>match_parent</td><td>ffffffff</td><td>The dropdown should fit the height of the screen.
 * Introduced in API Level 8.</td></tr>
 * <tr><td>wrap_content</td><td>fffffffe</td><td>The dropdown should fit the height of the content.</td></tr>
 * </table>
 */

public static final int dropDownHeight = 16843395; // 0x1010283

/**
 * Default style for drop down hints.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int dropDownHintAppearance = 16842888; // 0x1010088

/**
 * Amount of pixels by which the drop down should be offset horizontally.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int dropDownHorizontalOffset = 16843436; // 0x10102ac

/**
 * Default style for drop down items.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int dropDownItemStyle = 16842886; // 0x1010086

/**
 * Default ListView style for drop downs.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int dropDownListViewStyle = 16842861; // 0x101006d

/**
 * Selector in a drop down list.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int dropDownSelector = 16843125; // 0x1010175

/**
 * Default dropdown Spinner style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int dropDownSpinnerStyle = 16843478; // 0x10102d6

/**
 * Amount of pixels by which the drop down should be offset vertically.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int dropDownVerticalOffset = 16843437; // 0x10102ad

/**
 * Specifies the basic width of the dropdown. Its value may
 * be a dimension (such as "12dip") for a constant width,
 * fill_parent or match_parent to match the width of the
 * screen, or wrap_content to match the width of
 * the anchored view.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>fill_parent</td><td>ffffffff</td><td>The dropdown should fill the width of the screen.
 * This constant is deprecated starting from API Level 8 and
 * is replaced by {@code match_parent}.</td></tr>
 * <tr><td>match_parent</td><td>ffffffff</td><td>The dropdown should fit the width of the screen.
 * Introduced in API Level 8.</td></tr>
 * <tr><td>wrap_content</td><td>fffffffe</td><td>The dropdown should fit the width of its anchor.</td></tr>
 * </table>
 */

public static final int dropDownWidth = 16843362; // 0x1010262

/**
 * When this attribute is set to true, the view gets its drawable state
 * (focused, pressed, etc.) from its direct parent rather than from itself.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int duplicateParentState = 16842985; // 0x10100e9

/**
 * Amount of time (in milliseconds) to display this frame.
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int duration = 16843160; // 0x1010198

/**
 * EditText background drawable.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int editTextBackground = 16843602; // 0x1010352

/**
 * EditText text foreground color.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int editTextColor = 16843601; // 0x1010351

/**
 * Default style for EditTextPreference.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int editTextPreferenceStyle = 16842898; // 0x1010092

/**
 * Default EditText style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int editTextStyle = 16842862; // 0x101006e

/**
 * If set, specifies that this TextView has an input method.
 * It will be a textual one unless it has otherwise been specified.
 * For TextView, this is false by default.  For EditText, it is
 * true by default.
 * {@deprecated Use inputType instead.}
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

@Deprecated public static final int editable = 16843115; // 0x101016b

/**
 * Reference to an
 * {@link android.R.styleable#InputExtras &lt;input-extras&gt;}
 * XML resource containing additional data to
 * supply to an input method, which is private to the implementation
 * of the input method.  This simply fills in
 * the {@link android.view.inputmethod.EditorInfo#extras
 * EditorInfo.extras} field when the input
 * method is connected.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int editorExtras = 16843300; // 0x1010224

/**
 * Elegant text height, especially for less compacted complex script text.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int elegantTextHeight = 16843869; // 0x101045d

/**
 * base z depth of the view.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int elevation = 16843840; // 0x1010440

/**
 * Where to ellipsize text.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>end</td><td>3</td><td></td></tr>
 * <tr><td>marquee</td><td>4</td><td></td></tr>
 * <tr><td>middle</td><td>2</td><td></td></tr>
 * <tr><td>none</td><td>0</td><td></td></tr>
 * <tr><td>start</td><td>1</td><td></td></tr>
 * </table>
 */

public static final int ellipsize = 16842923; // 0x10100ab

/**
 * Makes the TextView be exactly this many ems wide.
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int ems = 16843096; // 0x1010158

/**
 * Flag declaring that this activity will be run in VR mode, and specifying
 * the component of the {@link android.service.vr.VrListenerService} that should be
 * bound while this Activity is visible if it is installed and enabled on this device.
 * This is equivalent to calling {@link android.app.Activity#setVrModeEnabled} with the
 * the given component name within the Activity that this attribute is set for.
 * Declaring this will prevent the system from leaving VR mode during an Activity
 * transtion from one VR activity to another.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int enableVrMode = 16844069; // 0x1010525

/**
 * Specifies whether the widget is enabled. The interpretation of the enabled state varies by subclass.
 * For example, a non-enabled EditText prevents the user from editing the contained text, and
 * a non-enabled Button prevents the user from tapping the button.
 * The appearance of enabled and non-enabled widgets may differ, if the drawables referenced
 * from evaluating state_enabled differ.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int enabled = 16842766; // 0x101000e

/**
 * End inset to apply to the layer. Overrides {@code left} or
 * {@code right} depending on layout direction.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int end = 16843996; // 0x10104dc

/**
 * End color of the gradient.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int endColor = 16843166; // 0x101019e

/**
 * X coordinate of the end point origin of the gradient.
 * Defined in same coordinates as the path itself
 * <p>May be a floating point value, such as "<code>1.2</code>".
 */

public static final int endX = 16844050; // 0x1010512

/**
 * Y coordinate of the end point of the gradient within the shape.
 * Defined in same coordinates as the path itself
 * <p>May be a floating point value, such as "<code>1.2</code>".
 */

public static final int endY = 16844051; // 0x1010513

/**
 * {@deprecated Use maxDate instead.}
 * The last year (inclusive), for example "2010".
 * {@deprecated Use maxDate instead.}
 * <p>May be an integer value, such as "<code>100</code>".
 */

@Deprecated public static final int endYear = 16843133; // 0x101017d

/**
 * Amount of time (in milliseconds) to fade in a new state drawable.
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int enterFadeDuration = 16843532; // 0x101030c

/**
 * Reference to an array resource that will populate a list/adapter.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int entries = 16842930; // 0x10100b2

/**
 * The array to find the value to save for a preference when an entry from
 * entries is selected. If a user clicks on the second item in entries, the
 * second item in this array will be saved to the preference.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int entryValues = 16843256; // 0x10101f8

/**
 * Defines whether the overlay should intercept the motion events when a gesture
 * is recognized.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int eventsInterceptionEnabled = 16843389; // 0x101027d

/**
 * The fully-qualified name of the Class to exclude from this transition.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int excludeClass = 16843842; // 0x1010442

/**
 * Indicates that an Activity should be excluded from the list of
 * recently launched activities.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int excludeFromRecents = 16842775; // 0x1010017

/**
 * The id of a target to exclude from this transition.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int excludeId = 16843841; // 0x1010441

/**
 * The transitionName of the target to exclude from this transition.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int excludeName = 16843854; // 0x101044e

/**
 * Amount of time (in milliseconds) to fade out an old state drawable.
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int exitFadeDuration = 16843533; // 0x101030d

/**
 * The preferred left bound for an expandable list child's indicator.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int expandableListPreferredChildIndicatorLeft = 16842834; // 0x1010052

/**
 * The preferred right bound for an expandable list child's indicator.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int expandableListPreferredChildIndicatorRight = 16842835; // 0x1010053

/**
 * The preferred left padding for an expandable list item that is a child.
 * If this is not provided, it defaults to the expandableListPreferredItemPaddingLeft.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int expandableListPreferredChildPaddingLeft = 16842831; // 0x101004f

/**
 * The preferred left bound for an expandable list item's indicator. For a child-specific
 * indicator, use expandableListPreferredChildIndicatorLeft.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int expandableListPreferredItemIndicatorLeft = 16842832; // 0x1010050

/**
 * The preferred right bound for an expandable list item's indicator. For a child-specific
 * indicator, use expandableListPreferredChildIndicatorRight.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int expandableListPreferredItemIndicatorRight = 16842833; // 0x1010051

/**
 * The preferred left padding for an expandable list item (for child-specific layouts,
 * use expandableListPreferredChildPaddingLeft). This takes into account
 * the indicator that will be shown to next to the item.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int expandableListPreferredItemPaddingLeft = 16842830; // 0x101004e

/**
 * Default ExpandableListView style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int expandableListViewStyle = 16842863; // 0x101006f

/**
 * ExpandableListView with white background.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int expandableListViewWhiteStyle = 16843446; // 0x10102b6

/**
 * Flag indicating whether the given application component is available
 * to other applications.  If false, it can only be accessed by
 * applications with its same user id (which usually means only by
 * code in its own package).  If true, it can be invoked by external
 * entities, though which ones can do so may be controlled through
 * permissions.  The default value is false for activity, receiver,
 * and service components that do not specify any intent filters; it
 * is true for activity, receiver, and service components that do
 * have intent filters (implying they expect to be invoked by others
 * who do not know their particular component name) and for all
 * content providers.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int exported = 16842768; // 0x1010010

/**
 * If the service is an {@link android.R.attr#isolatedProcess} service, this permits a
 * client to bind to the service as if it were running it its own package.  The service
 * must also be {@link android.R.attr#exported} if this flag is set.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int externalService = 16844046; // 0x101050e

/**
 * This is the amount by which to multiply the tension.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 */

public static final int extraTension = 16843371; // 0x101026b

/**
 * When set installer will extract native libraries. If set to false
 * libraries in the apk must be stored and page-aligned.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int extractNativeLibs = 16844010; // 0x10104ea

/**
 * This is the amount of deceleration to add when easing in.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 */

public static final int factor = 16843219; // 0x10101d3

/**
 * Duration, in milliseconds, of the fade out effect after the user is done
 * drawing a gesture.
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int fadeDuration = 16843384; // 0x1010278

/**
 * Defines whether the gesture will automatically fade out after being recognized.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int fadeEnabled = 16843390; // 0x101027e

/**
 * Time, in milliseconds, to wait before the gesture fades out after the user
 * is done drawing it.
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int fadeOffset = 16843383; // 0x1010277

/**
 * Defines whether to fade out scrollbars when they are not in use.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int fadeScrollbars = 16843434; // 0x10102aa

/**
 * This attribute is ignored in API level 14
 * ({@link android.os.Build.VERSION_CODES#ICE_CREAM_SANDWICH}) and higher.
 * Using fading edges may introduce noticeable performance
 * degradations and should be used only when required by the application's
 * visual design. To request fading edges with API level 14 and above,
 * use the <code>android:requiresFadingEdge</code> attribute instead.
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>horizontal</td><td>1000</td><td>Fades horizontal edges only.</td></tr>
 * <tr><td>none</td><td>0</td><td>No edge is faded.</td></tr>
 * <tr><td>vertical</td><td>2000</td><td>Fades vertical edges only.</td></tr>
 * </table>
 */

public static final int fadingEdge = 16842975; // 0x10100df

/**
 * Defines the length of the fading edges.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int fadingEdgeLength = 16842976; // 0x10100e0

/**
 * Equivalent to <code>transitionVisibilityMode</code>, fadingMode works only
 * with the Fade transition.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>fade_in</td><td>1</td><td>Fade will only fade appearing items in.</td></tr>
 * <tr><td>fade_in_out</td><td>3</td><td>Fade will fade appearing items in and disappearing items out.</td></tr>
 * <tr><td>fade_out</td><td>2</td><td>Fade will only fade disappearing items out.</td></tr>
 * </table>
 */

public static final int fadingMode = 16843745; // 0x10103e1

/**
 * Whether to respect the ascent and descent of the fallback fonts that are used in
 * displaying the text. When true, fallback fonts that end up getting used can increase
 * the ascent and descent of the lines that they are used on.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int fallbackLineSpacing = 16844155; // 0x101057b

/**
 * When set to true, the list will always show the fast scroll interface.
 * This setting implies fastScrollEnabled.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int fastScrollAlwaysVisible = 16843573; // 0x1010335

/**
 * Enables the fast scroll thumb that can be dragged to quickly scroll through
 * the list.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int fastScrollEnabled = 16843302; // 0x1010226

/**
 * Position of the fast scroll index overlay window.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>aboveThumb</td><td>2</td><td></td></tr>
 * <tr><td>atThumb</td><td>1</td><td></td></tr>
 * <tr><td>floating</td><td>0</td><td></td></tr>
 * </table>
 */

public static final int fastScrollOverlayPosition = 16843578; // 0x101033a

/**
 * Drawable to use as the fast scroll index preview window background
 * when shown on the left.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int fastScrollPreviewBackgroundLeft = 16843575; // 0x1010337

/**
 * Drawable to use as the fast scroll index preview window background
 * when shown on the right.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int fastScrollPreviewBackgroundRight = 16843576; // 0x1010338

/**
 * Specifies the style of the fast scroll decorations.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int fastScrollStyle = 16843767; // 0x10103f7

/**
 * Text color for the fast scroll index overlay. Make sure it
 * plays nicely with fastScrollPreviewBackground[Left|Right].
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int fastScrollTextColor = 16843609; // 0x1010359

/**
 * Drawable to use as the fast scroll thumb.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int fastScrollThumbDrawable = 16843574; // 0x1010336

/**
 * Drawable to use as the track for the fast scroll thumb.
 * This may be null.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int fastScrollTrackDrawable = 16843577; // 0x1010339

/**
 * When set to true, the animation transformation is applied after the animation is
 * over. The default value is false. If fillEnabled is not set to true and the
 * animation is not set on a View, fillAfter is assumed to be true.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int fillAfter = 16843197; // 0x10101bd

/**
 * The alpha of the path fill, as a value between 0 (completely transparent)
 * and 1 (completely opaque).
 * <p>May be a floating point value, such as "<code>1.2</code>".
 */

public static final int fillAlpha = 16843980; // 0x10104cc

/**
 * When set to true or when fillEnabled is not set to true, the animation transformation
 * is applied before the animation has started. The default value is true.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int fillBefore = 16843196; // 0x10101bc

/**
 * The color to fill the path if not defined implies no fill.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int fillColor = 16843780; // 0x1010404

/**
 * When set to true, the value of fillBefore is taken into account.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int fillEnabled = 16843343; // 0x101024f

/**
 * sets the fillType for a path. It is the same as SVG's "fill-rule" properties.
 * For more details, see https://www.w3.org/TR/SVG/painting.html#FillRuleProperty.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>evenOdd</td><td>1</td><td></td></tr>
 * <tr><td>nonZero</td><td>0</td><td></td></tr>
 * </table>
 */

public static final int fillType = 16844062; // 0x101051e

/**
 * Defines whether the scrollview should stretch its content to fill the viewport.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int fillViewport = 16843130; // 0x101017a

/**
 * Enables or disables bitmap filtering. Filtering is used when the bitmap is
 * shrunk or stretched to smooth its apperance. Default value is true.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int filter = 16843035; // 0x101011b

/**
 * Specifies whether to filter touches when the view's window is obscured by
 * another visible window.  When set to true, the view will not receive touches
 * whenever a toast, dialog or other window appears above the view's window.
 * Refer to the {@link android.view.View} security documentation for more details.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int filterTouchesWhenObscured = 16843460; // 0x10102c4

/**
 * Icon that should be used to indicate that an app is waiting for a fingerprint scan.
 * This should be used whenever an app is requesting the user to place a finger on the
 * fingerprint sensor. It can be combined with other drawables such as colored circles, so
 * the appearance matches the branding of the app requesting the fingerprint scan.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int fingerprintAuthDrawable = 16844008; // 0x10104e8

/**
 * Specify whether an activity should be finished when a "close system
 * windows" request has been made.  This happens, for example, when
 * the home key is pressed, when the device is locked, when a system
 * dialog showing recent applications is displayed, etc.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int finishOnCloseSystemDialogs = 16843431; // 0x10102a7

/**
 * Specify whether an activity should be finished when its task is
 * brought to the foreground by relaunching from the home screen.
 * <p>If both this option and {@link android.R.attr#allowTaskReparenting} are
 * specified, the finish trumps the affinity: the affinity will be
 * ignored and the activity simply finished.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int finishOnTaskLaunch = 16842772; // 0x1010014

/**
 * Distance from the top of the TextView to the first text baseline. If set, this
 * overrides the value set for paddingTop.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int firstBaselineToTopHeight = 16844157; // 0x101057d

/**
 * The first day of week according to {@link java.util.Calendar}.
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int firstDayOfWeek = 16843581; // 0x101033d

/**
 * Boolean internal attribute to adjust view layout based on
 * system windows such as the status bar.
 * If true, adjusts the padding of this view to leave space for the system windows.
 * Will only take effect if this view is in a non-embedded activity.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int fitsSystemWindows = 16842973; // 0x10100dd

/**
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int flipInterval = 16843129; // 0x1010179

/**
 * Controls whether a view can take focus.  By default, this is "auto" which lets the
 * framework determine whether a user can move focus to a view.  By setting this attribute
 * to true the view is allowed to take focus. By setting it to "false" the view will not
 * take focus. This value does not impact the behavior of
 * directly calling {@link android.view.View#requestFocus}, which will
 * always request focus regardless of this view.  It only impacts where
 * focus navigation will try to move focus.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>auto</td><td>10</td><td></td></tr>
 * </table>
 */

public static final int focusable = 16842970; // 0x10100da

/**
 * Boolean that controls whether a view can take focus while in touch mode.
 * If this is true for a view, that view can gain focus when clicked on, and can keep
 * focus if another view is clicked on that doesn't have this attribute set to true.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int focusableInTouchMode = 16842971; // 0x10100db

/**
 * Whether this view is a default-focus view.
 * Only one view per keyboard navigation cluster can have this attribute set to true.
 * See {@link android.view.View#setFocusedByDefault(boolean)}.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int focusedByDefault = 16844100; // 0x1010544

/**
 * @deprecated The color for the dates of the focused month.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

@Deprecated public static final int focusedMonthDateColor = 16843587; // 0x1010343

/**
 * The reference to the font file to be used. This should be a file in the res/font folder
 * and should therefore have an R reference value. E.g. @font/myfont
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int font = 16844082; // 0x1010532

/**
 * Default font family.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int fontFamily = 16843692; // 0x10103ac

/**
 * Font feature settings.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int fontFeatureSettings = 16843959; // 0x10104b7

/**
 * The authority of the Font Provider to be used for the request.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int fontProviderAuthority = 16844112; // 0x1010550

/**
 * The sets of hashes for the certificates the provider should be signed with. This is
 * used to verify the identity of the provider, and is only required if the provider is not
 * part of the system image. This value may point to one list or a list of lists, where each
 * individual list represents one collection of signature hashes. Refer to your font provider's
 * documentation for these values.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int fontProviderCerts = 16844125; // 0x101055d

/**
 * The package for the Font Provider to be used for the request. This is used to verify
 * the identity of the provider.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int fontProviderPackage = 16844119; // 0x1010557

/**
 * The query to be sent over to the provider. Refer to your font provider's documentation
 * on the format of this string.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int fontProviderQuery = 16844113; // 0x1010551

/**
 * The style of the given font file. This will be used when the font is being loaded into
 * the font stack and will override any style information in the font's header tables. If
 * unspecified, the value in the font's header tables will be used.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>italic</td><td>1</td><td></td></tr>
 * <tr><td>normal</td><td>0</td><td></td></tr>
 * </table>
 */

public static final int fontStyle = 16844095; // 0x101053f

/**
 * The variation settings to be applied to the font. The string should be in the following
 * format: "'tag1' value1, 'tag2' value2, ...". If the default variation settings should be
 * used, or the font used does not support variation settings, this attribute needs not be
 * specified.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int fontVariationSettings = 16844144; // 0x1010570

/**
 * The weight of the given font file. This will be used when the font is being loaded into
 * the font stack and will override any weight information in the font's header tables. Must
 * be a positive number, a multiple of 100, and between 100 and 900, inclusive. The most
 * common values are 400 for regular weight and 700 for bold weight. If unspecified, the value
 * in the font's header tables will be used.
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int fontWeight = 16844083; // 0x1010533

/**
 * When set to false, the ListView will not draw the divider before each footer view.
 * The default value is true.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int footerDividersEnabled = 16843311; // 0x101022f

/**
 * Whether this view has elements that may overlap when drawn. See
 * {@link android.view.View#forceHasOverlappingRendering(boolean)}.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int forceHasOverlappingRendering = 16844065; // 0x1010521

/**
 * Defines the drawable to draw over the content. This can be used as an overlay.
 * The foreground drawable participates in the padding of the content if the gravity
 * is set to fill.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int foreground = 16843017; // 0x1010109

/**
 * Defines the gravity to apply to the foreground drawable. The gravity defaults
 * to fill.
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
 * <tr><td>center</td><td>11</td><td>Place the object in the center of its container in both the vertical and horizontal axis, not changing its size.</td></tr>
 * <tr><td>center_horizontal</td><td>1</td><td>Place object in the horizontal center of its container, not changing its size.</td></tr>
 * <tr><td>center_vertical</td><td>10</td><td>Place object in the vertical center of its container, not changing its size.</td></tr>
 * <tr><td>clip_horizontal</td><td>8</td><td>Additional option that can be set to have the left and/or right edges of
 * the child clipped to its container's bounds.
 * The clip will be based on the horizontal gravity: a left gravity will clip the right
 * edge, a right gravity will clip the left edge, and neither will clip both edges.</td></tr>
 * <tr><td>clip_vertical</td><td>80</td><td>Additional option that can be set to have the top and/or bottom edges of
 * the child clipped to its container's bounds.
 * The clip will be based on the vertical gravity: a top gravity will clip the bottom
 * edge, a bottom gravity will clip the top edge, and neither will clip both edges.</td></tr>
 * <tr><td>fill</td><td>77</td><td>Grow the horizontal and vertical size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>fill_horizontal</td><td>7</td><td>Grow the horizontal size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>fill_vertical</td><td>70</td><td>Grow the vertical size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>left</td><td>3</td><td>Push object to the left of its container, not changing its size.</td></tr>
 * <tr><td>right</td><td>5</td><td>Push object to the right of its container, not changing its size.</td></tr>
 * <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
 * </table>
 */

public static final int foregroundGravity = 16843264; // 0x1010200

/**
 * Tint to apply to the foreground.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int foregroundTint = 16843885; // 0x101046d

/**
 * Blending mode used to apply the foreground tint.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
 * result to valid color values. Saturate(S + D)</td></tr>
 * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
 * the tint. [Sa * Da, Sc * Dc]</td></tr>
 * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
 * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
 * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
 * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
 * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
 * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
 * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
 * </table>
 */

public static final int foregroundTintMode = 16843886; // 0x101046e

/**
 * Format string: if specified, the Chronometer will display this
 * string, with the first "%s" replaced by the current timer value
 * in "MM:SS" or "H:MM:SS" form.
 * If no format string is specified, the Chronometer will simply display
 * "MM:SS" or "H:MM:SS".
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int format = 16843013; // 0x1010105

/**
 * Specifies the formatting pattern used to show the time and/or date
 * in 12-hour mode. Please refer to {@link android.text.format.DateFormat}
 * for a complete description of accepted formatting patterns.
 * The default pattern is a locale-appropriate equivalent of "h:mm a".
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int format12Hour = 16843722; // 0x10103ca

/**
 * Specifies the formatting pattern used to show the time and/or date
 * in 24-hour mode. Please refer to {@link android.text.format.DateFormat}
 * for a complete description of accepted formatting patterns.
 * The default pattern is a locale-appropriate equivalent of "H:mm".
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int format24Hour = 16843723; // 0x10103cb

/**
 * <p>May be a floating point value, such as "<code>1.2</code>".
 */

public static final int fraction = 16843992; // 0x10104d8

/**
 * The fragment that is displayed when the user selects this item.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int fragment = 16843491; // 0x10102e3

/**
 * Sets whether the enter and exit transitions should overlap when transitioning
 * forward.
 * Corresponds to {@link android.app.Fragment#setAllowEnterTransitionOverlap(
 * boolean)}
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int fragmentAllowEnterTransitionOverlap = 16843976; // 0x10104c8

/**
 * Sets whether the enter and exit transitions should overlap when transitioning
 * because of popping the back stack.
 * Corresponds to {@link android.app.Fragment#setAllowReturnTransitionOverlap(
 * boolean)}
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int fragmentAllowReturnTransitionOverlap = 16843977; // 0x10104c9

/**
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int fragmentCloseEnterAnimation = 16843495; // 0x10102e7

/**
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int fragmentCloseExitAnimation = 16843496; // 0x10102e8

/**
 * The Transition that will be used to move Views into the initial scene.
 * Corresponds to {@link android.app.Fragment#setEnterTransition(
 * android.transition.Transition)}
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int fragmentEnterTransition = 16843971; // 0x10104c3

/**
 * The Transition that will be used to move Views out of the scene when the
 * fragment is removed, hidden, or detached when not popping the back stack.
 * Corresponds to {@link android.app.Fragment#setExitTransition(
 * android.transition.Transition)}
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int fragmentExitTransition = 16843970; // 0x10104c2

/**
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int fragmentFadeEnterAnimation = 16843497; // 0x10102e9

/**
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int fragmentFadeExitAnimation = 16843498; // 0x10102ea

/**
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int fragmentOpenEnterAnimation = 16843493; // 0x10102e5

/**
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int fragmentOpenExitAnimation = 16843494; // 0x10102e6

/**
 * The Transition that will be used to move Views in to the scene when returning due
 * to popping a back stack.
 * Corresponds to {@link android.app.Fragment#setReenterTransition(
 * android.transition.Transition)}
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int fragmentReenterTransition = 16843975; // 0x10104c7

/**
 * The Transition that will be used to move Views out of the scene when the Fragment is
 * preparing to be removed, hidden, or detached because of popping the back stack.
 * Corresponds to {@link android.app.Fragment#setReturnTransition(
 * android.transition.Transition)}
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int fragmentReturnTransition = 16843973; // 0x10104c5

/**
 * The Transition that will be used for shared elements transferred into the content
 * Scene.
 * Corresponds to {@link android.app.Fragment#setSharedElementEnterTransition(
 * android.transition.Transition)}
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int fragmentSharedElementEnterTransition = 16843972; // 0x10104c4

/**
 * The Transition that will be used for shared elements transferred back during a
 * pop of the back stack. This Transition acts in the leaving Fragment.
 * Corresponds to {@link android.app.Fragment#setSharedElementReturnTransition(
 * android.transition.Transition)}
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int fragmentSharedElementReturnTransition = 16843974; // 0x10104c6

/**
 * If set, the text view will include its current complete text
 * inside of its frozen icicle in addition to meta-data such as
 * the current cursor position.  By default this is disabled;
 * it can be useful when the contents of a text view is not stored
 * in a persistent place such as a content provider. For
 * {@link android.widget.EditText} it is always enabled, regardless
 * of the value of the attribute.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int freezesText = 16843116; // 0x101016c

/**
 * <p>May be a floating point value, such as "<code>1.2</code>".
 */

public static final int fromAlpha = 16843210; // 0x10101ca

/**
 * <p>May be a floating point value, such as "<code>1.2</code>".
 */

public static final int fromDegrees = 16843187; // 0x10101b3

/**
 * Keyframe identifier for the starting state.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int fromId = 16843850; // 0x101044a

/**
 * The originating scene in this scene change.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int fromScene = 16843741; // 0x10103dd

/**
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 */

public static final int fromXDelta = 16843206; // 0x10101c6

/**
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 */

public static final int fromXScale = 16843202; // 0x10101c2

/**
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 */

public static final int fromYDelta = 16843208; // 0x10101c8

/**
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 */

public static final int fromYScale = 16843204; // 0x10101c4

/**
 * Applications will set this in their manifest to opt-in to or out of full app data back-up
 * and restore. Alternatively they can set it to an xml resource within their app that will
 * be parsed by the BackupAgent to selectively backup files indicated within that xml.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int fullBackupContent = 16844011; // 0x10104eb

/**
 * Indicates that even though the application provides a <code>BackupAgent</code>,
 * only full-data streaming backup operations are to be performed to save the app's
 * data.  This lets the app rely on full-data backups while still participating in
 * the backup and restore process via the BackupAgent's full-data backup APIs.
 * When this attribute is <code>true</code> the app's BackupAgent overrides of
 * the onBackup() and onRestore() callbacks can be empty stubs.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int fullBackupOnly = 16843891; // 0x1010473

/**
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int fullBright = 16842954; // 0x10100ca

/**
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int fullDark = 16842950; // 0x10100c6

/**
 * Flag indicating that an Instrumentation class should be run as a
 * functional test.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int functionalTest = 16842787; // 0x1010023

/**
 * The preferred background for gallery items. This should be set
 * as the background of any Views you provide from the Adapter.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int galleryItemBackground = 16842828; // 0x101004c

/**
 * Default Gallery style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int galleryStyle = 16842864; // 0x1010070

/**
 * Color used to draw a gesture.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int gestureColor = 16843381; // 0x1010275

/**
 * Minimum curve angle a stroke must contain before it is recognized as a gesture.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 */

public static final int gestureStrokeAngleThreshold = 16843388; // 0x101027c

/**
 * Minimum length of a stroke before it is recognized as a gesture.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 */

public static final int gestureStrokeLengthThreshold = 16843386; // 0x101027a

/**
 * Squareness threshold of a stroke before it is recognized as a gesture.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 */

public static final int gestureStrokeSquarenessThreshold = 16843387; // 0x101027b

/**
 * Defines the type of strokes that define a gesture.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>multiple</td><td>1</td><td>A gesture is made of multiple strokes.</td></tr>
 * <tr><td>single</td><td>0</td><td>A gesture is made of only one stroke.</td></tr>
 * </table>
 */

public static final int gestureStrokeType = 16843385; // 0x1010279

/**
 * Width of the stroke used to draw the gesture.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 */

public static final int gestureStrokeWidth = 16843380; // 0x1010274

/**
 * The GLES driver version number needed by an application.
 * The higher 16 bits represent the major number and the lower 16 bits
 * represent the minor number. For example for GL 1.2 referring to
 * 0x00000102, the actual value should be set as 0x00010002.
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int glEsVersion = 16843393; // 0x1010281

/**
 * Go button icon.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int goIcon = 16843906; // 0x1010482

/**
 * Radius of the gradient, used only with radial gradient. May be an explicit dimension
 * or a fractional value relative to the shape's minimum dimension.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 */

public static final int gradientRadius = 16843172; // 0x10101a4

/**
 * If true, the {@link android.content.Context#grantUriPermission
 * Context.grantUriPermission} or corresponding Intent flags can
 * be used to allow others to access specific URIs in the content
 * provider, even if they do not have an explicit read or write
 * permission.  If you are supporting this feature, you must be
 * sure to call {@link android.content.Context#revokeUriPermission
 * Context.revokeUriPermission} when URIs are deleted from your
 * provider.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int grantUriPermissions = 16842779; // 0x101001b

/**
 * Specifies how an object should position its content, on both the X and Y axes,
 * within its own bounds.
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
 * <tr><td>center</td><td>11</td><td>Place the object in the center of its container in both the vertical and horizontal axis, not changing its size.</td></tr>
 * <tr><td>center_horizontal</td><td>1</td><td>Place object in the horizontal center of its container, not changing its size.</td></tr>
 * <tr><td>center_vertical</td><td>10</td><td>Place object in the vertical center of its container, not changing its size.</td></tr>
 * <tr><td>clip_horizontal</td><td>8</td><td>Additional option that can be set to have the left and/or right edges of
 * the child clipped to its container's bounds.
 * The clip will be based on the horizontal gravity: a left gravity will clip the right
 * edge, a right gravity will clip the left edge, and neither will clip both edges.</td></tr>
 * <tr><td>clip_vertical</td><td>80</td><td>Additional option that can be set to have the top and/or bottom edges of
 * the child clipped to its container's bounds.
 * The clip will be based on the vertical gravity: a top gravity will clip the bottom
 * edge, a bottom gravity will clip the top edge, and neither will clip both edges.</td></tr>
 * <tr><td>end</td><td>800005</td><td>Push object to the end of its container, not changing its size.</td></tr>
 * <tr><td>fill</td><td>77</td><td>Grow the horizontal and vertical size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>fill_horizontal</td><td>7</td><td>Grow the horizontal size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>fill_vertical</td><td>70</td><td>Grow the vertical size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>left</td><td>3</td><td>Push object to the left of its container, not changing its size.</td></tr>
 * <tr><td>right</td><td>5</td><td>Push object to the right of its container, not changing its size.</td></tr>
 * <tr><td>start</td><td>800003</td><td>Push object to the beginning of its container, not changing its size.</td></tr>
 * <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
 * </table>
 */

public static final int gravity = 16842927; // 0x10100af

/**
 * Default GridView style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int gridViewStyle = 16842865; // 0x1010071

/**
 * Indicator shown beside the group View. This can be a stateful Drawable.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int groupIndicator = 16843019; // 0x101010b

/**
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int hand_hour = 16843011; // 0x1010103

/**
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int hand_minute = 16843012; // 0x1010104

/**
 * Identifier for the child that represents the drawer's handle.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int handle = 16843354; // 0x101025a

/**
 * Flag indicating that an Instrumentation class wants to take care
 * of starting/stopping profiling itself, rather than relying on
 * the default behavior of profiling the complete time it is running.
 * This allows it to target profiling data at a specific set of
 * operations.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int handleProfiling = 16842786; // 0x1010022

/**
 * Boolean that controls whether a view should have haptic feedback
 * enabled for events such as long presses.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int hapticFeedbackEnabled = 16843358; // 0x101025e

/**
 * <p>Flag indicating whether the application's rendering should be hardware
 * accelerated if possible. This flag is turned on by default for applications
 * that are targeting {@link android.os.Build.VERSION_CODES#ICE_CREAM_SANDWICH}
 * or later.</p>
 * <p>This flag can be set on the application and any activity declared
 * in the manifest. When enabled for the application, each activity is
 * automatically assumed to be hardware accelerated. This flag can be
 * overridden in the activity tags, either turning it off (if on for the
 * application) or on (if off for the application.)</p>
 * <p>When this flag is turned on for an activity (either directly or via
 * the application tag), every window created from the activity, including
 * the activity's own window, will be hardware accelerated, if possible.</p>
 * <p>Please refer to the documentation of
 * {@link android.view.WindowManager.LayoutParams#FLAG_HARDWARE_ACCELERATED}
 * for more information on how to control this flag programmatically.</p>
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int hardwareAccelerated = 16843475; // 0x10102d3

/**
 * Indicate whether this application contains code.  If set to false,
 * there is no code associated with it and thus the system will not
 * try to load its code when launching components.  The default is true
 * for normal behavior.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int hasCode = 16842764; // 0x101000c

/**
 * The text appearance for the AM/PM header.
 * @deprecated Use headerTextColor instead.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

@Deprecated public static final int headerAmPmTextAppearance = 16843936; // 0x10104a0

/**
 * Default background for the menu header.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int headerBackground = 16843055; // 0x101012f

/**
 * The text appearance for the day of month (ex. 28) in the selected date header.
 * {@deprecated Use headerTextColor instead.}
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

@Deprecated public static final int headerDayOfMonthTextAppearance = 16843927; // 0x1010497

/**
 * When set to false, the ListView will not draw the divider after each header view.
 * The default value is true.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int headerDividersEnabled = 16843310; // 0x101022e

/**
 * The text appearance for the month (ex. May) in the selected date header.
 * {@deprecated Use headerTextColor instead.}
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

@Deprecated public static final int headerMonthTextAppearance = 16843926; // 0x1010496

/**
 * The text appearance for the time header.
 * @deprecated Use headerTextColor instead.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

@Deprecated public static final int headerTimeTextAppearance = 16843935; // 0x101049f

/**
 * The text appearance for the year (ex. 2014) in the selected date header.
 * {@deprecated Use headerTextColor instead.}
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

@Deprecated public static final int headerYearTextAppearance = 16843928; // 0x1010498

/**
 * Makes the TextView be exactly this tall.
 * You could get the same effect by specifying this number in the
 * layout parameters.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int height = 16843093; // 0x1010155

/**
 * Set true to hide the action bar on a vertical nested scroll of content.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int hideOnContentScroll = 16843843; // 0x1010443

/**
 * Hint text to display when the text is empty.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int hint = 16843088; // 0x1010150

/**
 * Specifies a drawable to use for the 'home as up' indicator.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int homeAsUpIndicator = 16843531; // 0x101030b

/**
 * Specifies a layout to use for the "home" section of the action bar.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int homeLayout = 16843549; // 0x101031d

/**
 * Default horizontal divider between rows of menu items.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int horizontalDivider = 16843053; // 0x101012d

/**
 * Default horizontal gap between keys.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 */

public static final int horizontalGap = 16843327; // 0x101023f

/**
 * Default HorizontalScrollView style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int horizontalScrollViewStyle = 16843603; // 0x1010353

/**
 * Defines the default horizontal spacing between columns.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int horizontalSpacing = 16843028; // 0x1010114

/**
 * Specify a URI authority host that is handled, as per
 * {@link android.content.IntentFilter#addDataAuthority
 * IntentFilter.addDataAuthority()}.
 * <p><em>Note: host name matching in the Android framework is
 * case-sensitive, unlike the formal RFC.  As a result,
 * host names here should always use lower case letters.</em></p>
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int host = 16842792; // 0x1010028

/**
 * X coordinate of the icon hot spot.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int hotSpotX = 16844055; // 0x1010517

/**
 * Y coordinate of the icon hot spot.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int hotSpotY = 16844056; // 0x1010518

/**
 * Frequency of automatic hyphenation.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>full</td><td>2</td><td>Standard amount of hyphenation, useful for running text and for
 * screens with limited space for text.</td></tr>
 * <tr><td>none</td><td>0</td><td>No hyphenation.</td></tr>
 * <tr><td>normal</td><td>1</td><td>Less frequent hyphenation, useful for informal use cases, such
 * as chat messages.</td></tr>
 * </table>
 */

public static final int hyphenationFrequency = 16843998; // 0x10104de

/**
 * A Drawable resource providing a graphical representation of its
 * associated item.  Use with the
 * application tag (to supply a default icon for all application
 * components), or with the activity, receiver, service, or instrumentation
 * tag (to supply a specific icon for that component).  It may also be
 * used with the intent-filter tag to supply an icon to show to the
 * user when an activity is being selected based on a particular Intent.
 * <p>The given icon will be used to display to the user a graphical
 * representation of its associated component; for example, as the icon
 * for main activity that is displayed in the launcher.  This must be
 * a reference to a Drawable resource containing the image definition.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int icon = 16842754; // 0x1010002

/**
 * The icon to show in the popup preview.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int iconPreview = 16843337; // 0x1010249

/**
 * Whether the space for the preference icon view will be reserved. By default, preference
 * icon view visibility will be set to GONE when there is no icon provided, so the default
 * value of this attribute is false.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int iconSpaceReserved = 16844129; // 0x1010561

/**
 * Tint to apply to the icon.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int iconTint = 16844126; // 0x101055e

/**
 * Blending mode used to apply the icon tint.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>add</td><td>10</td><td>Combines the tint and icon color and alpha channels, clamping the
 * result to valid color values. Saturate(S + D)</td></tr>
 * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the icon with those of
 * the tint. [Sa * Da, Sc * Dc]</td></tr>
 * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
 * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the icon, but with the icon’s alpha
 * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
 * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the icon. The icon’s
 * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
 * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the icon.
 * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
 * </table>
 */

public static final int iconTintMode = 16844127; // 0x101055f

/**
 * The default state of the SearchView. If true, it will be iconified when not in
 * use and expanded when clicked.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int iconifiedByDefault = 16843514; // 0x10102fa

/**
 * Supply an identifier name for this view, to later retrieve it
 * with {@link android.view.View#findViewById View.findViewById()} or
 * {@link android.app.Activity#findViewById Activity.findViewById()}.
 * This must be a
 * resource reference; typically you set this using the
 * <code>@+</code> syntax to create a new ID resources.
 * For example: <code>android:id="@+id/my_id"</code> which
 * allows you to later retrieve the view
 * with <code>findViewById(R.id.my_id)</code>.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int id = 16842960; // 0x10100d0

/**
 * Indicates what view should not be affected by gravity.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int ignoreGravity = 16843263; // 0x10101ff

/**
 * The style resource to use for an ImageButton.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int imageButtonStyle = 16842866; // 0x1010072

/**
 * The style resource to use for an ImageButton that is an image well.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int imageWellStyle = 16842867; // 0x1010073

/**
 * Supply a value for
 * {@link android.view.inputmethod.EditorInfo#actionId EditorInfo.actionId}
 * used when an input method is connected to the text view.
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int imeActionId = 16843366; // 0x1010266

/**
 * Supply a value for
 * {@link android.view.inputmethod.EditorInfo#actionLabel EditorInfo.actionLabel}
 * used when an input method is connected to the text view.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int imeActionLabel = 16843365; // 0x1010265

/**
 * Animation to use when showing the fullscreen extract UI after
 * it had previously been hidden.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int imeExtractEnterAnimation = 16843368; // 0x1010268

/**
 * Animation to use when hiding the fullscreen extract UI after
 * it had previously been shown.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int imeExtractExitAnimation = 16843369; // 0x1010269

/**
 * Background to use for entire input method when it is being
 * shown in fullscreen mode with the extract view, to ensure
 * that it completely covers the application.  This allows,
 * for example, the candidate view to be hidden
 * while in fullscreen mode without having the application show through
 * behind it.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int imeFullscreenBackground = 16843308; // 0x101022c

/**
 * Additional features you can enable in an IME associated with an editor
 * to improve the integration with your application.  The constants
 * here correspond to those defined by
 * {@link android.view.inputmethod.EditorInfo#imeOptions}.
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>actionDone</td><td>6</td><td>The action key performs a "done"
 * operation, closing the soft input method.
 * Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_ACTION_DONE}.</td></tr>
 * <tr><td>actionGo</td><td>2</td><td>The action key performs a "go"
 * operation to take the user to the target of the text they typed.
 * Typically used, for example, when entering a URL.
 * Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_ACTION_GO}.</td></tr>
 * <tr><td>actionNext</td><td>5</td><td>The action key performs a "next"
 * operation, taking the user to the next field that will accept text.
 * Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_ACTION_NEXT}.</td></tr>
 * <tr><td>actionNone</td><td>1</td><td>This editor has no action associated with it.
 * Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_ACTION_NONE}.</td></tr>
 * <tr><td>actionPrevious</td><td>7</td><td>The action key performs a "previous"
 * operation, taking the user to the previous field that will accept text.
 * Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_ACTION_PREVIOUS}.</td></tr>
 * <tr><td>actionSearch</td><td>3</td><td>The action key performs a "search"
 * operation, taking the user to the results of searching for the text
 * the have typed (in whatever context is appropriate).
 * Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_ACTION_SEARCH}.</td></tr>
 * <tr><td>actionSend</td><td>4</td><td>The action key performs a "send"
 * operation, delivering the text to its target.  This is typically used
 * when composing a message.
 * Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_ACTION_SEND}.</td></tr>
 * <tr><td>actionUnspecified</td><td>0</td><td>There is no specific action associated with this editor, let the
 * editor come up with its own if it can.
 * Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_NULL}.</td></tr>
 * <tr><td>flagForceAscii</td><td>80000000</td><td>Used to request that the IME should be capable of inputting ASCII
 * characters.  The intention of this flag is to ensure that the user
 * can type Roman alphabet characters in a {@link android.widget.TextView}
 * used for, typically, account ID or password input.  It is expected that IMEs
 * normally are able to input ASCII even without being told so (such IMEs
 * already respect this flag in a sense), but there could be some cases they
 * aren't when, for instance, only non-ASCII input languagaes like Arabic,
 * Greek, Hebrew, Russian are enabled in the IME.  Applications need to be
 * aware that the flag is not a guarantee, and not all IMEs will respect it.
 * However, it is strongly recommended for IME authors to respect this flag
 * especially when their IME could end up with a state that has only non-ASCII
 * input languages enabled.
 * <p>Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_FLAG_FORCE_ASCII}.</td></tr>
 * <tr><td>flagNavigateNext</td><td>8000000</td><td>Used to specify that there is something
 * interesting that a forward navigation can focus on. This is like using
 * actionNext, except allows the IME to be multiline (with
 * an enter key) as well as provide forward navigation.  Note that some
 * IMEs may not be able to do this, especially when running on a small
 * screen where there is little space.  In that case it does not need to
 * present a UI for this option.  Like actionNext, if the
 * user selects the IME's facility to forward navigate, this will show up
 * in the application at
 * {@link android.view.inputmethod.InputConnection#performEditorAction(int)
 * InputConnection.performEditorAction(int)}.
 * <p>Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_FLAG_NAVIGATE_NEXT}.</td></tr>
 * <tr><td>flagNavigatePrevious</td><td>4000000</td><td>Like flagNavigateNext, but
 * specifies there is something interesting that a backward navigation
 * can focus on.  If the user selects the IME's facility to backward
 * navigate, this will show up in the application as an actionPrevious
 * at {@link android.view.inputmethod.InputConnection#performEditorAction(int)
 * InputConnection.performEditorAction(int)}.
 * <p>Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_FULLSCREEN}.</td></tr>
 * <tr><td>flagNoAccessoryAction</td><td>20000000</td><td>Used in conjunction with a custom action, this indicates that the
 * action should not be available as an accessory button when the
 * input method is full-screen.
 * Note that by setting this flag, there can be cases where the action
 * is simply never available to the user.  Setting this generally means
 * that you think showing text being edited is more important than the
 * action you have supplied.
 * <p>Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_ACCESSORY_ACTION}.</td></tr>
 * <tr><td>flagNoEnterAction</td><td>40000000</td><td>Used in conjunction with a custom action,
 * this indicates that the action should not be available in-line as
 * a replacement for the "enter" key.  Typically this is
 * because the action has such a significant impact or is not recoverable
 * enough that accidentally hitting it should be avoided, such as sending
 * a message.    Note that {@link android.widget.TextView} will
 * automatically set this flag for you on multi-line text views.
 * <p>Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_ENTER_ACTION}.</td></tr>
 * <tr><td>flagNoExtractUi</td><td>10000000</td><td>Used to specify that the IME does not need
 * to show its extracted text UI.  For input methods that may be fullscreen,
 * often when in landscape mode, this allows them to be smaller and let part
 * of the application be shown behind.  Though there will likely be limited
 * access to the application available from the user, it can make the
 * experience of a (mostly) fullscreen IME less jarring.  Note that when
 * this flag is specified the IME may <em>not</em> be set up to be able
 * to display text, so it should only be used in situations where this is
 * not needed.
 * <p>Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_EXTRACT_UI}.</td></tr>
 * <tr><td>flagNoFullscreen</td><td>2000000</td><td>Used to request that the IME never go
 * into fullscreen mode.  Applications need to be aware that the flag is not
 * a guarantee, and not all IMEs will respect it.
 * <p>Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_FULLSCREEN}.</td></tr>
 * <tr><td>flagNoPersonalizedLearning</td><td>1000000</td><td>Used to request that the IME should not update any personalized data such as typing
 * history and personalized language model based on what the user typed on this text
 * editing object. Typical use cases are:
 * <ul>
 * <li>When the application is in a special mode, where user's activities are expected
 * to be not recorded in the application's history. Some web browsers and chat
 * applications may have this kind of modes.</li>
 * <li>When storing typing history does not make much sense.  Specifying this flag in
 * typing games may help to avoid typing history from being filled up with words that
 * the user is less likely to type in their daily life.  Another example is that when
 * the application already knows that the expected input is not a valid word (e.g. a
 * promotion code that is not a valid word in any natural language).</li>
 * </ul>
 * <p>Applications need to be aware that the flag is not a guarantee, and some IMEs may
 * not respect it.</p></td></tr>
 * <tr><td>normal</td><td>0</td><td>There are no special semantics associated with this editor.</td></tr>
 * </table>
 */

public static final int imeOptions = 16843364; // 0x1010264

/**
 * The extra value of the subtype. This string can be any string and will be passed to
 * the IME when the framework calls the IME with the subtype.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int imeSubtypeExtraValue = 16843502; // 0x10102ee

/**
 * The locale of the subtype. This string should be a locale (for example en_US and fr_FR)
 * and will be passed to the IME when the framework calls the IME
 * with the subtype. This is also used by the framework to know the supported locales
 * of the IME.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int imeSubtypeLocale = 16843500; // 0x10102ec

/**
 * The mode of the subtype. This string can be a mode (for example, voice and keyboard)
 * and this string will be passed to the IME when the framework calls the IME with the
 * subtype.  {@link android.view.inputmethod.InputMethodSubtype#getLocale()} returns the
 * value specified in this attribute.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int imeSubtypeMode = 16843501; // 0x10102ed

/**
 * Flag declaring this activity to be 'immersive'; immersive activities
 * should not be interrupted with other activities or notifications.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int immersive = 16843456; // 0x10102c0

/**
 * Describes whether or not this view is important for accessibility.
 * If it is important, the view fires accessibility events and is
 * reported to accessibility services that query the screen. Note:
 * While not recommended, an accessibility service may decide to
 * ignore this attribute and operate on all views in the view tree.
 * <p>May be an integer value, such as "<code>100</code>".
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>auto</td><td>0</td><td>The system determines whether the view is important for accessibility - default
 * (recommended).</td></tr>
 * <tr><td>no</td><td>2</td><td>The view is not important for accessibility.</td></tr>
 * <tr><td>noHideDescendants</td><td>4</td><td>The view is not important for accessibility, nor are any of its descendant
 * views.</td></tr>
 * <tr><td>yes</td><td>1</td><td>The view is important for accessibility.</td></tr>
 * </table>
 */

public static final int importantForAccessibility = 16843690; // 0x10103aa

/**
 * Hints the Android System whether the view node associated with this View should be
 * included in a view structure used for autofill purposes.
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>auto</td><td>0</td><td>Let the Android System use its heuristics to determine if the view is important for autofill.</td></tr>
 * <tr><td>no</td><td>2</td><td>Hint the Android System that this view is *not* important for autofill,
 * but its children (if any) will be traversed..</td></tr>
 * <tr><td>noExcludeDescendants</td><td>8</td><td>Hint the Android System that this view is *not* important for autofill,
 * and its children (if any) will not be traversed.</td></tr>
 * <tr><td>yes</td><td>1</td><td>Hint the Android System that this view is important for autofill,
 * and its children (if any) will be traversed..</td></tr>
 * <tr><td>yesExcludeDescendants</td><td>4</td><td>Hint the Android System that this view is important for autofill,
 * but its children (if any) will not be traversed.</td></tr>
 * </table>
 */

public static final int importantForAutofill = 16844120; // 0x1010558

/**
 * Identifier for the animation to use when a view is shown.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int inAnimation = 16843127; // 0x1010177

/**
 * Leave enough room for ascenders and descenders instead of
 * using the font ascent and descent strictly.  (Normally true).
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int includeFontPadding = 16843103; // 0x101015f

/**
 * If provided and <code>true</code>, this searchable activity will be
 * included in any global lists of search targets.
 * The default value is <code>false</code>. <i>Optional attribute.</i>.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int includeInGlobalSearch = 16843374; // 0x101026e

/**
 * Allows to enable the indeterminate mode. In this mode the progress
 * bar plays an infinite looping animation.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int indeterminate = 16843065; // 0x1010139

/**
 * Defines how the indeterminate mode should behave when the progress
 * reaches max.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>cycle</td><td>2</td><td>Progress keeps the current value and goes back to 0.</td></tr>
 * <tr><td>repeat</td><td>1</td><td>Progress starts over from 0.</td></tr>
 * </table>
 */

public static final int indeterminateBehavior = 16843070; // 0x101013e

/**
 * Drawable used for the indeterminate mode.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int indeterminateDrawable = 16843067; // 0x101013b

/**
 * Duration of the indeterminate animation.
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int indeterminateDuration = 16843069; // 0x101013d

/**
 * Restricts to ONLY indeterminate mode (state-keeping progress mode will not work).
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int indeterminateOnly = 16843066; // 0x101013a

/**
 * Specifies a style resource to use for an indeterminate progress spinner.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int indeterminateProgressStyle = 16843544; // 0x1010318

/**
 * Tint to apply to the indeterminate progress indicator.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int indeterminateTint = 16843881; // 0x1010469

/**
 * Blending mode used to apply the indeterminate progress indicator tint.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
 * result to valid color values. Saturate(S + D)</td></tr>
 * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
 * the tint. [Sa * Da, Sc * Dc]</td></tr>
 * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
 * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
 * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
 * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
 * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
 * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
 * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
 * </table>
 */

public static final int indeterminateTintMode = 16843882; // 0x101046a

/**
 * The end bound for an item's indicator. To specify a right bound specific to children,
 * use childIndicatorEnd.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int indicatorEnd = 16843730; // 0x10103d2

/**
 * The left bound for an item's indicator. To specify a left bound specific to children,
 * use childIndicatorLeft.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int indicatorLeft = 16843021; // 0x101010d

/**
 * The right bound for an item's indicator. To specify a right bound specific to children,
 * use childIndicatorRight.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int indicatorRight = 16843022; // 0x101010e

/**
 * The start bound for an item's indicator. To specify a start bound specific to children,
 * use childIndicatorStart.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int indicatorStart = 16843729; // 0x10103d1

/**
 * Overrides the id of the inflated View with this value.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int inflatedId = 16842995; // 0x10100f3

/**
 * Specify the order in which content providers hosted by a process
 * are instantiated when that process is created.  Not needed unless
 * you have providers with dependencies between each other, to make
 * sure that they are created in the order needed by those dependencies.
 * The value is a simple integer, with higher numbers being
 * initialized first.
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int initOrder = 16842778; // 0x101001a

/**
 * A resource id of a layout.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int initialKeyguardLayout = 16843714; // 0x10103c2

/**
 * A resource id of a layout.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int initialLayout = 16843345; // 0x1010251

/**
 * Inner radius of the ring. When defined, innerRadiusRatio is ignored.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int innerRadius = 16843359; // 0x101025f

/**
 * Inner radius of the ring expressed as a ratio of the ring's width. For instance,
 * if innerRadiusRatio=9, then the inner radius equals the ring's width divided by 9.
 * This value is ignored if innerRadius is defined. Default value is 9.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 */

public static final int innerRadiusRatio = 16843163; // 0x101019b

/**
 * If set, specifies that this TextView should use the specified
 * input method (specified by fully-qualified class name).
 * {@deprecated Use inputType instead.}
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

@Deprecated public static final int inputMethod = 16843112; // 0x1010168

/**
 * The type of data being placed in a text field, used to help an
 * input method decide how to let the user enter text.  The constants
 * here correspond to those defined by
 * {@link android.text.InputType}.  Generally you can select
 * a single value, though some can be combined together as
 * indicated.  Setting this attribute to anything besides
 * <var>none</var> also implies that the text is editable.
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>date</td><td>14</td><td>For entering a date.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_DATETIME} |
 * {@link android.text.InputType#TYPE_DATETIME_VARIATION_DATE}.</td></tr>
 * <tr><td>datetime</td><td>4</td><td>For entering a date and time.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_DATETIME} |
 * {@link android.text.InputType#TYPE_DATETIME_VARIATION_NORMAL}.</td></tr>
 * <tr><td>none</td><td>0</td><td>There is no content type.  The text is not editable.</td></tr>
 * <tr><td>number</td><td>2</td><td>A numeric only field.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_NUMBER} |
 * {@link android.text.InputType#TYPE_NUMBER_VARIATION_NORMAL}.</td></tr>
 * <tr><td>numberDecimal</td><td>2002</td><td>Can be combined with <var>number</var> and its other options to
 * allow a decimal (fractional) number.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_NUMBER} |
 * {@link android.text.InputType#TYPE_NUMBER_FLAG_DECIMAL}.</td></tr>
 * <tr><td>numberPassword</td><td>12</td><td>A numeric password field.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_NUMBER} |
 * {@link android.text.InputType#TYPE_NUMBER_VARIATION_PASSWORD}.</td></tr>
 * <tr><td>numberSigned</td><td>1002</td><td>Can be combined with <var>number</var> and its other options to
 * allow a signed number.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_NUMBER} |
 * {@link android.text.InputType#TYPE_NUMBER_FLAG_SIGNED}.</td></tr>
 * <tr><td>phone</td><td>3</td><td>For entering a phone number.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_PHONE}.</td></tr>
 * <tr><td>text</td><td>1</td><td>Just plain old text.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_NORMAL}.</td></tr>
 * <tr><td>textAutoComplete</td><td>10001</td><td>Can be combined with <var>text</var> and its variations to
 * specify that this field will be doing its own auto-completion and
 * talking with the input method appropriately.  Corresponds to
 * {@link android.text.InputType#TYPE_TEXT_FLAG_AUTO_COMPLETE}.</td></tr>
 * <tr><td>textAutoCorrect</td><td>8001</td><td>Can be combined with <var>text</var> and its variations to
 * request auto-correction of text being input.  Corresponds to
 * {@link android.text.InputType#TYPE_TEXT_FLAG_AUTO_CORRECT}.</td></tr>
 * <tr><td>textCapCharacters</td><td>1001</td><td>Can be combined with <var>text</var> and its variations to
 * request capitalization of all characters.  Corresponds to
 * {@link android.text.InputType#TYPE_TEXT_FLAG_CAP_CHARACTERS}.</td></tr>
 * <tr><td>textCapSentences</td><td>4001</td><td>Can be combined with <var>text</var> and its variations to
 * request capitalization of the first character of every sentence.  Corresponds to
 * {@link android.text.InputType#TYPE_TEXT_FLAG_CAP_SENTENCES}.</td></tr>
 * <tr><td>textCapWords</td><td>2001</td><td>Can be combined with <var>text</var> and its variations to
 * request capitalization of the first character of every word.  Corresponds to
 * {@link android.text.InputType#TYPE_TEXT_FLAG_CAP_WORDS}.</td></tr>
 * <tr><td>textEmailAddress</td><td>21</td><td>Text that will be used as an e-mail address.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_EMAIL_ADDRESS}.</td></tr>
 * <tr><td>textEmailSubject</td><td>31</td><td>Text that is being supplied as the subject of an e-mail.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_EMAIL_SUBJECT}.</td></tr>
 * <tr><td>textFilter</td><td>b1</td><td>Text that is filtering some other data.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_FILTER}.</td></tr>
 * <tr><td>textImeMultiLine</td><td>40001</td><td>Can be combined with <var>text</var> and its variations to
 * indicate that though the regular text view should not be multiple
 * lines, the IME should provide multiple lines if it can.  Corresponds to
 * {@link android.text.InputType#TYPE_TEXT_FLAG_IME_MULTI_LINE}.</td></tr>
 * <tr><td>textLongMessage</td><td>51</td><td>Text that is the content of a long message.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_LONG_MESSAGE}.</td></tr>
 * <tr><td>textMultiLine</td><td>20001</td><td>Can be combined with <var>text</var> and its variations to
 * allow multiple lines of text in the field.  If this flag is not set,
 * the text field will be constrained to a single line.  Corresponds to
 * {@link android.text.InputType#TYPE_TEXT_FLAG_MULTI_LINE}.</td></tr>
 * <tr><td>textNoSuggestions</td><td>80001</td><td>Can be combined with <var>text</var> and its variations to
 * indicate that the IME should not show any
 * dictionary-based word suggestions.  Corresponds to
 * {@link android.text.InputType#TYPE_TEXT_FLAG_NO_SUGGESTIONS}.</td></tr>
 * <tr><td>textPassword</td><td>81</td><td>Text that is a password.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_PASSWORD}.</td></tr>
 * <tr><td>textPersonName</td><td>61</td><td>Text that is the name of a person.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_PERSON_NAME}.</td></tr>
 * <tr><td>textPhonetic</td><td>c1</td><td>Text that is for phonetic pronunciation, such as a phonetic name
 * field in a contact entry.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_PHONETIC}.</td></tr>
 * <tr><td>textPostalAddress</td><td>71</td><td>Text that is being supplied as a postal mailing address.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_POSTAL_ADDRESS}.</td></tr>
 * <tr><td>textShortMessage</td><td>41</td><td>Text that is the content of a short message.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_SHORT_MESSAGE}.</td></tr>
 * <tr><td>textUri</td><td>11</td><td>Text that will be used as a URI.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_URI}.</td></tr>
 * <tr><td>textVisiblePassword</td><td>91</td><td>Text that is a password that should be visible.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_VISIBLE_PASSWORD}.</td></tr>
 * <tr><td>textWebEditText</td><td>a1</td><td>Text that is being supplied as text in a web form.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_WEB_EDIT_TEXT}.</td></tr>
 * <tr><td>textWebEmailAddress</td><td>d1</td><td>Text that will be used as an e-mail address on a web form.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS}.</td></tr>
 * <tr><td>textWebPassword</td><td>e1</td><td>Text that will be used as a password on a web form.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_WEB_PASSWORD}.</td></tr>
 * <tr><td>time</td><td>24</td><td>For entering a time.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_DATETIME} |
 * {@link android.text.InputType#TYPE_DATETIME_VARIATION_TIME}.</td></tr>
 * </table>
 */

public static final int inputType = 16843296; // 0x1010220

/**
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 */

public static final int inset = 16843957; // 0x10104b5

/**
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 */

public static final int insetBottom = 16843194; // 0x10101ba

/**
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 */

public static final int insetLeft = 16843191; // 0x10101b7

/**
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 */

public static final int insetRight = 16843192; // 0x10101b8

/**
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 */

public static final int insetTop = 16843193; // 0x10101b9

/**
 * The default install location defined by an application.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>auto</td><td>0</td><td>Let the system decide ideal install location</td></tr>
 * <tr><td>internalOnly</td><td>1</td><td>Explicitly request to be installed on internal phone storage
 * only.</td></tr>
 * <tr><td>preferExternal</td><td>2</td><td>Prefer to be installed on SD card. There is no guarantee that
 * the system will honor this request. The application might end
 * up being installed on internal storage if external media
 * is unavailable or too full.</td></tr>
 * </table>
 */

public static final int installLocation = 16843447; // 0x10102b7

/**
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int interpolator = 16843073; // 0x1010141

/**
 * Set to true to tell the SyncManager to automatically call setIsSyncable(..., ..., 1)
 * for the SyncAdapter instead of issuaing an initialization sync to the SyncAdapter.
 * Defaults to false.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int isAlwaysSyncable = 16843571; // 0x1010333

/**
 * Set to true if this subtype is ASCII capable. If the subtype is ASCII
 * capable, it should guarantee that the user can input ASCII characters with
 * this subtype. This is important because many password fields only allow
 * ASCII-characters.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int isAsciiCapable = 16843753; // 0x10103e9

/**
 * Set true if the subtype is auxiliary.  An auxiliary subtype won't be shown in the
 * input method selection list in the settings app.
 * InputMethodManager#switchToLastInputMethod will ignore auxiliary subtypes when it
 * chooses a target subtype.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int isAuxiliary = 16843647; // 0x101037f

/**
 * Set to true in all of the configurations for which this input
 * method should be considered an option as the default.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int isDefault = 16843297; // 0x1010221

/**
 * If set to <code>true</code>, indicates to the platform that this APK is
 * a 'feature' split and that it implicitly depends on the base APK. This distinguishes
 * this split APK from a 'configuration' split, which provides resource overrides
 * for a particular 'feature' split. Only useful when the base APK specifies
 * <code>android:isolatedSplits="true"</code>.
 * <p>The default value of this attribute is <code>false</code>.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int isFeatureSplit = 16844123; // 0x101055b

/**
 * A boolean flag used to indicate if an application is a Game or not.
 * <p>This information can be used by the system to group together
 * applications that are classified as games, and display them separately
 * from the other applications.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int isGame = 16843764; // 0x10103f4

/**
 * Whether this rating bar is an indicator (and non-changeable by the user).
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int isIndicator = 16843079; // 0x1010147

/**
 * Whether this is a modifier key such as Alt or Shift.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int isModifier = 16843334; // 0x1010246

/**
 * Whether long-pressing on this key will make it repeat.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int isRepeatable = 16843336; // 0x1010248

/**
 * Set this if the view will serve as a scrolling container, meaning
 * that it can be resized to shrink its overall window so that there
 * will be space for an input method.  If not set, the default
 * value will be true if "scrollbars" has the vertical scrollbar
 * set, else it will be false.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int isScrollContainer = 16843342; // 0x101024e

/**
 * Whether the given RRO is static or not.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int isStatic = 16844122; // 0x101055a

/**
 * Whether this is a toggle key.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int isSticky = 16843335; // 0x1010247

/**
 * If set to true, this service will run under a special process
 * that is isolated from the rest of the system.  The only communication
 * with it is through the Service API (binding and starting).
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int isolatedProcess = 16843689; // 0x10103a9

/**
 * If set to <code>true</code>, indicates to the platform that any split APKs
 * installed for this application should be loaded into their own Context
 * objects and not appear in the base application's Context.
 * <p>The default value of this attribute is <code>false</code>.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int isolatedSplits = 16844107; // 0x101054b

/**
 * Default background for each menu item.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int itemBackground = 16843056; // 0x1010130

/**
 * Default disabled icon alpha for each menu item that shows an icon.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 */

public static final int itemIconDisabledAlpha = 16843057; // 0x1010131

/**
 * Specifies padding that should be applied to the left and right sides of
 * system-provided items in the bar.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int itemPadding = 16843565; // 0x101032d

/**
 * Default appearance of menu item text.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int itemTextAppearance = 16843052; // 0x101012c

/**
 * Mode for justification.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>inter_word</td><td>1</td><td>Justification by stretching word spacing.</td></tr>
 * <tr><td>none</td><td>0</td><td>No justification.</td></tr>
 * </table>
 */

public static final int justificationMode = 16844135; // 0x1010567

/**
 * Controls whether the view's window should keep the screen on
 * while visible.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int keepScreenOn = 16843286; // 0x1010216

/**
 * The key to store the Preference value.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int key = 16843240; // 0x10101e8

/**
 * Image for the key. This image needs to be a StateListDrawable, with the following
 * possible states: normal, pressed, checkable, checkable+pressed, checkable+checked,
 * checkable+checked+pressed.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int keyBackground = 16843315; // 0x1010233

/**
 * Key edge flags.
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>left</td><td>1</td><td>Key is anchored to the left of the keyboard.</td></tr>
 * <tr><td>right</td><td>2</td><td>Key is anchored to the right of the keyboard.</td></tr>
 * </table>
 */

public static final int keyEdgeFlags = 16843333; // 0x1010245

/**
 * Default height of a key, in pixels or percentage of display width.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 */

public static final int keyHeight = 16843326; // 0x101023e

/**
 * The icon to display on the key instead of the label.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int keyIcon = 16843340; // 0x101024c

/**
 * The label to display on the key.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int keyLabel = 16843339; // 0x101024b

/**
 * The string of characters to output when this key is pressed.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int keyOutputText = 16843338; // 0x101024a

/**
 * Height of the key press feedback popup.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int keyPreviewHeight = 16843321; // 0x1010239

/**
 * Layout resource for key press feedback.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int keyPreviewLayout = 16843319; // 0x1010237

/**
 * Vertical offset of the key press feedback from the key.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int keyPreviewOffset = 16843320; // 0x1010238

/**
 * Groups signing keys into a {@code KeySet} for easier reference in
 * other APIs. However, currently no APIs use this.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * <p>May be an integer value, such as "<code>100</code>".
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 */

public static final int keySet = 16843739; // 0x10103db

/**
 * Color to use for the label in a key.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int keyTextColor = 16843318; // 0x1010236

/**
 * Size of the text for character keys.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int keyTextSize = 16843316; // 0x1010234

/**
 * Default width of a key, in pixels or percentage of display width.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 */

public static final int keyWidth = 16843325; // 0x101023d

/**
 * The key character map file resource.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int keyboardLayout = 16843691; // 0x10103ab

/**
 * Mode of the keyboard. If the mode doesn't match the
 * requested keyboard mode, the row will be skipped.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int keyboardMode = 16843341; // 0x101024d

/**
 * Whether this view is a root of a keyboard navigation cluster.
 * See {@link android.view.View#setKeyboardNavigationCluster(boolean)}.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int keyboardNavigationCluster = 16844096; // 0x1010540

/**
 * This enum provides the same keycode values as can be found in
 * {@link android.view.KeyEvent}.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>KEYCODE_0</td><td>7</td><td></td></tr>
 * <tr><td>KEYCODE_1</td><td>8</td><td></td></tr>
 * <tr><td>KEYCODE_11</td><td>e3</td><td></td></tr>
 * <tr><td>KEYCODE_12</td><td>e4</td><td></td></tr>
 * <tr><td>KEYCODE_2</td><td>9</td><td></td></tr>
 * <tr><td>KEYCODE_3</td><td>a</td><td></td></tr>
 * <tr><td>KEYCODE_3D_MODE</td><td>ce</td><td></td></tr>
 * <tr><td>KEYCODE_4</td><td>b</td><td></td></tr>
 * <tr><td>KEYCODE_5</td><td>c</td><td></td></tr>
 * <tr><td>KEYCODE_6</td><td>d</td><td></td></tr>
 * <tr><td>KEYCODE_7</td><td>e</td><td></td></tr>
 * <tr><td>KEYCODE_8</td><td>f</td><td></td></tr>
 * <tr><td>KEYCODE_9</td><td>10</td><td></td></tr>
 * <tr><td>KEYCODE_A</td><td>1d</td><td></td></tr>
 * <tr><td>KEYCODE_ALL_APPS</td><td>11c</td><td></td></tr>
 * <tr><td>KEYCODE_ALT_LEFT</td><td>39</td><td></td></tr>
 * <tr><td>KEYCODE_ALT_RIGHT</td><td>3a</td><td></td></tr>
 * <tr><td>KEYCODE_APOSTROPHE</td><td>4b</td><td></td></tr>
 * <tr><td>KEYCODE_APP_SWITCH</td><td>bb</td><td></td></tr>
 * <tr><td>KEYCODE_ASSIST</td><td>db</td><td></td></tr>
 * <tr><td>KEYCODE_AT</td><td>4d</td><td></td></tr>
 * <tr><td>KEYCODE_AVR_INPUT</td><td>b6</td><td></td></tr>
 * <tr><td>KEYCODE_AVR_POWER</td><td>b5</td><td></td></tr>
 * <tr><td>KEYCODE_B</td><td>1e</td><td></td></tr>
 * <tr><td>KEYCODE_BACK</td><td>4</td><td></td></tr>
 * <tr><td>KEYCODE_BACKSLASH</td><td>49</td><td></td></tr>
 * <tr><td>KEYCODE_BOOKMARK</td><td>ae</td><td></td></tr>
 * <tr><td>KEYCODE_BREAK</td><td>79</td><td></td></tr>
 * <tr><td>KEYCODE_BRIGHTNESS_DOWN</td><td>dc</td><td></td></tr>
 * <tr><td>KEYCODE_BRIGHTNESS_UP</td><td>dd</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_1</td><td>bc</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_10</td><td>c5</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_11</td><td>c6</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_12</td><td>c7</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_13</td><td>c8</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_14</td><td>c9</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_15</td><td>ca</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_16</td><td>cb</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_2</td><td>bd</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_3</td><td>be</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_4</td><td>bf</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_5</td><td>c0</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_6</td><td>c1</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_7</td><td>c2</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_8</td><td>c3</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_9</td><td>c4</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_A</td><td>60</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_B</td><td>61</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_C</td><td>62</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_L1</td><td>66</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_L2</td><td>68</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_MODE</td><td>6e</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_R1</td><td>67</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_R2</td><td>69</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_SELECT</td><td>6d</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_START</td><td>6c</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_THUMBL</td><td>6a</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_THUMBR</td><td>6b</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_X</td><td>63</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_Y</td><td>64</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_Z</td><td>65</td><td></td></tr>
 * <tr><td>KEYCODE_C</td><td>1f</td><td></td></tr>
 * <tr><td>KEYCODE_CALCULATOR</td><td>d2</td><td></td></tr>
 * <tr><td>KEYCODE_CALENDAR</td><td>d0</td><td></td></tr>
 * <tr><td>KEYCODE_CALL</td><td>5</td><td></td></tr>
 * <tr><td>KEYCODE_CAMERA</td><td>1b</td><td></td></tr>
 * <tr><td>KEYCODE_CAPS_LOCK</td><td>73</td><td></td></tr>
 * <tr><td>KEYCODE_CAPTIONS</td><td>af</td><td></td></tr>
 * <tr><td>KEYCODE_CHANNEL_DOWN</td><td>a7</td><td></td></tr>
 * <tr><td>KEYCODE_CHANNEL_UP</td><td>a6</td><td></td></tr>
 * <tr><td>KEYCODE_CLEAR</td><td>1c</td><td></td></tr>
 * <tr><td>KEYCODE_COMMA</td><td>37</td><td></td></tr>
 * <tr><td>KEYCODE_CONTACTS</td><td>cf</td><td></td></tr>
 * <tr><td>KEYCODE_COPY</td><td>116</td><td></td></tr>
 * <tr><td>KEYCODE_CTRL_LEFT</td><td>71</td><td></td></tr>
 * <tr><td>KEYCODE_CTRL_RIGHT</td><td>72</td><td></td></tr>
 * <tr><td>KEYCODE_CUT</td><td>115</td><td></td></tr>
 * <tr><td>KEYCODE_D</td><td>20</td><td></td></tr>
 * <tr><td>KEYCODE_DEL</td><td>43</td><td></td></tr>
 * <tr><td>KEYCODE_DPAD_CENTER</td><td>17</td><td></td></tr>
 * <tr><td>KEYCODE_DPAD_DOWN</td><td>14</td><td></td></tr>
 * <tr><td>KEYCODE_DPAD_DOWN_LEFT</td><td>10d</td><td></td></tr>
 * <tr><td>KEYCODE_DPAD_DOWN_RIGHT</td><td>10f</td><td></td></tr>
 * <tr><td>KEYCODE_DPAD_LEFT</td><td>15</td><td></td></tr>
 * <tr><td>KEYCODE_DPAD_RIGHT</td><td>16</td><td></td></tr>
 * <tr><td>KEYCODE_DPAD_UP</td><td>13</td><td></td></tr>
 * <tr><td>KEYCODE_DPAD_UP_LEFT</td><td>10c</td><td></td></tr>
 * <tr><td>KEYCODE_DPAD_UP_RIGHT</td><td>10e</td><td></td></tr>
 * <tr><td>KEYCODE_DVR</td><td>ad</td><td></td></tr>
 * <tr><td>KEYCODE_E</td><td>21</td><td></td></tr>
 * <tr><td>KEYCODE_EISU</td><td>d4</td><td></td></tr>
 * <tr><td>KEYCODE_ENDCALL</td><td>6</td><td></td></tr>
 * <tr><td>KEYCODE_ENTER</td><td>42</td><td></td></tr>
 * <tr><td>KEYCODE_ENVELOPE</td><td>41</td><td></td></tr>
 * <tr><td>KEYCODE_EQUALS</td><td>46</td><td></td></tr>
 * <tr><td>KEYCODE_ESCAPE</td><td>6f</td><td></td></tr>
 * <tr><td>KEYCODE_EXPLORER</td><td>40</td><td></td></tr>
 * <tr><td>KEYCODE_F</td><td>22</td><td></td></tr>
 * <tr><td>KEYCODE_F1</td><td>83</td><td></td></tr>
 * <tr><td>KEYCODE_F10</td><td>8c</td><td></td></tr>
 * <tr><td>KEYCODE_F11</td><td>8d</td><td></td></tr>
 * <tr><td>KEYCODE_F12</td><td>8e</td><td></td></tr>
 * <tr><td>KEYCODE_F2</td><td>84</td><td></td></tr>
 * <tr><td>KEYCODE_F3</td><td>85</td><td></td></tr>
 * <tr><td>KEYCODE_F4</td><td>86</td><td></td></tr>
 * <tr><td>KEYCODE_F5</td><td>87</td><td></td></tr>
 * <tr><td>KEYCODE_F6</td><td>88</td><td></td></tr>
 * <tr><td>KEYCODE_F7</td><td>89</td><td></td></tr>
 * <tr><td>KEYCODE_F8</td><td>8a</td><td></td></tr>
 * <tr><td>KEYCODE_F9</td><td>8b</td><td></td></tr>
 * <tr><td>KEYCODE_FOCUS</td><td>50</td><td></td></tr>
 * <tr><td>KEYCODE_FORWARD</td><td>7d</td><td></td></tr>
 * <tr><td>KEYCODE_FORWARD_DEL</td><td>70</td><td></td></tr>
 * <tr><td>KEYCODE_FUNCTION</td><td>77</td><td></td></tr>
 * <tr><td>KEYCODE_G</td><td>23</td><td></td></tr>
 * <tr><td>KEYCODE_GRAVE</td><td>44</td><td></td></tr>
 * <tr><td>KEYCODE_GUIDE</td><td>ac</td><td></td></tr>
 * <tr><td>KEYCODE_H</td><td>24</td><td></td></tr>
 * <tr><td>KEYCODE_HEADSETHOOK</td><td>4f</td><td></td></tr>
 * <tr><td>KEYCODE_HELP</td><td>103</td><td></td></tr>
 * <tr><td>KEYCODE_HENKAN</td><td>d6</td><td></td></tr>
 * <tr><td>KEYCODE_HOME</td><td>3</td><td></td></tr>
 * <tr><td>KEYCODE_I</td><td>25</td><td></td></tr>
 * <tr><td>KEYCODE_INFO</td><td>a5</td><td></td></tr>
 * <tr><td>KEYCODE_INSERT</td><td>7c</td><td></td></tr>
 * <tr><td>KEYCODE_J</td><td>26</td><td></td></tr>
 * <tr><td>KEYCODE_K</td><td>27</td><td></td></tr>
 * <tr><td>KEYCODE_KANA</td><td>da</td><td></td></tr>
 * <tr><td>KEYCODE_KATAKANA_HIRAGANA</td><td>d7</td><td></td></tr>
 * <tr><td>KEYCODE_L</td><td>28</td><td></td></tr>
 * <tr><td>KEYCODE_LANGUAGE_SWITCH</td><td>cc</td><td></td></tr>
 * <tr><td>KEYCODE_LAST_CHANNEL</td><td>e5</td><td></td></tr>
 * <tr><td>KEYCODE_LEFT_BRACKET</td><td>47</td><td></td></tr>
 * <tr><td>KEYCODE_M</td><td>29</td><td></td></tr>
 * <tr><td>KEYCODE_MANNER_MODE</td><td>cd</td><td></td></tr>
 * <tr><td>KEYCODE_MEDIA_AUDIO_TRACK</td><td>de</td><td></td></tr>
 * <tr><td>KEYCODE_MEDIA_CLOSE</td><td>80</td><td></td></tr>
 * <tr><td>KEYCODE_MEDIA_EJECT</td><td>81</td><td></td></tr>
 * <tr><td>KEYCODE_MEDIA_FAST_FORWARD</td><td>5a</td><td></td></tr>
 * <tr><td>KEYCODE_MEDIA_NEXT</td><td>57</td><td></td></tr>
 * <tr><td>KEYCODE_MEDIA_PAUSE</td><td>7f</td><td></td></tr>
 * <tr><td>KEYCODE_MEDIA_PLAY</td><td>7e</td><td></td></tr>
 * <tr><td>KEYCODE_MEDIA_PLAY_PAUSE</td><td>55</td><td></td></tr>
 * <tr><td>KEYCODE_MEDIA_PREVIOUS</td><td>58</td><td></td></tr>
 * <tr><td>KEYCODE_MEDIA_RECORD</td><td>82</td><td></td></tr>
 * <tr><td>KEYCODE_MEDIA_REWIND</td><td>59</td><td></td></tr>
 * <tr><td>KEYCODE_MEDIA_SKIP_BACKWARD</td><td>111</td><td></td></tr>
 * <tr><td>KEYCODE_MEDIA_SKIP_FORWARD</td><td>110</td><td></td></tr>
 * <tr><td>KEYCODE_MEDIA_SLEEP</td><td>df</td><td></td></tr>
 * <tr><td>KEYCODE_MEDIA_STEP_BACKWARD</td><td>113</td><td></td></tr>
 * <tr><td>KEYCODE_MEDIA_STEP_FORWARD</td><td>112</td><td></td></tr>
 * <tr><td>KEYCODE_MEDIA_STOP</td><td>56</td><td></td></tr>
 * <tr><td>KEYCODE_MEDIA_TOP_MENU</td><td>e2</td><td></td></tr>
 * <tr><td>KEYCODE_MEDIA_WAKEUP</td><td>e0</td><td></td></tr>
 * <tr><td>KEYCODE_MENU</td><td>52</td><td></td></tr>
 * <tr><td>KEYCODE_META_LEFT</td><td>75</td><td></td></tr>
 * <tr><td>KEYCODE_META_RIGHT</td><td>76</td><td></td></tr>
 * <tr><td>KEYCODE_MINUS</td><td>45</td><td></td></tr>
 * <tr><td>KEYCODE_MOVE_END</td><td>7b</td><td></td></tr>
 * <tr><td>KEYCODE_MOVE_HOME</td><td>7a</td><td></td></tr>
 * <tr><td>KEYCODE_MUHENKAN</td><td>d5</td><td></td></tr>
 * <tr><td>KEYCODE_MUSIC</td><td>d1</td><td></td></tr>
 * <tr><td>KEYCODE_MUTE</td><td>5b</td><td></td></tr>
 * <tr><td>KEYCODE_N</td><td>2a</td><td></td></tr>
 * <tr><td>KEYCODE_NAVIGATE_IN</td><td>106</td><td></td></tr>
 * <tr><td>KEYCODE_NAVIGATE_NEXT</td><td>105</td><td></td></tr>
 * <tr><td>KEYCODE_NAVIGATE_OUT</td><td>107</td><td></td></tr>
 * <tr><td>KEYCODE_NAVIGATE_PREVIOUS</td><td>104</td><td></td></tr>
 * <tr><td>KEYCODE_NOTIFICATION</td><td>53</td><td></td></tr>
 * <tr><td>KEYCODE_NUM</td><td>4e</td><td></td></tr>
 * <tr><td>KEYCODE_NUMPAD_0</td><td>90</td><td></td></tr>
 * <tr><td>KEYCODE_NUMPAD_1</td><td>91</td><td></td></tr>
 * <tr><td>KEYCODE_NUMPAD_2</td><td>92</td><td></td></tr>
 * <tr><td>KEYCODE_NUMPAD_3</td><td>93</td><td></td></tr>
 * <tr><td>KEYCODE_NUMPAD_4</td><td>94</td><td></td></tr>
 * <tr><td>KEYCODE_NUMPAD_5</td><td>95</td><td></td></tr>
 * <tr><td>KEYCODE_NUMPAD_6</td><td>96</td><td></td></tr>
 * <tr><td>KEYCODE_NUMPAD_7</td><td>97</td><td></td></tr>
 * <tr><td>KEYCODE_NUMPAD_8</td><td>98</td><td></td></tr>
 * <tr><td>KEYCODE_NUMPAD_9</td><td>99</td><td></td></tr>
 * <tr><td>KEYCODE_NUMPAD_ADD</td><td>9d</td><td></td></tr>
 * <tr><td>KEYCODE_NUMPAD_COMMA</td><td>9f</td><td></td></tr>
 * <tr><td>KEYCODE_NUMPAD_DIVIDE</td><td>9a</td><td></td></tr>
 * <tr><td>KEYCODE_NUMPAD_DOT</td><td>9e</td><td></td></tr>
 * <tr><td>KEYCODE_NUMPAD_ENTER</td><td>a0</td><td></td></tr>
 * <tr><td>KEYCODE_NUMPAD_EQUALS</td><td>a1</td><td></td></tr>
 * <tr><td>KEYCODE_NUMPAD_LEFT_PAREN</td><td>a2</td><td></td></tr>
 * <tr><td>KEYCODE_NUMPAD_MULTIPLY</td><td>9b</td><td></td></tr>
 * <tr><td>KEYCODE_NUMPAD_RIGHT_PAREN</td><td>a3</td><td></td></tr>
 * <tr><td>KEYCODE_NUMPAD_SUBTRACT</td><td>9c</td><td></td></tr>
 * <tr><td>KEYCODE_NUM_LOCK</td><td>8f</td><td></td></tr>
 * <tr><td>KEYCODE_O</td><td>2b</td><td></td></tr>
 * <tr><td>KEYCODE_P</td><td>2c</td><td></td></tr>
 * <tr><td>KEYCODE_PAGE_DOWN</td><td>5d</td><td></td></tr>
 * <tr><td>KEYCODE_PAGE_UP</td><td>5c</td><td></td></tr>
 * <tr><td>KEYCODE_PAIRING</td><td>e1</td><td></td></tr>
 * <tr><td>KEYCODE_PASTE</td><td>117</td><td></td></tr>
 * <tr><td>KEYCODE_PERIOD</td><td>38</td><td></td></tr>
 * <tr><td>KEYCODE_PICTSYMBOLS</td><td>5e</td><td></td></tr>
 * <tr><td>KEYCODE_PLUS</td><td>51</td><td></td></tr>
 * <tr><td>KEYCODE_POUND</td><td>12</td><td></td></tr>
 * <tr><td>KEYCODE_POWER</td><td>1a</td><td></td></tr>
 * <tr><td>KEYCODE_PROG_BLUE</td><td>ba</td><td></td></tr>
 * <tr><td>KEYCODE_PROG_GRED</td><td>b7</td><td></td></tr>
 * <tr><td>KEYCODE_PROG_GREEN</td><td>b8</td><td></td></tr>
 * <tr><td>KEYCODE_PROG_YELLOW</td><td>b9</td><td></td></tr>
 * <tr><td>KEYCODE_Q</td><td>2d</td><td></td></tr>
 * <tr><td>KEYCODE_R</td><td>2e</td><td></td></tr>
 * <tr><td>KEYCODE_REFRESH</td><td>11d</td><td></td></tr>
 * <tr><td>KEYCODE_RIGHT_BRACKET</td><td>48</td><td></td></tr>
 * <tr><td>KEYCODE_RO</td><td>d9</td><td></td></tr>
 * <tr><td>KEYCODE_S</td><td>2f</td><td></td></tr>
 * <tr><td>KEYCODE_SCROLL_LOCK</td><td>74</td><td></td></tr>
 * <tr><td>KEYCODE_SEARCH</td><td>54</td><td></td></tr>
 * <tr><td>KEYCODE_SEMICOLON</td><td>4a</td><td></td></tr>
 * <tr><td>KEYCODE_SETTINGS</td><td>b0</td><td></td></tr>
 * <tr><td>KEYCODE_SHIFT_LEFT</td><td>3b</td><td></td></tr>
 * <tr><td>KEYCODE_SHIFT_RIGHT</td><td>3c</td><td></td></tr>
 * <tr><td>KEYCODE_SLASH</td><td>4c</td><td></td></tr>
 * <tr><td>KEYCODE_SOFT_LEFT</td><td>1</td><td></td></tr>
 * <tr><td>KEYCODE_SOFT_RIGHT</td><td>2</td><td></td></tr>
 * <tr><td>KEYCODE_SOFT_SLEEP</td><td>114</td><td></td></tr>
 * <tr><td>KEYCODE_SPACE</td><td>3e</td><td></td></tr>
 * <tr><td>KEYCODE_STAR</td><td>11</td><td></td></tr>
 * <tr><td>KEYCODE_STB_INPUT</td><td>b4</td><td></td></tr>
 * <tr><td>KEYCODE_STB_POWER</td><td>b3</td><td></td></tr>
 * <tr><td>KEYCODE_STEM_1</td><td>109</td><td></td></tr>
 * <tr><td>KEYCODE_STEM_2</td><td>10a</td><td></td></tr>
 * <tr><td>KEYCODE_STEM_3</td><td>10b</td><td></td></tr>
 * <tr><td>KEYCODE_STEM_PRIMARY</td><td>108</td><td></td></tr>
 * <tr><td>KEYCODE_SWITCH_CHARSET</td><td>5f</td><td></td></tr>
 * <tr><td>KEYCODE_SYM</td><td>3f</td><td></td></tr>
 * <tr><td>KEYCODE_SYSRQ</td><td>78</td><td></td></tr>
 * <tr><td>KEYCODE_SYSTEM_NAVIGATION_DOWN</td><td>119</td><td></td></tr>
 * <tr><td>KEYCODE_SYSTEM_NAVIGATION_LEFT</td><td>11a</td><td></td></tr>
 * <tr><td>KEYCODE_SYSTEM_NAVIGATION_RIGHT</td><td>11b</td><td></td></tr>
 * <tr><td>KEYCODE_SYSTEM_NAVIGATION_UP</td><td>118</td><td></td></tr>
 * <tr><td>KEYCODE_T</td><td>30</td><td></td></tr>
 * <tr><td>KEYCODE_TAB</td><td>3d</td><td></td></tr>
 * <tr><td>KEYCODE_TV</td><td>aa</td><td></td></tr>
 * <tr><td>KEYCODE_TV_ANTENNA_CABLE</td><td>f2</td><td></td></tr>
 * <tr><td>KEYCODE_TV_AUDIO_DESCRIPTION</td><td>fc</td><td></td></tr>
 * <tr><td>KEYCODE_TV_AUDIO_DESCRIPTION_MIX_DOWN</td><td>fe</td><td></td></tr>
 * <tr><td>KEYCODE_TV_AUDIO_DESCRIPTION_MIX_UP</td><td>fd</td><td></td></tr>
 * <tr><td>KEYCODE_TV_CONTENTS_MENU</td><td>100</td><td></td></tr>
 * <tr><td>KEYCODE_TV_DATA_SERVICE</td><td>e6</td><td></td></tr>
 * <tr><td>KEYCODE_TV_INPUT</td><td>b2</td><td></td></tr>
 * <tr><td>KEYCODE_TV_INPUT_COMPONENT_1</td><td>f9</td><td></td></tr>
 * <tr><td>KEYCODE_TV_INPUT_COMPONENT_2</td><td>fa</td><td></td></tr>
 * <tr><td>KEYCODE_TV_INPUT_COMPOSITE_1</td><td>f7</td><td></td></tr>
 * <tr><td>KEYCODE_TV_INPUT_COMPOSITE_2</td><td>f8</td><td></td></tr>
 * <tr><td>KEYCODE_TV_INPUT_HDMI_1</td><td>f3</td><td></td></tr>
 * <tr><td>KEYCODE_TV_INPUT_HDMI_2</td><td>f4</td><td></td></tr>
 * <tr><td>KEYCODE_TV_INPUT_HDMI_3</td><td>f5</td><td></td></tr>
 * <tr><td>KEYCODE_TV_INPUT_HDMI_4</td><td>f6</td><td></td></tr>
 * <tr><td>KEYCODE_TV_INPUT_VGA_1</td><td>fb</td><td></td></tr>
 * <tr><td>KEYCODE_TV_MEDIA_CONTEXT_MENU</td><td>101</td><td></td></tr>
 * <tr><td>KEYCODE_TV_NETWORK</td><td>f1</td><td></td></tr>
 * <tr><td>KEYCODE_TV_NUMBER_ENTRY</td><td>ea</td><td></td></tr>
 * <tr><td>KEYCODE_TV_POWER</td><td>b1</td><td></td></tr>
 * <tr><td>KEYCODE_TV_RADIO_SERVICE</td><td>e8</td><td></td></tr>
 * <tr><td>KEYCODE_TV_SATELLITE</td><td>ed</td><td></td></tr>
 * <tr><td>KEYCODE_TV_SATELLITE_BS</td><td>ee</td><td></td></tr>
 * <tr><td>KEYCODE_TV_SATELLITE_CS</td><td>ef</td><td></td></tr>
 * <tr><td>KEYCODE_TV_SATELLITE_SERVICE</td><td>f0</td><td></td></tr>
 * <tr><td>KEYCODE_TV_TELETEXT</td><td>e9</td><td></td></tr>
 * <tr><td>KEYCODE_TV_TERRESTRIAL_ANALOG</td><td>eb</td><td></td></tr>
 * <tr><td>KEYCODE_TV_TERRESTRIAL_DIGITAL</td><td>ec</td><td></td></tr>
 * <tr><td>KEYCODE_TV_TIMER_PROGRAMMING</td><td>102</td><td></td></tr>
 * <tr><td>KEYCODE_TV_ZOOM_MODE</td><td>ff</td><td></td></tr>
 * <tr><td>KEYCODE_U</td><td>31</td><td></td></tr>
 * <tr><td>KEYCODE_UNKNOWN</td><td>0</td><td></td></tr>
 * <tr><td>KEYCODE_V</td><td>32</td><td></td></tr>
 * <tr><td>KEYCODE_VOICE_ASSIST</td><td>e7</td><td></td></tr>
 * <tr><td>KEYCODE_VOLUME_DOWN</td><td>19</td><td></td></tr>
 * <tr><td>KEYCODE_VOLUME_MUTE</td><td>a4</td><td></td></tr>
 * <tr><td>KEYCODE_VOLUME_UP</td><td>18</td><td></td></tr>
 * <tr><td>KEYCODE_W</td><td>33</td><td></td></tr>
 * <tr><td>KEYCODE_WINDOW</td><td>ab</td><td></td></tr>
 * <tr><td>KEYCODE_X</td><td>34</td><td></td></tr>
 * <tr><td>KEYCODE_Y</td><td>35</td><td></td></tr>
 * <tr><td>KEYCODE_YEN</td><td>d8</td><td></td></tr>
 * <tr><td>KEYCODE_Z</td><td>36</td><td></td></tr>
 * <tr><td>KEYCODE_ZENKAKU_HANKAKU</td><td>d3</td><td></td></tr>
 * <tr><td>KEYCODE_ZOOM_IN</td><td>a8</td><td></td></tr>
 * <tr><td>KEYCODE_ZOOM_OUT</td><td>a9</td><td></td></tr>
 * </table>
 */

public static final int keycode = 16842949; // 0x10100c5

/**
 * Whether the application in question should be terminated after its
 * settings have been restored during a full-system restore operation.
 * Single-package restore operations will never cause the application to
 * be shut down.  Full-system restore operations typically only occur once,
 * when the phone is first set up.  Third-party applications will not usually
 * need to use this attribute.
 * <p>The default is <code>true</code>, which means that after the application
 * has finished processing its data during a full-system restore, it will be
 * terminated.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int killAfterRestore = 16843420; // 0x101029c

/**
 * A user-legible name for the given item.  Use with the
 * application tag (to supply a default label for all application
 * components), or with the activity, receiver, service, or instrumentation
 * tag (to supply a specific label for that component).  It may also be
 * used with the intent-filter tag to supply a label to show to the
 * user when an activity is being selected based on a particular Intent.
 * <p>The given label will be used wherever the user sees information
 * about its associated component; for example, as the name of a
 * main activity that is displayed in the launcher.  You should
 * generally set this to a reference to a string resource, so that
 * it can be localized, however it is also allowed to supply a plain
 * string for quick and dirty programming.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int label = 16842753; // 0x1010001

/**
 * Specifies the id of a view for which this view serves as a label for
 * accessibility purposes. For example, a TextView before an EditText in
 * the UI usually specifies what infomation is contained in the EditText.
 * Hence, the TextView is a label for the EditText.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int labelFor = 16843718; // 0x10103c6

/**
 * Size of the text for custom keys with some text and no icon.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int labelTextSize = 16843317; // 0x1010235

/**
 * The BCP-47 Language Tag of the subtype.  This replaces
 * {@link android.R.styleable#InputMethod_Subtype_imeSubtypeLocale}.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int languageTag = 16844040; // 0x1010508

/**
 * Request that your application's processes be created with
 * a large Dalvik heap.  This applies to <em>all</em> processes
 * created for the application.  It only applies to the first
 * application loaded into a process; if using a sharedUserId
 * to allow multiple applications to use a process, they all must
 * use this option consistently or will get unpredictable results.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int largeHeap = 16843610; // 0x101035a

/**
 * Indicates whether the application supports larger screen form-factors.
 * A large screen is defined as a screen that is significantly larger
 * than a normal phone screen, and thus may require some special care
 * on the application's part to make good use of it.  An example would
 * be a VGA <em>normal density</em> screen, though even larger screens
 * are certainly possible.  An application that does not support
 * large screens will be placed as a postage stamp on such a
 * screen, so that it retains the dimensions it was originally
 * designed for.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int largeScreens = 16843398; // 0x1010286

/**
 * Starting with {@link android.os.Build.VERSION_CODES#HONEYCOMB_MR2},
 * this is the new way to specify the screens an application is
 * compatible with.  This attribute provides the maximum
 * "smallest screen width" (as per the -swNNNdp resource configuration)
 * that the application can work well on.  If this value is smaller than
 * the "smallest screen width" of the device it is running on, the
 * application will be forced in to screen compatibility mode with
 * no way for the user to turn it off. Currently the compatibility mode only
 * emulates phone screens with a 320dp width, so compatibility mode is not applied if the
 * value for largestWidthLimitDp is larger than 320.
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int largestWidthLimitDp = 16843622; // 0x1010366

/**
 * Distance from the bottom of the TextView to the last text baseline. If set, this
 * overrides the value set for paddingBottom.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int lastBaselineToBottomHeight = 16844158; // 0x101057e

/**
 * Specify how an activity should be launched.  See the
 * <a href="{@docRoot}guide/topics/fundamentals/tasks-and-back-stack.html">Tasks and Back
 * Stack</a> document for important information on how these options impact
 * the behavior of your application.
 * <p>If this attribute is not specified, <code>standard</code> launch
 * mode will be used.  Note that the particular launch behavior can
 * be changed in some ways at runtime through the
 * {@link android.content.Intent} flags
 * {@link android.content.Intent#FLAG_ACTIVITY_SINGLE_TOP},
 * {@link android.content.Intent#FLAG_ACTIVITY_NEW_TASK}, and
 * {@link android.content.Intent#FLAG_ACTIVITY_MULTIPLE_TASK}.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>singleInstance</td><td>3</td><td>Only allow one instance of this activity to ever be
 * running.  This activity gets a unique task with only itself running
 * in it; if it is ever launched again with the same Intent, then that
 * task will be brought forward and its
 * {@link android.app.Activity#onNewIntent Activity.onNewIntent()}
 * method called.  If this
 * activity tries to start a new activity, that new activity will be
 * launched in a separate task.  See the
 * <a href="{@docRoot}guide/topics/fundamentals/tasks-and-back-stack.html">Tasks and Back
 * Stack</a> document for more details about tasks.</td></tr>
 * <tr><td>singleTask</td><td>2</td><td>If, when starting the activity, there is already a task running
 * that starts with this activity, then instead of starting a new
 * instance the current task is brought to the front.  The existing
 * instance will receive a call to {@link android.app.Activity#onNewIntent
 * Activity.onNewIntent()}
 * with the new Intent that is being started, and with the
 * {@link android.content.Intent#FLAG_ACTIVITY_BROUGHT_TO_FRONT
 * Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT} flag set.  This is a superset
 * of the singleTop mode, where if there is already an instance
 * of the activity being started at the top of the stack, it will
 * receive the Intent as described there (without the
 * FLAG_ACTIVITY_BROUGHT_TO_FRONT flag set).  See the
 * <a href="{@docRoot}guide/topics/fundamentals/tasks-and-back-stack.html">Tasks and Back
 * Stack</a> document for more details about tasks.</td></tr>
 * <tr><td>singleTop</td><td>1</td><td>If, when starting the activity, there is already an
 * instance of the same activity class in the foreground that is
 * interacting with the user, then
 * re-use that instance.  This existing instance will receive a call to
 * {@link android.app.Activity#onNewIntent Activity.onNewIntent()} with
 * the new Intent that is being started.</td></tr>
 * <tr><td>standard</td><td>0</td><td>The default mode, which will usually create a new instance of
 * the activity when it is started, though this behavior may change
 * with the introduction of other options such as
 * {@link android.content.Intent#FLAG_ACTIVITY_NEW_TASK
 * Intent.FLAG_ACTIVITY_NEW_TASK}.</td></tr>
 * </table>
 */

public static final int launchMode = 16842781; // 0x101001d

/**
 * When opening an activity in a new task using Intent.FLAG_ACTIVITY_LAUNCH_BEHIND,
 * this is the animation that is run on the activity of the old task (which is
 * already on the screen and then stays on).
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int launchTaskBehindSourceAnimation = 16843922; // 0x1010492

/**
 * When opening an activity in a new task using Intent/FLAG_ACTIVITY_LAUNCH_BEHIND,
 * this is the animation that is run on the activity of the new task (which is
 * entering the screen and then leaving).
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int launchTaskBehindTargetAnimation = 16843921; // 0x1010491

/**
 * Specifies the type of layer backing this view. The default value is none.
 * Refer to {@link android.view.View#setLayerType(int, android.graphics.Paint)}
 * for more information.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>hardware</td><td>2</td><td>Use a hardware layer. Refer to
 * {@link android.view.View#setLayerType(int, android.graphics.Paint)} for
 * more information.</td></tr>
 * <tr><td>none</td><td>0</td><td>Don't use a layer.</td></tr>
 * <tr><td>software</td><td>1</td><td>Use a software layer. Refer to
 * {@link android.view.View#setLayerType(int, android.graphics.Paint)} for
 * more information.</td></tr>
 * </table>
 */

public static final int layerType = 16843604; // 0x1010354

/**
 * Supply an identifier for the layout resource to inflate when the ViewStub
 * becomes visible or when forced to do so. The layout resource must be a
 * valid reference to a layout.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int layout = 16842994; // 0x10100f2

/**
 * Defines the layout animation to use the first time the ViewGroup is laid out.
 * Layout animations can also be started manually after the first layout.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int layoutAnimation = 16842988; // 0x10100ec

/**
 * Defines the direction of layout drawing. This typically is associated with writing
 * direction of the language script used. The possible values are "ltr" for Left-to-Right,
 * "rtl" for Right-to-Left, "locale", and "inherit" from parent view. If there is nothing
 * to inherit, "locale" is used. "locale" falls back to "en-US". "ltr" is the direction
 * used in "en-US". The default for this attribute is "inherit".
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>inherit</td><td>2</td><td>Inherit from parent.</td></tr>
 * <tr><td>locale</td><td>3</td><td>Locale.</td></tr>
 * <tr><td>ltr</td><td>0</td><td>Left-to-Right.</td></tr>
 * <tr><td>rtl</td><td>1</td><td>Right-to-Left.</td></tr>
 * </table>
 */

public static final int layoutDirection = 16843698; // 0x10103b2

/**
 * Defines the layout mode of this ViewGroup.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>clipBounds</td><td>0</td><td>Use the children's clip bounds when laying out this container.</td></tr>
 * <tr><td>opticalBounds</td><td>1</td><td>Use the children's optical bounds when laying out this container.</td></tr>
 * </table>
 */

public static final int layoutMode = 16843738; // 0x10103da

/**
 * Positions the bottom edge of this view above the given anchor view ID.
 * Accommodates bottom margin of this view and top margin of anchor view.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int layout_above = 16843140; // 0x1010184

/**
 * Positions the baseline of this view on the baseline of the given anchor view ID.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int layout_alignBaseline = 16843142; // 0x1010186

/**
 * Makes the bottom edge of this view match the bottom edge of the given anchor view ID.
 * Accommodates bottom margin.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int layout_alignBottom = 16843146; // 0x101018a

/**
 * Makes the end edge of this view match the end edge of the given anchor view ID.
 * Accommodates end margin.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int layout_alignEnd = 16843706; // 0x10103ba

/**
 * Makes the left edge of this view match the left edge of the given anchor view ID.
 * Accommodates left margin.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int layout_alignLeft = 16843143; // 0x1010187

/**
 * If true, makes the bottom edge of this view match the bottom edge of the parent.
 * Accommodates bottom margin.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int layout_alignParentBottom = 16843150; // 0x101018e

/**
 * If true, makes the end edge of this view match the end edge of the parent.
 * Accommodates end margin.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int layout_alignParentEnd = 16843708; // 0x10103bc

/**
 * If true, makes the left edge of this view match the left edge of the parent.
 * Accommodates left margin.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int layout_alignParentLeft = 16843147; // 0x101018b

/**
 * If true, makes the right edge of this view match the right edge of the parent.
 * Accommodates right margin.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int layout_alignParentRight = 16843149; // 0x101018d

/**
 * If true, makes the start edge of this view match the start edge of the parent.
 * Accommodates start margin.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int layout_alignParentStart = 16843707; // 0x10103bb

/**
 * If true, makes the top edge of this view match the top edge of the parent.
 * Accommodates top margin.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int layout_alignParentTop = 16843148; // 0x101018c

/**
 * Makes the right edge of this view match the right edge of the given anchor view ID.
 * Accommodates right margin.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int layout_alignRight = 16843145; // 0x1010189

/**
 * Makes the start edge of this view match the start edge of the given anchor view ID.
 * Accommodates start margin.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int layout_alignStart = 16843705; // 0x10103b9

/**
 * Makes the top edge of this view match the top edge of the given anchor view ID.
 * Accommodates top margin.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int layout_alignTop = 16843144; // 0x1010188

/**
 * If set to true, the parent will be used as the anchor when the anchor cannot be
 * be found for layout_toLeftOf, layout_toRightOf, etc.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int layout_alignWithParentIfMissing = 16843154; // 0x1010192

/**
 * Positions the top edge of this view below the given anchor view ID.
 * Accommodates top margin of this view and bottom margin of anchor view.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int layout_below = 16843141; // 0x1010185

/**
 * If true, centers this child horizontally within its parent.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int layout_centerHorizontal = 16843152; // 0x1010190

/**
 * If true, centers this child horizontally and vertically within its parent.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int layout_centerInParent = 16843151; // 0x101018f

/**
 * If true, centers this child vertically within its parent.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int layout_centerVertical = 16843153; // 0x1010191

/**
 * The index of the column in which this child should be.
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int layout_column = 16843084; // 0x101014c

/**
 * The column span: the difference between the right and left
 * boundaries delimiting the group of cells occupied by this view.
 * The default is one.
 * See {@link android.widget.GridLayout.Spec}.
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int layout_columnSpan = 16843645; // 0x101037d

/**
 * The relative proportion of horizontal space that should be allocated to this view
 * during excess space distribution.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 */

public static final int layout_columnWeight = 16843865; // 0x1010459

/**
 * Standard gravity constant that a child supplies to its parent.
 * Defines how the child view should be positioned, on both the X and Y axes, within its enclosing layout.
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
 * <tr><td>center</td><td>11</td><td>Place the object in the center of its container in both the vertical and horizontal axis, not changing its size.</td></tr>
 * <tr><td>center_horizontal</td><td>1</td><td>Place object in the horizontal center of its container, not changing its size.</td></tr>
 * <tr><td>center_vertical</td><td>10</td><td>Place object in the vertical center of its container, not changing its size.</td></tr>
 * <tr><td>clip_horizontal</td><td>8</td><td>Additional option that can be set to have the left and/or right edges of
 * the child clipped to its container's bounds.
 * The clip will be based on the horizontal gravity: a left gravity will clip the right
 * edge, a right gravity will clip the left edge, and neither will clip both edges.</td></tr>
 * <tr><td>clip_vertical</td><td>80</td><td>Additional option that can be set to have the top and/or bottom edges of
 * the child clipped to its container's bounds.
 * The clip will be based on the vertical gravity: a top gravity will clip the bottom
 * edge, a bottom gravity will clip the top edge, and neither will clip both edges.</td></tr>
 * <tr><td>end</td><td>800005</td><td>Push object to the end of its container, not changing its size.</td></tr>
 * <tr><td>fill</td><td>77</td><td>Grow the horizontal and vertical size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>fill_horizontal</td><td>7</td><td>Grow the horizontal size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>fill_vertical</td><td>70</td><td>Grow the vertical size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>left</td><td>3</td><td>Push object to the left of its container, not changing its size.</td></tr>
 * <tr><td>right</td><td>5</td><td>Push object to the right of its container, not changing its size.</td></tr>
 * <tr><td>start</td><td>800003</td><td>Push object to the beginning of its container, not changing its size.</td></tr>
 * <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
 * </table>
 */

public static final int layout_gravity = 16842931; // 0x10100b3

/**
 * Specifies the basic height of the view.  This is a required attribute
 * for any view inside of a containing layout manager.  Its value may
 * be a dimension (such as "12dip") for a constant height or one of
 * the special constants.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>fill_parent</td><td>ffffffff</td><td>The view should be as big as its parent (minus padding).
 * This constant is deprecated starting from API Level 8 and
 * is replaced by {@code match_parent}.</td></tr>
 * <tr><td>match_parent</td><td>ffffffff</td><td>The view should be as big as its parent (minus padding).
 * Introduced in API Level 8.</td></tr>
 * <tr><td>wrap_content</td><td>fffffffe</td><td>The view should be only big enough to enclose its content (plus padding).</td></tr>
 * </table>
 */

public static final int layout_height = 16842997; // 0x10100f5

/**
 * Specifies extra space on the left, top, right and bottom
 * sides of this view.  If both layout_margin and any of layout_marginLeft,
 * layout_marginRight, layout_marginStart, layout_marginEnd,
 * layout_marginTop, and layout_marginBottom are
 * also specified, the layout_margin value will take precedence over the
 * edge-specific values. This space is outside this view's bounds.
 * Margin values should be positive.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int layout_margin = 16842998; // 0x10100f6

/**
 * Specifies extra space on the bottom side of this view.
 * This space is outside this view's bounds.
 * Margin values should be positive.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int layout_marginBottom = 16843002; // 0x10100fa

/**
 * Specifies extra space on the end side of this view.
 * This space is outside this view's bounds.
 * Margin values should be positive.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int layout_marginEnd = 16843702; // 0x10103b6

/**
 * Specifies extra space on the left and right sides of this view.
 * Specifying layout_marginHorizontal is equivalent to specifying
 * layout_marginLeft and layout_marginRight.
 * If both layout_marginHorizontal and either/both of layout_marginLeft
 * and layout_marginRight are also specified, the layout_marginHorizontal
 * value will take precedence over the
 * edge-specific values. Also, layout_margin will always take precedence over
 * any of these values, including layout_marginHorizontal.
 * This space is outside this view's bounds.
 * Margin values should be positive.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int layout_marginHorizontal = 16844091; // 0x101053b

/**
 * Specifies extra space on the left side of this view.
 * This space is outside this view's bounds.
 * Margin values should be positive.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int layout_marginLeft = 16842999; // 0x10100f7

/**
 * Specifies extra space on the right side of this view.
 * This space is outside this view's bounds.
 * Margin values should be positive.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int layout_marginRight = 16843001; // 0x10100f9

/**
 * Specifies extra space on the start side of this view.
 * This space is outside this view's bounds.
 * Margin values should be positive.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int layout_marginStart = 16843701; // 0x10103b5

/**
 * Specifies extra space on the top side of this view.
 * This space is outside this view's bounds.
 * Margin values should be positive.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int layout_marginTop = 16843000; // 0x10100f8

/**
 * Specifies extra space on the top and bottom sides of this view.
 * Specifying layout_marginVertical is equivalent to specifying
 * layout_marginTop and layout_marginBottom with that same value.
 * If both layout_marginVertical and either/both of layout_marginTop and
 * layout_marginBottom are also specified, the layout_marginVertical value
 * will take precedence over the edge-specific values.
 * Also, layout_margin will always take precedence over
 * any of these values, including layout_marginVertical.
 * This space is outside this view's bounds.
 * Margin values should be positive.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int layout_marginVertical = 16844092; // 0x101053c

/**
 * The row boundary delimiting the top of the group of cells
 * occupied by this view.
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int layout_row = 16843643; // 0x101037b

/**
 * The row span: the difference between the top and bottom
 * boundaries delimiting the group of cells occupied by this view.
 * The default is one.
 * See {@link android.widget.GridLayout.Spec}.
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int layout_rowSpan = 16843644; // 0x101037c

/**
 * The relative proportion of vertical space that should be allocated to this view
 * during excess space distribution.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 */

public static final int layout_rowWeight = 16843864; // 0x1010458

/**
 * <p>May be a floating point value, such as "<code>1.2</code>".
 */

public static final int layout_scale = 16843155; // 0x1010193

/**
 * Defines how many columns this child should span.  Must be >= 1.
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int layout_span = 16843085; // 0x101014d

/**
 * Positions the start edge of this view to the end of the given anchor view ID.
 * Accommodates start margin of this view and end margin of anchor view.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int layout_toEndOf = 16843704; // 0x10103b8

/**
 * Positions the right edge of this view to the left of the given anchor view ID.
 * Accommodates right margin of this view and left margin of anchor view.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int layout_toLeftOf = 16843138; // 0x1010182

/**
 * Positions the left edge of this view to the right of the given anchor view ID.
 * Accommodates left margin of this view and right margin of anchor view.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int layout_toRightOf = 16843139; // 0x1010183

/**
 * Positions the end edge of this view to the start of the given anchor view ID.
 * Accommodates end margin of this view and start margin of anchor view.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int layout_toStartOf = 16843703; // 0x10103b7

/**
 * Indicates how much of the extra space in the LinearLayout is
 * allocated to the view associated with these LayoutParams. Specify
 * 0 if the view should not be stretched. Otherwise the extra pixels
 * will be pro-rated among all views whose weight is greater than 0.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 */

public static final int layout_weight = 16843137; // 0x1010181

/**
 * Specifies the basic width of the view.  This is a required attribute
 * for any view inside of a containing layout manager.  Its value may
 * be a dimension (such as "12dip") for a constant width or one of
 * the special constants.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>fill_parent</td><td>ffffffff</td><td>The view should be as big as its parent (minus padding).
 * This constant is deprecated starting from API Level 8 and
 * is replaced by {@code match_parent}.</td></tr>
 * <tr><td>match_parent</td><td>ffffffff</td><td>The view should be as big as its parent (minus padding).
 * Introduced in API Level 8.</td></tr>
 * <tr><td>wrap_content</td><td>fffffffe</td><td>The view should be only big enough to enclose its content (plus padding).</td></tr>
 * </table>
 */

public static final int layout_width = 16842996; // 0x10100f4

/**
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int layout_x = 16843135; // 0x101017f

/**
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int layout_y = 16843136; // 0x1010180

/**
 * Amount of left padding inside the gradient shape.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int left = 16843181; // 0x10101ad

/**
 * Text letter-spacing.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 */

public static final int letterSpacing = 16843958; // 0x10104b6

/**
 * Specifies the initial drawable level in the range 0 to 10000.
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int level = 16844032; // 0x1010500

/**
 * Explicit height between lines of text. If set, this will override the values set
 * for lineSpacingExtra and lineSpacingMultiplier.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int lineHeight = 16844159; // 0x101057f

/**
 * Extra spacing between lines of text. The value will not be applied for the last
 * line of text.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int lineSpacingExtra = 16843287; // 0x1010217

/**
 * Extra spacing between lines of text, as a multiplier. The value will not be applied
 * for the last line of text.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 */

public static final int lineSpacingMultiplier = 16843288; // 0x1010218

/**
 * Makes the TextView be exactly this many lines tall.
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int lines = 16843092; // 0x1010154

/**
 * If set to false, keeps the movement method from being set
 * to the link movement method even if autoLink causes links
 * to be found.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int linksClickable = 16842929; // 0x10100b1

/**
 * Drawable used as a background for selected list items.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int listChoiceBackgroundIndicator = 16843504; // 0x10102f0

/**
 * Drawable to use for multiple choice indicators.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int listChoiceIndicatorMultiple = 16843290; // 0x101021a

/**
 * Drawable to use for single choice indicators.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int listChoiceIndicatorSingle = 16843289; // 0x1010219

/**
 * The drawable for the list divider.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int listDivider = 16843284; // 0x1010214

/**
 * The list divider used in alert dialogs.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int listDividerAlertDialog = 16843525; // 0x1010305

/**
 * Default menu-style ListView style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int listMenuViewStyle = 16844018; // 0x10104f2

/**
 * Default ListPopupWindow style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int listPopupWindowStyle = 16843519; // 0x10102ff

/**
 * The preferred list item height.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int listPreferredItemHeight = 16842829; // 0x101004d

/**
 * A larger, more robust list item height.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int listPreferredItemHeightLarge = 16843654; // 0x1010386

/**
 * A smaller, sleeker list item height.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int listPreferredItemHeightSmall = 16843655; // 0x1010387

/**
 * The preferred padding along the end edge of list items.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int listPreferredItemPaddingEnd = 16843710; // 0x10103be

/**
 * The preferred padding along the left edge of list items.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int listPreferredItemPaddingLeft = 16843683; // 0x10103a3

/**
 * The preferred padding along the right edge of list items.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int listPreferredItemPaddingRight = 16843684; // 0x10103a4

/**
 * The preferred padding along the start edge of list items.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int listPreferredItemPaddingStart = 16843709; // 0x10103bd

/**
 * Drawable used to indicate the currently selected item in the list.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int listSelector = 16843003; // 0x10100fb

/**
 * TextView style for list separators.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int listSeparatorTextViewStyle = 16843272; // 0x1010208

/**
 * Default ListView style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int listViewStyle = 16842868; // 0x1010074

/**
 * ListView with white background.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int listViewWhiteStyle = 16842869; // 0x1010075

/**
 * This value indicates how tasks rooted at this activity will behave in lockTask mode.
 * While in lockTask mode the system will not launch non-permitted tasks until
 * lockTask mode is disabled.
 * <p>While in lockTask mode with multiple permitted tasks running, each launched task is
 * permitted to finish, transitioning to the previous locked task, until there is only one
 * task remaining. At that point the last task running is not permitted to finish, unless it
 * uses the value always.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>always</td><td>2</td><td>Tasks rooted at this activity will always launch into lockTask mode. If the system is
 * already in lockTask mode when this task is launched then the new task will be launched
 * on top of the current task. Tasks launched in this mode are capable of exiting
 * lockTask mode using {@link android.app.Activity#finish()}.
 * <p>Note: This mode is only available to system and privileged applications.
 * Non-privileged apps with this value will be treated as normal.</td></tr>
 * <tr><td>if_whitelisted</td><td>3</td><td>If the DevicePolicyManager (DPM) authorizes this package ({@link
 * android.app.admin.DevicePolicyManager#setLockTaskPackages}) then this mode is
 * identical to always, except that the activity needs to call
 * {@link android.app.Activity#stopLockTask} before being able to finish if it is the last
 * locked task.
 * If the DPM does not authorize this package then this mode is identical to normal.</td></tr>
 * <tr><td>never</td><td>1</td><td>Tasks will not launch into lockTask mode and cannot be placed there using
 * {@link android.app.Activity#startLockTask} or be pinned from the Overview screen.
 * If the system is already in lockTask mode when a new task rooted at this activity is
 * launched that task will not be started.
 * <p>Note: This mode is only available to system and privileged applications.
 * Non-privileged apps with this value will be treated as normal.</td></tr>
 * <tr><td>normal</td><td>0</td><td>This is the default value. Tasks will not launch into lockTask mode but can be
 * placed there by calling {@link android.app.Activity#startLockTask}. If a task with
 * this mode has been whitelisted using {@link
 * android.app.admin.DevicePolicyManager#setLockTaskPackages} then calling
 * {@link android.app.Activity#startLockTask} will enter lockTask mode immediately,
 * otherwise the user will be presented with a dialog to approve entering pinned mode.
 * <p>If the system is already in lockTask mode when a new task rooted at this activity
 * is launched that task will or will not start depending on whether the package of this
 * activity has been whitelisted.
 * <p>Tasks rooted at this activity can only exit lockTask mode using
 * {@link android.app.Activity#stopLockTask}.</td></tr>
 * </table>
 */

public static final int lockTaskMode = 16844013; // 0x10104ed

/**
 * A Drawable resource providing an extended graphical logo for its
 * associated item. Use with the application tag (to supply a default
 * logo for all application components), or with the activity, receiver,
 * service, or instrumentation tag (to supply a specific logo for that
 * component). It may also be used with the intent-filter tag to supply
 * a logo to show to the user when an activity is being selected based
 * on a particular Intent.
 * <p>The given logo will be used to display to the user a graphical
 * representation of its associated component; for example as the
 * header in the Action Bar. The primary differences between an icon
 * and a logo are that logos are often wider and more detailed, and are
 * used without an accompanying text caption. This must be a reference
 * to a Drawable resource containing the image definition.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int logo = 16843454; // 0x10102be

/**
 * A content description string to describe the appearance of the
 * associated logo image.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int logoDescription = 16844009; // 0x10104e9

/**
 * Defines whether this view reacts to long click events.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int longClickable = 16842982; // 0x10100e6

/**
 * Defines whether the animator loops to the first view once it
 * has reached the end of the list.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int loopViews = 16843527; // 0x1010307

/**
 * Name of the activity to be launched to manage application's space on
 * device. The specified activity gets automatically launched when the
 * application's space needs to be managed and is usually invoked
 * through user actions. Applications can thus provide their own custom
 * behavior for managing space for various scenarios like out of memory
 * conditions. This is an optional attribute and
 * applications can choose not to specify a default activity to
 * manage space.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int manageSpaceActivity = 16842756; // 0x1010004

/**
 * Default MapView style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int mapViewStyle = 16842890; // 0x101008a

/**
 * The number of times to repeat the marquee animation. Only applied if the
 * TextView has marquee enabled.
 * <p>May be an integer value, such as "<code>100</code>".
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>marquee_forever</td><td>ffffffff</td><td>Indicates that marquee should repeat indefinitely.</td></tr>
 * </table>
 */

public static final int marqueeRepeatLimit = 16843293; // 0x101021d

/**
 * The match order to use for the transition. This is a comma-separated
 * list of values, containing one or more of the following:
 * id, itemId, name, instance. These correspond to
 * {@link android.transition.Transition#MATCH_ID},
 * {@link android.transition.Transition#MATCH_ITEM_ID},
 * {@link android.transition.Transition#MATCH_NAME}, and
 * {@link android.transition.Transition#MATCH_INSTANCE}, respectively.
 * This corresponds to {@link android.transition.Transition#setMatchOrder(int...)}.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int matchOrder = 16843855; // 0x101044f

/**
 * Defines the maximum value.
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int max = 16843062; // 0x1010136

/**
 * This value indicates the maximum aspect ratio the activity supports. If the app runs on a
 * device with a wider aspect ratio, the system automatically letterboxes the app, leaving
 * portions of the screen unused so the app can run at its specified maximum aspect ratio.
 * <p>
 * Maximum aspect ratio, expressed as (longer dimension / shorter dimension) in decimal
 * form. For example, if the maximum aspect ratio is 7:3, set value to 2.33.
 * <p>
 * Value needs to be greater or equal to 1.0, otherwise it is ignored.
 * <p>
 * NOTE: This attribute is ignored if the activity has
 * {@link android.R.attr#resizeableActivity} set to true, since that means your activity
 * supports any size.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 */

public static final int maxAspectRatio = 16844128; // 0x1010560

/**
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int maxButtonHeight = 16844029; // 0x10104fd

/**
 * The maximal date shown by this calendar view in mm/dd/yyyy format.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int maxDate = 16843584; // 0x1010340

/**
 * Makes the TextView be at most this many ems wide.
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int maxEms = 16843095; // 0x1010157

/**
 * An optional argument to supply a maximum height for this view.
 * See {see android.widget.ImageView#setMaxHeight} for details.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int maxHeight = 16843040; // 0x1010120

/**
 * Defines the maximum number of items per row.
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int maxItemsPerRow = 16843060; // 0x1010134

/**
 * Set an input filter to constrain the text length to the
 * specified number.
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int maxLength = 16843104; // 0x1010160

/**
 * The maximum level allowed for this item.
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int maxLevel = 16843186; // 0x10101b2

/**
 * Makes the TextView be at most this many lines tall.
 * When used on an editable text, the <code>inputType</code> attribute's value must be
 * combined with the <code>textMultiLine</code> flag for the maxLines attribute to apply.
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int maxLines = 16843091; // 0x1010153

/**
 * The max version code of the package for which compatibility mode is
 * requested. This corresponds to the long value returned by {@link
 * android.content.pm.PackageInfo#getLongVersionCode()} for the target package.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int maxLongVersionCode = 16844163; // 0x1010583

/**
 * The maximum number of entries of tasks rooted at this activity in the recent task list.
 * When this number of entries is reached the least recently used instance of this activity
 * will be removed from recents. The value will be clamped between 1 and 100 inclusive.
 * The default value for this if it is not specified is 15.
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int maxRecents = 16843846; // 0x1010446

/**
 * Defines the maximum number of rows displayed.
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int maxRows = 16843059; // 0x1010133

/**
 * Optional: specify the maximum version of the Android OS for which the
 * application wishes to request the permission.  When running on a version
 * of Android higher than the number given here, the permission will not
 * be requested.
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int maxSdkVersion = 16843377; // 0x1010271

/**
 * An optional argument to supply a maximum width for this view.
 * See {see android.widget.ImageView#setMaxWidth} for details.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int maxWidth = 16843039; // 0x101011f

/**
 * The maximum arc angle in degrees between the start and end points.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 */

public static final int maximumAngle = 16843903; // 0x101047f

/**
 * Determines whether to measure all children or just those in
 * the VISIBLE or INVISIBLE state when measuring. Defaults to false.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int measureAllChildren = 16843018; // 0x101010a

/**
 * When set to true, all children with a weight will be considered having
 * the minimum size of the largest child. If false, all children are
 * measured normally.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int measureWithLargestChild = 16843476; // 0x10102d4

/**
 * Default style for the MediaRouteButton widget.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int mediaRouteButtonStyle = 16843693; // 0x10103ad

/**
 * The types of media routes the button and its resulting
 * chooser will filter by.
 * <p>May be an integer value, such as "<code>100</code>".
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>liveAudio</td><td>1</td><td>Allow selection of live audio routes.</td></tr>
 * <tr><td>user</td><td>800000</td><td>Allow selection of user (app-specified) routes.</td></tr>
 * </table>
 */

public static final int mediaRouteTypes = 16843694; // 0x10103ae

/**
 * The category applied to all items within this group.
 * (This will be or'ed with the orderInCategory attribute.)
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>alternative</td><td>40000</td><td>Items are alternative actions.</td></tr>
 * <tr><td>container</td><td>10000</td><td>Items are part of a container.</td></tr>
 * <tr><td>secondary</td><td>30000</td><td>Items are user-supplied secondary (infrequently used).</td></tr>
 * <tr><td>system</td><td>20000</td><td>Items are provided by the system.</td></tr>
 * </table>
 */

public static final int menuCategory = 16843230; // 0x10101de

/**
 * Specify a MIME type that is handled, as per
 * {@link android.content.IntentFilter#addDataType
 * IntentFilter.addDataType()}.
 * <p><em>Note: MIME type matching in the Android framework is
 * case-sensitive, unlike formal RFC MIME types.  As a result,
 * MIME types here should always use lower case letters.</em></p>
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int mimeType = 16842790; // 0x1010026

/**
 * Defines the minimum value.
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int min = 16844089; // 0x1010539

/**
 * The minimal date shown by this calendar view in mm/dd/yyyy format.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int minDate = 16843583; // 0x101033f

/**
 * Makes the TextView be at least this many ems wide.
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int minEms = 16843098; // 0x101015a

/**
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int minHeight = 16843072; // 0x1010140

/**
 * The minimum level allowed for this item.
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int minLevel = 16843185; // 0x10101b1

/**
 * Makes the TextView be at least this many lines tall.
 * When used on an editable text, the <code>inputType</code> attribute's value must be
 * combined with the <code>textMultiLine</code> flag for the minLines attribute to apply.
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int minLines = 16843094; // 0x1010156

/**
 * Minimum height that the AppWidget can be resized to.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int minResizeHeight = 16843670; // 0x1010396

/**
 * Minimum width that the AppWidget can be resized to.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int minResizeWidth = 16843669; // 0x1010395

/**
 * This is the minimum SDK version number that the application
 * requires.  This number is an abstract integer, from the list
 * in {@link android.os.Build.VERSION_CODES}  If
 * not supplied, the application will work on any SDK.  This
 * may also be string (such as "Donut") if the application was built
 * against a development branch, in which case it will only work against
 * the development builds.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int minSdkVersion = 16843276; // 0x101020c

/**
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int minWidth = 16843071; // 0x101013f

/**
 * The minimum arc angle in degrees between the start and end points when
 * they are close to horizontal.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 */

public static final int minimumHorizontalAngle = 16843901; // 0x101047d

/**
 * The minimum arc angle in degrees between the start and end points when
 * they are close to vertical.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 */

public static final int minimumVerticalAngle = 16843902; // 0x101047e

/**
 * Enables or disables the mipmap hint. See
 * {@link android.graphics.Bitmap#setHasMipMap(boolean)} for more information.
 * Default value is false.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int mipMap = 16843725; // 0x10103cd

/**
 * Defines if the associated drawables need to be mirrored when in RTL mode.
 * Default is false.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int mirrorForRtl = 16843726; // 0x10103ce

/**
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>collapsing</td><td>2</td><td>When selected show both lines, otherwise show only the first line.
 * This is the default mode.</td></tr>
 * <tr><td>oneLine</td><td>1</td><td>Always show only the first line.</td></tr>
 * <tr><td>twoLine</td><td>3</td><td>Always show both lines.</td></tr>
 * </table>
 */

public static final int mode = 16843134; // 0x101017e

/**
 * 'More' icon.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int moreIcon = 16843061; // 0x1010135

/**
 * Declare that code from this application will need to be loaded into other
 * applications' processes. On devices that support multiple instruction sets,
 * this implies the code might be loaded into a process that's using any of the devices
 * supported instruction sets.
 * <p> The system might treat such applications specially, for eg., by
 * extracting the application's native libraries for all supported instruction
 * sets or by compiling the application's dex code for all supported instruction
 * sets.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int multiArch = 16843918; // 0x101048e

/**
 * Specify whether a component is allowed to have multiple instances
 * of itself running in different processes.  Use with the activity
 * and provider tags.
 * <p>Normally the system will ensure that all instances of a particular
 * component are only running in a single process.  You can use this
 * attribute to disable that behavior, allowing the system to create
 * instances wherever they are used (provided permissions allow it).
 * This is most often used with content providers, so that instances
 * of a provider can be created in each client process, allowing them
 * to be used without performing IPC.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int multiprocess = 16842771; // 0x1010013

/**
 * A unique name for the given item.  This must use a Java-style naming
 * convention to ensure the name is unique, for example
 * "com.mycompany.MyName".
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int name = 16842755; // 0x1010003

/**
 * The color for the navigation bar. If the color is not opaque, consider setting
 * {@link android.view.View#SYSTEM_UI_FLAG_LAYOUT_STABLE} and
 * {@link android.view.View#SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION}.
 * For this to take effect, the window must be drawing the system bar backgrounds with
 * {@link android.R.attr#windowDrawsSystemBarBackgrounds} and the navigation bar must not
 * have been requested to be translucent with
 * {@link android.R.attr#windowTranslucentNavigation}.
 * Corresponds to {@link android.view.Window#setNavigationBarColor(int)}.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int navigationBarColor = 16843858; // 0x1010452

/**
 * Shows a thin line of the specified color between the navigation bar and the app
 * content.
 * <p>For this to take effect, the window must be drawing the system bar backgrounds with
 * {@link android.R.attr#windowDrawsSystemBarBackgrounds} and the navigation bar must not
 * have been requested to be translucent with
 * {@link android.R.attr#windowTranslucentNavigation}.
 * Corresponds to {@link android.view.Window#setNavigationBarDividerColor(int)}.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int navigationBarDividerColor = 16844141; // 0x101056d

/**
 * Text to set as the content description for the navigation button
 * located at the start of the toolbar.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int navigationContentDescription = 16843969; // 0x10104c1

/**
 * Icon drawable to use for the navigation button located at
 * the start of the toolbar.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int navigationIcon = 16843968; // 0x10104c0

/**
 * The type of navigation to use.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>listMode</td><td>1</td><td>The action bar will use a selection list for navigation.</td></tr>
 * <tr><td>normal</td><td>0</td><td>Normal static title text.</td></tr>
 * <tr><td>tabMode</td><td>2</td><td>The action bar will use a series of horizontal tabs for navigation.</td></tr>
 * </table>
 */

public static final int navigationMode = 16843471; // 0x10102cf

/**
 * The negative button text for the dialog. Set to @null to hide the negative button.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int negativeButtonText = 16843254; // 0x10101f6

/**
 * Specifies that this view should permit nested scrolling within a compatible
 * ancestor view.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int nestedScrollingEnabled = 16843830; // 0x1010436

/**
 * An XML resource with the application's Network Security Config.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int networkSecurityConfig = 16844071; // 0x1010527

/**
 * Defines the next keyboard navigation cluster.
 * If the reference refers to a view that does not exist or is part
 * of a hierarchy that is invisible, a {@link java.lang.RuntimeException}
 * will result when the reference is accessed.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int nextClusterForward = 16844098; // 0x1010542

/**
 * Defines the next view to give focus to when the next focus is
 * {@link android.view.View#FOCUS_DOWN}
 * If the reference refers to a view that does not exist or is part
 * of a hierarchy that is invisible, a {@link java.lang.RuntimeException}
 * will result when the reference is accessed.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int nextFocusDown = 16842980; // 0x10100e4

/**
 * Defines the next view to give focus to when the next focus is
 * {@link android.view.View#FOCUS_FORWARD}
 * If the reference refers to a view that does not exist or is part
 * of a hierarchy that is invisible, a {@link java.lang.RuntimeException}
 * will result when the reference is accessed.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int nextFocusForward = 16843580; // 0x101033c

/**
 * Defines the next view to give focus to when the next focus is
 * {@link android.view.View#FOCUS_LEFT}.
 * If the reference refers to a view that does not exist or is part
 * of a hierarchy that is invisible, a {@link java.lang.RuntimeException}
 * will result when the reference is accessed.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int nextFocusLeft = 16842977; // 0x10100e1

/**
 * Defines the next view to give focus to when the next focus is
 * {@link android.view.View#FOCUS_RIGHT}
 * If the reference refers to a view that does not exist or is part
 * of a hierarchy that is invisible, a {@link java.lang.RuntimeException}
 * will result when the reference is accessed.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int nextFocusRight = 16842978; // 0x10100e2

/**
 * Defines the next view to give focus to when the next focus is
 * {@link android.view.View#FOCUS_UP}
 * If the reference refers to a view that does not exist or is part
 * of a hierarchy that is invisible, a {@link java.lang.RuntimeException}
 * will result when the reference is accessed.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int nextFocusUp = 16842979; // 0x10100e3

/**
 * Specify whether an activity should be kept in its history stack.
 * If this attribute is set, then as soon as the user navigates away
 * from the activity it will be finished and they will no longer be
 * able to return to it.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int noHistory = 16843309; // 0x101022d

/**
 * Indicates whether an application supports the normal screen
 * form-factors.  Traditionally this is an HVGA normal density
 * screen, but WQVGA low density and WVGA high density are also
 * considered to be normal.  This attribute is true by default,
 * and applications currently should leave it that way.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int normalScreens = 16843397; // 0x1010285

/**
 * The minimal period in milliseconds between two accessibility events of the same type
 * are sent to this service. This setting can be changed at runtime by calling
 * {@link android.accessibilityservice.AccessibilityService#setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)
 * android.accessibilityservice.AccessibilityService.setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)}.
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int notificationTimeout = 16843651; // 0x1010383

/**
 * Defines how many columns to show.
 * <p>May be an integer value, such as "<code>100</code>".
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>auto_fit</td><td>ffffffff</td><td>Display as many columns as possible to fill the available space.</td></tr>
 * </table>
 */

public static final int numColumns = 16843032; // 0x1010118

/**
 * The number of stars (or rating items) to show.
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int numStars = 16843076; // 0x1010144

/**
 * NumberPicker style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int numberPickerStyle = 16844068; // 0x1010524

/**
 * The background color for the hours/minutes numbers.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int numbersBackgroundColor = 16843938; // 0x10104a2

/**
 * The color for the inner hours numbers used in 24-hour mode. This
 * should be a color state list where the activated state will be
 * used when the number is active.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int numbersInnerTextColor = 16844001; // 0x10104e1

/**
 * The color for the hours/minutes selector.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int numbersSelectorColor = 16843939; // 0x10104a3

/**
 * The color for the hours/minutes numbers. This should be a color
 * state list where the activated state will be used when the number
 * is active.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int numbersTextColor = 16843937; // 0x10104a1

/**
 * If set, specifies that this TextView has a numeric input method.
 * The default is false.
 * {@deprecated Use inputType instead.}
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>decimal</td><td>5</td><td>Input is numeric, with decimals allowed.</td></tr>
 * <tr><td>integer</td><td>1</td><td>Input is numeric.</td></tr>
 * <tr><td>signed</td><td>3</td><td>Input is numeric, with sign allowed.</td></tr>
 * </table>
 */

@Deprecated public static final int numeric = 16843109; // 0x1010165

/**
 * The numeric modifier key. This is the modifier when using a numeric (for example,
 * 12-key) keyboard. The values should be kept in sync with KeyEvent
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>ALT</td><td>2</td><td></td></tr>
 * <tr><td>CTRL</td><td>1000</td><td></td></tr>
 * <tr><td>FUNCTION</td><td>8</td><td></td></tr>
 * <tr><td>META</td><td>10000</td><td></td></tr>
 * <tr><td>SHIFT</td><td>1</td><td></td></tr>
 * <tr><td>SYM</td><td>4</td><td></td></tr>
 * </table>
 */

public static final int numericModifiers = 16844111; // 0x101054f

/**
 * The numeric shortcut key.  This is the shortcut when using a numeric (for example,
 * 12-key) keyboard.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int numericShortcut = 16843236; // 0x10101e4

/**
 * The offset (or ratio) of this current color item inside the gradient.
 * The value is only meaningful when it is between 0 and 1.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 */

public static final int offset = 16844052; // 0x1010514

/**
 * Name of the method in this View's context to invoke when the view is
 * clicked. This name must correspond to a public method that takes
 * exactly one parameter of type View. For instance, if you specify
 * <code>android:onClick="sayHello"</code>, you must declare a
 * <code>public void sayHello(View v)</code> method of your context
 * (typically, your Activity).
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int onClick = 16843375; // 0x101026f

/**
 * If true, the animation will only run a single time and then
 * stop.  If false (the default), it will continually run,
 * restarting at the first frame after the last has finished.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int oneshot = 16843159; // 0x1010197

/**
 * Indicates the opacity of the layer. This can be useful to allow the
 * system to enable drawing optimizations. The default value is
 * translucent.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>opaque</td><td>ffffffff</td><td>Indicates that the layer is opaque and contains no transparent
 * nor translucent pixels.</td></tr>
 * <tr><td>translucent</td><td>fffffffd</td><td>The layer has translucent pixels.</td></tr>
 * <tr><td>transparent</td><td>fffffffe</td><td>The layer is completely transparent (no pixel will be drawn).</td></tr>
 * </table>
 */

public static final int opacity = 16843550; // 0x101031e

/**
 * The order for the Preference (lower values are to be ordered first). If this is not
 * specified, the default ordering will be alphabetic.
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int order = 16843242; // 0x10101ea

/**
 * The order within the category applied to all items within this group.
 * (This will be or'ed with the category attribute.)
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int orderInCategory = 16843231; // 0x10101df

/**
 * Name of the property being animated.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>sequentially</td><td>1</td><td>child animations should be played sequentially, in the same order as the xml.</td></tr>
 * <tr><td>together</td><td>0</td><td>child animations should be played together.</td></tr>
 * </table>
 */

public static final int ordering = 16843490; // 0x10102e2

/**
 * Whether to order the Preference under this group as they appear in the XML file.
 * If this is false, the ordering will follow the Preference order attribute and
 * default to alphabetic for those without the order attribute.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int orderingFromXml = 16843239; // 0x10101e7

/**
 * Standard orientation constant.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>horizontal</td><td>0</td><td>Defines an horizontal widget.</td></tr>
 * <tr><td>vertical</td><td>1</td><td>Defines a vertical widget.</td></tr>
 * </table>
 */

public static final int orientation = 16842948; // 0x10100c4

/**
 * Identifier for the animation to use when a view is hidden.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int outAnimation = 16843128; // 0x1010178

/**
 * Sets the color of the ambient shadow that is drawn when the view has a positive Z
 * or elevation value.
 * <p>
 * By default the shadow color is black. Generally, this color will be opaque so the
 * intensity of the shadow is consistent between different views with different colors.
 * <p>
 * The opacity of the final ambient shadow is a function of the shadow caster height,
 * the alpha channel of the outlineAmbientShadowColor (typically opaque), and the
 * {@link android.R.attr#ambientShadowAlpha} theme attribute.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int outlineAmbientShadowColor = 16844162; // 0x1010582

/**
 * ViewOutlineProvider used to determine the View's Outline.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>background</td><td>0</td><td>Default, background drawable-driven outline.</td></tr>
 * <tr><td>bounds</td><td>2</td><td>Generates an opaque outline for the bounds of the view.</td></tr>
 * <tr><td>none</td><td>1</td><td>No outline provider.</td></tr>
 * <tr><td>paddedBounds</td><td>3</td><td>Generates an opaque outline for the padded bounds of the view.</td></tr>
 * </table>
 */

public static final int outlineProvider = 16843960; // 0x10104b8

/**
 * Sets the color of the spot shadow that is drawn when the view has a positive Z or
 * elevation value.
 * <p>
 * By default the shadow color is black. Generally, this color will be opaque so the
 * intensity of the shadow is consistent between different views with different colors.
 * <p>
 * The opacity of the final spot shadow is a function of the shadow caster height, the
 * alpha channel of the outlineSpotShadowColor (typically opaque), and the
 * {@link android.R.attr#spotShadowAlpha} theme attribute.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int outlineSpotShadowColor = 16844161; // 0x1010581

/**
 * Drawable to draw below list content.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int overScrollFooter = 16843459; // 0x10102c3

/**
 * Drawable to draw above list content.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int overScrollHeader = 16843458; // 0x10102c2

/**
 * Defines over-scrolling behavior. This property is used only if the
 * View is scrollable. Over-scrolling is the ability for the user to
 * receive feedback when attempting to scroll beyond meaningful content.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>always</td><td>0</td><td>Always show over-scroll effects, even if the content fits entirely
 * within the available space.</td></tr>
 * <tr><td>ifContentScrolls</td><td>1</td><td>Only show over-scroll effects if the content is large
 * enough to meaningfully scroll.</td></tr>
 * <tr><td>never</td><td>2</td><td>Never show over-scroll effects.</td></tr>
 * </table>
 */

public static final int overScrollMode = 16843457; // 0x10102c1

/**
 * Whether the popup window should overlap its anchor view.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int overlapAnchor = 16843874; // 0x1010462

/**
 * Set true when this subtype should be selected by default if no other subtypes are
 * selected explicitly. Note that a subtype with this parameter being true will
 * not be shown in the subtypes list.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int overridesImplicitlyEnabledSubtype = 16843682; // 0x10103a2

/**
 * Comma separated package names from which this service would like to receive events (leave out for all packages).
 * {@link android.accessibilityservice.AccessibilityService#setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)
 * android.accessibilityservice.AccessibilityService.setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)}.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int packageNames = 16843649; // 0x1010381

/**
 * Sets the padding, in pixels, of all four edges. Padding is defined as
 * space between the edges of the view and the view's content. This value will take
 * precedence over any of the edge-specific values (paddingLeft, paddingTop,
 * paddingRight, paddingBottom, paddingHorizontal and paddingVertical), but will
 * not override paddingStart or paddingEnd, if set. A view's size
 * will include its padding. If a {@link android.R.attr#background}
 * is provided, the padding will initially be set to that (0 if the
 * drawable does not have padding). Explicitly setting a padding value
 * will override the corresponding padding found in the background.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int padding = 16842965; // 0x10100d5

/**
 * Sets the padding, in pixels, of the bottom edge; see {@link android.R.attr#padding}.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int paddingBottom = 16842969; // 0x10100d9

/**
 * Sets the padding, in pixels, of the end edge; see {@link android.R.attr#padding}.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int paddingEnd = 16843700; // 0x10103b4

/**
 * Sets the padding, in pixels, of the left and right edges; see
 * {@link android.R.attr#padding}. This value will take precedence over
 * paddingLeft and paddingRight, but not paddingStart or paddingEnd (if set).
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int paddingHorizontal = 16844093; // 0x101053d

/**
 * Sets the padding, in pixels, of the left edge; see {@link android.R.attr#padding}.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int paddingLeft = 16842966; // 0x10100d6

/**
 * Indicates how layer padding should affect the bounds of subsequent layers.
 * The default padding mode value is nest.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>nest</td><td>0</td><td>Nest each layer inside the padding of the previous layer.</td></tr>
 * <tr><td>stack</td><td>1</td><td>Stack each layer directly atop the previous layer.</td></tr>
 * </table>
 */

public static final int paddingMode = 16843863; // 0x1010457

/**
 * Sets the padding, in pixels, of the right edge; see {@link android.R.attr#padding}.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int paddingRight = 16842968; // 0x10100d8

/**
 * Sets the padding, in pixels, of the start edge; see {@link android.R.attr#padding}.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int paddingStart = 16843699; // 0x10103b3

/**
 * Sets the padding, in pixels, of the top edge; see {@link android.R.attr#padding}.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int paddingTop = 16842967; // 0x10100d7

/**
 * Sets the padding, in pixels, of the top and bottom edges; see
 * {@link android.R.attr#padding}. This value will take precedence over
 * paddingTop and paddingBottom, if set.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int paddingVertical = 16844094; // 0x101053e

/**
 * The background of a panel when it is inset from the left and right edges of the screen.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int panelBackground = 16842846; // 0x101005e

/**
 * Color that matches (as closely as possible) the panel background.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int panelColorBackground = 16842849; // 0x1010061

/**
 * Default color of foreground panel imagery.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int panelColorForeground = 16842848; // 0x1010060

/**
 * The background of a panel when it extends to the left and right edges of the screen.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int panelFullBackground = 16842847; // 0x101005f

/**
 * Default appearance of panel text.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int panelTextAppearance = 16842850; // 0x1010062

/**
 * The name of the logical parent of the activity as it appears in the manifest.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int parentActivityName = 16843687; // 0x10103a7

/**
 * Whether the characters of the field are displayed as
 * password dots instead of themselves.
 * {@deprecated Use inputType instead.}
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

@Deprecated public static final int password = 16843100; // 0x101015c

/**
 * Specify a URI path that must exactly match, as per
 * {@link android.os.PatternMatcher} with
 * {@link android.os.PatternMatcher#PATTERN_LITERAL}.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int path = 16842794; // 0x101002a

/**
 * The specification of the operations that define the path.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int pathData = 16843781; // 0x1010405

/**
 * Specify a URI path that matches a simple pattern, as per
 * {@link android.os.PatternMatcher} with
 * {@link android.os.PatternMatcher#PATTERN_SIMPLE_GLOB}.
 * Note that because '\' is used as an escape character when
 * reading the string from XML (before it is parsed as a pattern),
 * you will need to double-escape: for example a literal "*" would
 * be written as "\\*" and a literal "\" would be written as
 * "\\\\".  This is basically the same as what you would need to
 * write if constructing the string in Java code.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int pathPattern = 16842796; // 0x101002c

/**
 * Specify a URI path that must be a prefix to match, as per
 * {@link android.os.PatternMatcher} with
 * {@link android.os.PatternMatcher#PATTERN_PREFIX}.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int pathPrefix = 16842795; // 0x101002b

/**
 * The path string describing the pattern to use for the PathPathMotion.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int patternPathData = 16843978; // 0x10104ca

/**
 * Specify a permission that a client is required to have in order to
 * use the associated object.  If the client does not hold the named
 * permission, its request will fail.  See the
 * <a href="{@docRoot}guide/topics/security/security.html">Security and Permissions</a>
 * document for more information on permissions.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int permission = 16842758; // 0x1010006

/**
 * Flags indicating more context for a permission.
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>costsMoney</td><td>1</td><td>Set to indicate that this permission allows an operation that
 * may cost the user money.  Such permissions may be highlighted
 * when shown to the user with this additional information.</td></tr>
 * <tr><td>removed</td><td>2</td><td>Additional flag from base permission type: this permission has been
 * removed and it is no longer enforced. It shouldn't be shown in the
 * UI. Removed permissions are kept as normal permissions for backwards
 * compatibility as apps may be checking them before calling an API.</td></tr>
 * </table>
 */

public static final int permissionFlags = 16843719; // 0x10103c7

/**
 * Specified the name of a group that this permission is associated
 * with.  The group must have been defined with the
 * {@link android.R.styleable#AndroidManifestPermissionGroup permission-group} tag.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int permissionGroup = 16842762; // 0x101000a

/**
 * Flags indicating more context for a permission group.
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>personalInfo</td><td>1</td><td>Set to indicate that this permission group contains permissions
 * protecting access to some information that is considered
 * personal to the user (such as contacts, e-mails, etc).</td></tr>
 * </table>
 */

public static final int permissionGroupFlags = 16843717; // 0x10103c5

/**
 * Define how an activity persist across reboots. Activities defined as "never" will not
 * be persisted. Those defined as "always" will be persisted. Those defined as "taskOnly"
 * will persist the root activity of the task only. See below for more detail as to
 * what gets persisted.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>persistAcrossReboots</td><td>2</td><td>If this activity forms the root of a task then the task and this activity will
 * be persisted across reboots. If the activity above this activity is also
 * tagged with the attribute <code>"persist"</code> then it will be persisted as well.
 * And so on up the task stack until either an activity without the
 * <code>persistableMode="persistAcrossReboots"</code> attribute or one that was launched
 * with the flag Intent.FLAG_CLEAR_TASK_WHEN_RESET is encountered.
 * <p>Activities that are declared with the persistAcrossReboots attribute will be
 * provided with a PersistableBundle in onSavedInstanceState(), These activities may
 * use this PeristableBundle to save their state. Then, following a reboot, that
 * PersistableBundle will be provided back to the activity in its onCreate() method.</td></tr>
 * <tr><td>persistNever</td><td>1</td><td>If this activity forms the root of a task then that task will not be persisted
 * across reboots</td></tr>
 * <tr><td>persistRootOnly</td><td>0</td><td>The default. If this activity forms the root of a task then that task will be
 * persisted across reboots but only the launching intent will be used. If the task
 * relinquishes its identity then the intent used is that of the topmost inherited
 * identity. All activities above this activity in the task will not be persisted.
 * In addition this activity will not be passed a PersistableBundle into which it
 * could have stored its state.</td></tr>
 * </table>
 */

public static final int persistableMode = 16843821; // 0x101042d

/**
 * Flag to control special persistent mode of an application.  This should
 * not normally be used by applications; it requires that the system keep
 * your application running at all times.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int persistent = 16842765; // 0x101000d

/**
 * Defines the persistence of the drawing cache. The drawing cache might be
 * enabled by a ViewGroup for all its children in specific situations (for
 * instance during a scrolling.) This property lets you persist the cache
 * in memory after its initial usage. Persisting the cache consumes more
 * memory but may prevent frequent garbage collection is the cache is created
 * over and over again. By default the persistence is set to scrolling.
 * Deprecated: The view drawing cache was largely made obsolete with the introduction of
 * hardware-accelerated rendering in API 11.
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>all</td><td>3</td><td>The drawing cache is always persisted.</td></tr>
 * <tr><td>animation</td><td>1</td><td>The drawing cache is persisted after a layout animation.</td></tr>
 * <tr><td>none</td><td>0</td><td>The drawing cache is not persisted after use.</td></tr>
 * <tr><td>scrolling</td><td>2</td><td>The drawing cache is persisted after a scroll.</td></tr>
 * </table>
 */

public static final int persistentDrawingCache = 16842990; // 0x10100ee

/**
 * If set, the "persistent" attribute will only be honored if the feature
 * specified here is present on the device.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int persistentWhenFeatureAvailable = 16844131; // 0x1010563

/**
 * If set, specifies that this TextView has a phone number input
 * method. The default is false.
 * {@deprecated Use inputType instead.}
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

@Deprecated public static final int phoneNumber = 16843111; // 0x1010167

/**
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 */

public static final int pivotX = 16843189; // 0x10101b5

/**
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 */

public static final int pivotY = 16843190; // 0x10101b6

/**
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>alias</td><td>3f2</td><td>Pointer icon of 'alias', indicating an alias of/shortcut to something is to be
 * created.</td></tr>
 * <tr><td>all_scroll</td><td>3f5</td><td>Pointer icon of four-way arrows, indicating scrolling all direction.</td></tr>
 * <tr><td>arrow</td><td>3e8</td><td>The default icon of arrow pointer.</td></tr>
 * <tr><td>cell</td><td>3ee</td><td>Pointer icon for cell and grid.</td></tr>
 * <tr><td>context_menu</td><td>3e9</td><td>Pointer icon indicating context-menu will appear.</td></tr>
 * <tr><td>copy</td><td>3f3</td><td>Pointer icon of 'copy', used for drag/drop.</td></tr>
 * <tr><td>crosshair</td><td>3ef</td><td>Pointer icon of crosshair, indicating to spot a location.</td></tr>
 * <tr><td>grab</td><td>3fc</td><td>Pointer icon of a hand sign to grab something.</td></tr>
 * <tr><td>grabbing</td><td>3fd</td><td>Pointer icon of a hand sign while grabbing something.</td></tr>
 * <tr><td>hand</td><td>3ea</td><td>Pointer icon of a hand with the index finger.</td></tr>
 * <tr><td>help</td><td>3eb</td><td>Pointer icon indicating help.</td></tr>
 * <tr><td>horizontal_double_arrow</td><td>3f6</td><td>Pointer icon of horizontal double arrow, indicating horizontal resize.</td></tr>
 * <tr><td>no_drop</td><td>3f4</td><td>Pointer icon of 'no-drop', indicating the drop will not be accepted at the
 * current location.</td></tr>
 * <tr><td>none</td><td>0</td><td>Null icon, pointer becomes invisible.</td></tr>
 * <tr><td>text</td><td>3f0</td><td>Pointer icon of I-beam, usually for text.</td></tr>
 * <tr><td>top_left_diagonal_double_arrow</td><td>3f9</td><td>Pointer icon of diagonal double arrow, starting from top-left to bottom-right.
 * Indicating freeform resize.</td></tr>
 * <tr><td>top_right_diagonal_double_arrow</td><td>3f8</td><td>Pointer icon of diagonal double arrow, starting from top-right to bottom-left.
 * Indicating freeform resize.</td></tr>
 * <tr><td>vertical_double_arrow</td><td>3f7</td><td>Pointer icon of vertical double arrow, indicating vertical resize.</td></tr>
 * <tr><td>vertical_text</td><td>3f1</td><td>Pointer icon of I-beam with 90-degree rotated, for vertical text.</td></tr>
 * <tr><td>wait</td><td>3ec</td><td>Pointer icon indicating something is going on and waiting.</td></tr>
 * <tr><td>zoom_in</td><td>3fa</td><td>Pointer icon indicating zoom-in.</td></tr>
 * <tr><td>zoom_out</td><td>3fb</td><td>Pointer icon indicating zoom-out.</td></tr>
 * </table>
 */

public static final int pointerIcon = 16844041; // 0x1010509

/**
 * The animation style to use for the popup window.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int popupAnimationStyle = 16843465; // 0x10102c9

/**
 * The background to use for the popup window.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int popupBackground = 16843126; // 0x1010176

/**
 * The characters to display in the popup keyboard.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int popupCharacters = 16843332; // 0x1010244

/**
 * Window elevation to use for the popup window.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int popupElevation = 16843916; // 0x101048c

/**
 * Transition used to move views into the popup window.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int popupEnterTransition = 16844063; // 0x101051f

/**
 * Transition used to move views out of the popup window.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int popupExitTransition = 16844064; // 0x1010520

/**
 * The XML keyboard layout of any popup keyboard.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int popupKeyboard = 16843331; // 0x1010243

/**
 * Layout resource for popup keyboards.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int popupLayout = 16843323; // 0x101023b

/**
 * Default PopupMenu style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int popupMenuStyle = 16843520; // 0x1010300

/**
 * Reference to a theme that should be used to inflate popups
 * shown by widgets in the toolbar.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int popupTheme = 16843945; // 0x10104a9

/**
 * Default PopupWindow style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int popupWindowStyle = 16842870; // 0x1010076

/**
 * Specify a URI authority port that is handled, as per
 * {@link android.content.IntentFilter#addDataAuthority
 * IntentFilter.addDataAuthority()}.  If a host is supplied
 * but not a port, any port is matched.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int port = 16842793; // 0x1010029

/**
 * The positive button text for the dialog. Set to @null to hide the positive button.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int positiveButtonText = 16843253; // 0x10101f5

/**
 * Default style for PreferenceCategory.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int preferenceCategoryStyle = 16842892; // 0x101008c

/**
 * Default style for Headers pane in PreferenceActivity.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int preferenceFragmentStyle = 16844038; // 0x1010506

/**
 * Default style for informational Preference.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int preferenceInformationStyle = 16842893; // 0x101008d

/**
 * The preference layout that has the child/tabbed effect.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int preferenceLayoutChild = 16842900; // 0x1010094

/**
 * Default style for PreferenceScreen.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int preferenceScreenStyle = 16842891; // 0x101008b

/**
 * Default style for Preference.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int preferenceStyle = 16842894; // 0x101008e

/**
 * Theme to use for presentations spawned from this theme.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int presentationTheme = 16843712; // 0x10103c0

/**
 * A preview of what the AppWidget will look like after it's configured.
 * If not supplied, the AppWidget's icon will be used.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int previewImage = 16843482; // 0x10102da

/**
 * The alpha applied to the foreground color to create the primary text color.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 */

public static final int primaryContentAlpha = 16844114; // 0x1010552

/**
 * Specify the relative importance or ability in handling a particular
 * Intent.  For receivers, this controls the order in which they are
 * executed to receive a broadcast (note that for
 * asynchronous broadcasts, this order is ignored).  For activities,
 * this provides information about how good an activity is handling an
 * Intent; when multiple activities match an intent and have different
 * priorities, only those with the higher priority value will be
 * considered a match.
 * <p>Only use if you really need to impose some specific
 * order in which the broadcasts are received, or want to forcibly
 * place an activity to always be preferred over others.  The value is a
 * single integer, with higher numbers considered to be better.
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int priority = 16842780; // 0x101001c

/**
 * An addition content type description to supply to the input
 * method attached to the text view, which is private to the
 * implementation of the input method.  This simply fills in
 * the {@link android.view.inputmethod.EditorInfo#privateImeOptions
 * EditorInfo.privateImeOptions} field when the input
 * method is connected.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int privateImeOptions = 16843299; // 0x1010223

/**
 * Specify a specific process that the associated code is to run in.
 * Use with the application tag (to supply a default process for all
 * application components), or with the activity, receiver, service,
 * or provider tag (to supply a specific icon for that component).
 * <p>Application components are normally run in a single process that
 * is created for the entire application.  You can use this tag to modify
 * where they run.  If the process name begins with a ':' character,
 * a new process private to that application will be created when needed
 * to run that component (allowing you to spread your application across
 * multiple processes).  If the process name begins with a lower-case
 * character, the component will be run in a global process of that name,
 * provided that you have permission to do so, allowing multiple
 * applications to share one process to reduce resource usage.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int process = 16842769; // 0x1010011

/**
 * Defines the default progress value, between 0 and max.
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int progress = 16843063; // 0x1010137

/**
 * Tint to apply to the progress indicator background.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int progressBackgroundTint = 16843877; // 0x1010465

/**
 * Blending mode used to apply the progress indicator background tint.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
 * result to valid color values. Saturate(S + D)</td></tr>
 * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
 * the tint. [Sa * Da, Sc * Dc]</td></tr>
 * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
 * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
 * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
 * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
 * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
 * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
 * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
 * </table>
 */

public static final int progressBackgroundTintMode = 16843878; // 0x1010466

/**
 * Specifies the horizontal padding on either end for an embedded progress bar.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int progressBarPadding = 16843545; // 0x1010319

/**
 * Default ProgressBar style. This is a medium circular progress bar.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int progressBarStyle = 16842871; // 0x1010077

/**
 * Horizontal ProgressBar style. This is a horizontal progress bar.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int progressBarStyleHorizontal = 16842872; // 0x1010078

/**
 * Inverse ProgressBar style. This is a medium circular progress bar.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int progressBarStyleInverse = 16843399; // 0x1010287

/**
 * Large ProgressBar style. This is a large circular progress bar.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int progressBarStyleLarge = 16842874; // 0x101007a

/**
 * Large inverse ProgressBar style. This is a large circular progress bar.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int progressBarStyleLargeInverse = 16843401; // 0x1010289

/**
 * Small ProgressBar style. This is a small circular progress bar.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int progressBarStyleSmall = 16842873; // 0x1010079

/**
 * Small inverse ProgressBar style. This is a small circular progress bar.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int progressBarStyleSmallInverse = 16843400; // 0x1010288

/**
 * Small ProgressBar in title style. This is a small circular progress bar that will be placed in title bars.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int progressBarStyleSmallTitle = 16843279; // 0x101020f

/**
 * Drawable used for the progress mode.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int progressDrawable = 16843068; // 0x101013c

/**
 * Tint to apply to the progress indicator.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int progressTint = 16843875; // 0x1010463

/**
 * Blending mode used to apply the progress indicator tint.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
 * result to valid color values. Saturate(S + D)</td></tr>
 * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
 * the tint. [Sa * Da, Sc * Dc]</td></tr>
 * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
 * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
 * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
 * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
 * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
 * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
 * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
 * </table>
 */

public static final int progressTintMode = 16843876; // 0x1010464

/**
 * The prompt to display when the spinner's dialog is shown.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int prompt = 16843131; // 0x101017b

/**
 * Name of the property being animated.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int propertyName = 16843489; // 0x10102e1

/**
 * Name of the property being animated as the X coordinate of the pathData.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int propertyXName = 16843892; // 0x1010474

/**
 * Name of the property being animated as the Y coordinate of the pathData.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int propertyYName = 16843893; // 0x1010475

/**
 * Characterizes the potential risk implied in a permission and
 * indicates the procedure the system should follow when determining
 * whether to grant the permission to an application requesting it. {@link
 * android.Manifest.permission Standard permissions} have a predefined and
 * permanent protectionLevel. If you are creating a custom permission in an
 * application, you can define a protectionLevel attribute with one of the
 * values listed below. If no protectionLevel is defined for a custom
 * permission, the system assigns the default ("normal").
 * <p>Each protection level consists of a base permission type and zero or
 * more flags. Use the following functions to extract those.
 * <pre>
 * int basePermissionType = permissionInfo.getProtection();
 * int permissionFlags = permissionInfo.getProtectionFlags();
 * </pre>
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>appop</td><td>40</td><td>Additional flag from base permission type: this permission is closely
 * associated with an app op for controlling access.</td></tr>
 * <tr><td>dangerous</td><td>1</td><td><strong>Base permission type</strong>: a higher-risk permission that
 * would give a requesting application access to private user data or
 * control over the device that can negatively impact the user.  Because
 * this type of permission introduces potential risk, the system may
 * not automatically grant it to the requesting application.  For example,
 * any dangerous permissions requested by an application may be displayed
 * to the user and require confirmation before proceeding, or some other
 * approach may be taken to avoid the user automatically allowing
 * the use of such facilities.</td></tr>
 * <tr><td>development</td><td>20</td><td>Additional flag from base permission type: this permission can also
 * (optionally) be granted to development applications.</td></tr>
 * <tr><td>installer</td><td>100</td><td>Additional flag from base permission type: this permission can be automatically
 * granted to system apps that install packages.</td></tr>
 * <tr><td>instant</td><td>1000</td><td>Additional flag from base permission type: this permission can be granted to instant
 * apps</td></tr>
 * <tr><td>normal</td><td>0</td><td><strong>Base permission type</strong>: a lower-risk permission that gives
 * an application access to isolated application-level features, with minimal
 * risk to other applications, the system, or the user. The system
 * automatically grants this type of permission to a requesting application at
 * installation, without asking for the user's explicit approval (though the
 * user always has the option to review these permissions before installing).</td></tr>
 * <tr><td>oem</td><td>4000</td><td>Additional flag from base permission type: this permission can be granted only
 * if its protection level is signature, the requesting app resides on the OEM partition,
 * and the OEM has white-listed the app to receive this permission by the OEM.</td></tr>
 * <tr><td>pre23</td><td>80</td><td>Additional flag from base permission type: this permission can be automatically
 * granted to apps that target API levels below
 * {@link android.os.Build.VERSION_CODES#M} (before runtime permissions
 * were introduced).</td></tr>
 * <tr><td>preinstalled</td><td>400</td><td>Additional flag from base permission type: this permission can be automatically
 * granted any application pre-installed on the system image (not just privileged
 * apps).</td></tr>
 * <tr><td>privileged</td><td>10</td><td>Additional flag from base permission type: this permission can also
 * be granted to any applications installed as privileged apps on the system image.
 * Please avoid using this option, as the
 * signature protection level should be sufficient for most needs and
 * works regardless of exactly where applications are installed.  This
 * permission flag is used for certain special situations where multiple
 * vendors have applications built in to a system image which need
 * to share specific features explicitly because they are being built
 * together.</td></tr>
 * <tr><td>runtime</td><td>2000</td><td>Additional flag from base permission type: this permission can only be granted to apps
 * that target runtime permissions ({@link android.os.Build.VERSION_CODES#M} and above)</td></tr>
 * <tr><td>setup</td><td>800</td><td>Additional flag from base permission type: this permission can be automatically
 * granted to the setup wizard app</td></tr>
 * <tr><td>signature</td><td>2</td><td><strong>Base permission type</strong>: a permission that the system is
 * to grant only if the requesting application is signed with the same
 * certificate as the application that declared the permission. If the
 * certificates match, the system automatically grants the permission
 * without notifying the user or asking for the user's explicit approval.</td></tr>
 * <tr><td>signatureOrSystem</td><td>3</td><td>Old synonym for "signature|privileged". Deprecated in API level 23.
 * Base permission type: a permission that the system is to grant only
 * to packages in the Android system image <em>or</em> that are signed
 * with the same certificates. Please avoid using this option, as the
 * signature protection level should be sufficient for most needs and
 * works regardless of exactly where applications are installed.  This
 * permission is used for certain special situations where multiple
 * vendors have applications built in to a system image which need
 * to share specific features explicitly because they are being built
 * together.</td></tr>
 * <tr><td>system</td><td>10</td><td>Old synonym for "privileged". Deprecated in API level 23.</td></tr>
 * <tr><td>textClassifier</td><td>10000</td><td>Additional flag from base permission type: this permission can be automatically
 * granted to the system default text classifier</td></tr>
 * <tr><td>vendorPrivileged</td><td>8000</td><td>Additional flag from base permission type: this permission can be granted to
 * privileged apps in vendor partition.</td></tr>
 * <tr><td>verifier</td><td>200</td><td>Additional flag from base permission type: this permission can be automatically
 * granted to system apps that verify packages.</td></tr>
 * </table>
 */

public static final int protectionLevel = 16842761; // 0x1010009

/**
 * The attribute that holds a Base64-encoded public key.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int publicKey = 16843686; // 0x10103a6

/**
 * If you wish to handle an action key during normal search query entry, you
 * must define an action string here.  This will be added to the
 * {@link android.content.Intent#ACTION_SEARCH ACTION_SEARCH} intent that is passed to your
 * searchable activity.  To examine the string, use
 * {@link android.content.Intent#getStringExtra getStringExtra(SearchManager.ACTION_MSG)}.
 * <i>Optional attribute.</i>
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int queryActionMsg = 16843227; // 0x10101db

/**
 * If provided and <code>true</code>, this searchable activity will be invoked for all
 * queries in a particular session. If set to <code>false</code> and the activity
 * returned zero results for a query, it will not be invoked again in that session for
 * supersets of that zero-results query. For example, if the activity returned zero
 * results for "bo", it would not be queried again for "bob".
 * The default value is <code>false</code>. <i>Optional attribute.</i>.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int queryAfterZeroResults = 16843394; // 0x1010282

/**
 * Background for the section containing the search query.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int queryBackground = 16843911; // 0x1010487

/**
 * An optional query hint string to be displayed in the empty query field.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int queryHint = 16843608; // 0x1010358

/**
 * Default quickcontact badge style with large quickcontact window.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int quickContactBadgeStyleSmallWindowLarge = 16843443; // 0x10102b3

/**
 * Default quickcontact badge style with medium quickcontact window.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int quickContactBadgeStyleSmallWindowMedium = 16843442; // 0x10102b2

/**
 * Default quickcontact badge style with small quickcontact window.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int quickContactBadgeStyleSmallWindowSmall = 16843441; // 0x10102b1

/**
 * Default quickcontact badge style with large quickcontact window.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int quickContactBadgeStyleWindowLarge = 16843440; // 0x10102b0

/**
 * Default quickcontact badge style with medium quickcontact window.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int quickContactBadgeStyleWindowMedium = 16843439; // 0x10102af

/**
 * Default quickcontact badge style with small quickcontact window.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int quickContactBadgeStyleWindowSmall = 16843438; // 0x10102ae

/**
 * Default RadioButton style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int radioButtonStyle = 16842878; // 0x101007e

/**
 * Defines the radius of the four corners.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int radius = 16843176; // 0x10101a8

/**
 * The rating to set by default.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 */

public static final int rating = 16843077; // 0x1010145

/**
 * Default RatingBar style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int ratingBarStyle = 16842876; // 0x101007c

/**
 * Indicator RatingBar style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int ratingBarStyleIndicator = 16843280; // 0x1010210

/**
 * Small indicator RatingBar style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int ratingBarStyleSmall = 16842877; // 0x101007d

/**
 * A specific {@link android.R.attr#permission} name for read-only
 * access to a {@link android.content.ContentProvider}.  See the
 * <a href="{@docRoot}guide/topics/security/security.html">Security and Permissions</a>
 * document for more information on permissions.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int readPermission = 16842759; // 0x1010007

/**
 * The service that provides voice recognition.  This is required.  When the user
 * selects this voice interaction service, they will also be implicitly selecting
 * the component here for their recognition service.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int recognitionService = 16843932; // 0x101049c

/**
 * Specify the configuration changes that trigger the system to recreate the
 * current activity if any of these configuration changes happen in the system.
 * The valid configuration changes include mcc and mnc which are the same with
 * those in configChanges. By default from Android O, we don't recreate the activity
 * even the app doesn't specify mcc or mnc in configChanges. If the app wants to
 * be recreated, specify them in recreateOnConfigChanges.
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>mcc</td><td>1</td><td>The IMSI MCC has changed, that is a SIM has been detected and
 * updated the Mobile Country Code.</td></tr>
 * <tr><td>mnc</td><td>2</td><td>The IMSI MNC has changed, that is a SIM has been detected and
 * updated the Mobile Network Code.</td></tr>
 * </table>
 */

public static final int recreateOnConfigChanges = 16844103; // 0x1010547

/**
 * Whether the preference has enabled to have its view recycled when used in the list
 * view. This is true by default.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int recycleEnabled = 16844121; // 0x1010559

/**
 * Tasks whose root has this attribute set to true will replace baseIntent with that of the
 * next activity in the task. If the next activity also has this attribute set to true then
 * it will yield the baseIntent to any activity that it launches in the same task. This
 * continues until an activity is encountered which has this attribute set to false. False
 * is the default. This attribute set to true also permits activity's use of the
 * TaskDescription to change labels, colors and icons in the recent task list.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int relinquishTaskIdentity = 16843894; // 0x1010476

/**
 * Tells ChangeTransform to track parent changes. Default is true. Corresponds to
 * {@link android.transition.ChangeTransform#setReparent(boolean)}.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int reparent = 16843964; // 0x10104bc

/**
 * A parent change should use an overlay or affect the transform of the
 * transitionining View. Default is true. Corresponds to
 * {@link android.transition.ChangeTransform#setReparentWithOverlay(boolean)}.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int reparentWithOverlay = 16843965; // 0x10104bd

/**
 * Defines how many times the animation should repeat. The default value is 0.
 * <p>May be an integer value, such as "<code>100</code>".
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>infinite</td><td>ffffffff</td><td></td></tr>
 * </table>
 */

public static final int repeatCount = 16843199; // 0x10101bf

/**
 * Defines the animation behavior when it reaches the end and the repeat count is
 * greater than 0 or infinite. The default value is restart.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>restart</td><td>1</td><td>The animation starts again from the beginning.</td></tr>
 * <tr><td>reverse</td><td>2</td><td>The animation plays backward.</td></tr>
 * </table>
 */

public static final int repeatMode = 16843200; // 0x10101c0

/**
 * Application's requirement for five way navigation
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int reqFiveWayNav = 16843314; // 0x1010232

/**
 * Application's requirement for a hard keyboard
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int reqHardKeyboard = 16843305; // 0x1010229

/**
 * The input method preferred by an application.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>nokeys</td><td>1</td><td></td></tr>
 * <tr><td>qwerty</td><td>2</td><td></td></tr>
 * <tr><td>twelvekey</td><td>3</td><td></td></tr>
 * <tr><td>undefined</td><td>0</td><td></td></tr>
 * </table>
 */

public static final int reqKeyboardType = 16843304; // 0x1010228

/**
 * The navigation device preferred by an application.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>dpad</td><td>2</td><td></td></tr>
 * <tr><td>nonav</td><td>1</td><td></td></tr>
 * <tr><td>trackball</td><td>3</td><td></td></tr>
 * <tr><td>undefined</td><td>0</td><td></td></tr>
 * <tr><td>wheel</td><td>4</td><td></td></tr>
 * </table>
 */

public static final int reqNavigation = 16843306; // 0x101022a

/**
 * The touch screen type used by an application.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>finger</td><td>3</td><td></td></tr>
 * <tr><td>notouch</td><td>1</td><td></td></tr>
 * <tr><td>stylus</td><td>2</td><td></td></tr>
 * <tr><td>undefined</td><td>0</td><td></td></tr>
 * </table>
 */

public static final int reqTouchScreen = 16843303; // 0x1010227

/**
 * Whether the device must be unlocked before routing data to this service.
 * The default is false.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int requireDeviceUnlock = 16843756; // 0x10103ec

/**
 * Specify whether this feature is required for the application.
 * The default is true, meaning the application requires the
 * feature, and does not want to be installed on devices that
 * don't support it.  If you set this to false, then this will
 * not impose a restriction on where the application can be
 * installed.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int required = 16843406; // 0x101028e

/**
 * Declare that this application requires an account of a certain
 * type. The default value is null and indicates that the application can work without
 * any accounts. The type should correspond to the account authenticator type, such as
 * "com.google".
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int requiredAccountType = 16843734; // 0x10103d6

/**
 * Optional: the system must support this feature for the permission to be
 * requested.  If it doesn't support the feature, it will be as if the manifest didn't
 * request it at all.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int requiredFeature = 16844116; // 0x1010554

/**
 * Flag to specify if this application needs to be present for all users. Only pre-installed
 * applications can request this feature. Default value is false.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int requiredForAllUsers = 16843728; // 0x10103d0

/**
 * Optional: the system must NOT support this feature for the permission to be
 * requested.  If it does support the feature, it will be as if the manifest didn't
 * request it at all.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int requiredNotFeature = 16844117; // 0x1010555

/**
 * Defines which edges should be faded on scrolling.
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>horizontal</td><td>1000</td><td>Fades horizontal edges only.</td></tr>
 * <tr><td>none</td><td>0</td><td>No edge is faded.</td></tr>
 * <tr><td>vertical</td><td>2000</td><td>Fades vertical edges only.</td></tr>
 * </table>
 */

public static final int requiresFadingEdge = 16843685; // 0x10103a5

/**
 * Starting with {@link android.os.Build.VERSION_CODES#HONEYCOMB_MR2},
 * this is the new way to specify the minimum screen size an application is
 * compatible with.  This attribute provides the required minimum
 * "smallest screen width" (as per the -swNNNdp resource configuration)
 * that the application can run on.  For example, a typical phone
 * screen is 320, a 7" tablet 600, and a 10" tablet 720.  If the
 * smallest screen width of the device is below the value supplied here,
 * then the application is considered incompatible with that device.
 * If not supplied, then any old smallScreens, normalScreens, largeScreens,
 * or xlargeScreens attributes will be used instead.
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int requiresSmallestWidthDp = 16843620; // 0x1010364

/**
 * Resize the view by adjusting the clipBounds rather than changing the
 * dimensions of the view itself. The default value is false.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int resizeClip = 16843983; // 0x10104cf

/**
 * Optional parameter which indicates if and how this widget can be
 * resized. Supports combined values using | operator.
 * <p>May be an integer value, such as "<code>100</code>".
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>horizontal</td><td>1</td><td></td></tr>
 * <tr><td>none</td><td>0</td><td></td></tr>
 * <tr><td>vertical</td><td>2</td><td></td></tr>
 * </table>
 */

public static final int resizeMode = 16843619; // 0x1010363

/**
 * Indicates whether the application can resize itself to newer
 * screen sizes.  This is mostly used to distinguish between old
 * applications that may not be compatible with newly introduced
 * screen sizes and newer applications that should be; it will be
 * set for you automatically based on whether you are targeting
 * a newer platform that supports more screens.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int resizeable = 16843405; // 0x101028d

/**
 * Indicates that it is okay for this activity to be resized to any dimension. Intended for a
 * multi-window device where there can be multiple activities of various sizes on the screen
 * at the same time.
 * <p>The default value is <code>false</code> for applications with
 * <code>targetSdkVersion</code> lesser than {@link android.os.Build.VERSION_CODES#N} and
 * <code>true</code> otherwise.
 * <p>NOTE: A task's root activity value is applied to all additional activities launched in
 * the task. That is if the root activity of a task is resizeable then the system will treat
 * all other activities in the task as resizeable and will not if the root activity isn't
 * resizeable.
 * <p>NOTE: The value of {@link android.R.attr#screenOrientation} is ignored for
 * resizeable activities when in multi-window mode.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int resizeableActivity = 16844022; // 0x10104f6

/**
 * Resource identifier to assign to this piece of named meta-data.
 * The resource identifier can later be retrieved from the meta data
 * Bundle through {@link android.os.Bundle#getInt Bundle.getInt}.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int resource = 16842789; // 0x1010025

/**
 * Indicate that the application is prepared to attempt a restore of any
 * backed-up dataset, even if the backup is apparently from a newer version
 * of the application than is currently installed on the device.  Setting
 * this attribute to <code>true</code> will permit the Backup Manager to
 * attempt restore even when a version mismatch suggests that the data are
 * incompatible.  <em>Use with caution!</em>
 * <p>The default value of this attribute is <code>false</code>.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int restoreAnyVersion = 16843450; // 0x10102ba

/**
 * @deprecated This attribute is not used by the Android operating system.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

@Deprecated public static final int restoreNeedsApplication = 16843421; // 0x101029d

/**
 * Declare that this application requires access to restricted accounts of a certain
 * type. The default value is null and restricted accounts won\'t be visible to this
 * application. The type should correspond to the account authenticator type, such as
 * "com.google".
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int restrictedAccountType = 16843733; // 0x10103d5

/**
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>bool</td><td>1</td><td></td></tr>
 * <tr><td>bundle</td><td>7</td><td></td></tr>
 * <tr><td>bundle_array</td><td>8</td><td></td></tr>
 * <tr><td>choice</td><td>2</td><td></td></tr>
 * <tr><td>hidden</td><td>0</td><td></td></tr>
 * <tr><td>integer</td><td>5</td><td></td></tr>
 * <tr><td>multi-select</td><td>4</td><td></td></tr>
 * <tr><td>string</td><td>6</td><td></td></tr>
 * </table>
 */

public static final int restrictionType = 16843923; // 0x1010493

/**
 * Indicate that it is okay for this activity be resumed while the previous
 * activity is in the process of pausing, without waiting for the previous pause
 * to complete.  Use this with caution: your activity can not acquire any exclusive
 * resources (such as opening the camera or recording audio) when it launches, or it
 * may conflict with the previous activity and fail.
 * <p>The default value of this attribute is <code>false</code>.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int resumeWhilePausing = 16843954; // 0x10104b2

/**
 * Whether this transition is reversible.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int reversible = 16843851; // 0x101044b

/**
 * Internal revision code.  This number is the number used to determine
 * whether one APK is more recent than another: it has no other meaning
 * than that higher numbers are more recent.  This value is only meaningful
 * when the two {@link android.R.attr#versionCode} values are already
 * identical.  When an app is delivered as multiple split APKs, each
 * APK may have a different revisionCode value.
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int revisionCode = 16843989; // 0x10104d5

/**
 * Amount of right padding inside the gradient shape.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int right = 16843183; // 0x10101af

/**
 * Default style for RingtonePreference.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int ringtonePreferenceStyle = 16842899; // 0x1010093

/**
 * Which ringtone type(s) to show in the picker.
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>alarm</td><td>4</td><td>Alarm sounds.</td></tr>
 * <tr><td>all</td><td>7</td><td>All available ringtone sounds.</td></tr>
 * <tr><td>notification</td><td>2</td><td>Notification sounds.</td></tr>
 * <tr><td>ringtone</td><td>1</td><td>Ringtones.</td></tr>
 * </table>
 */

public static final int ringtoneType = 16843257; // 0x10101f9

/**
 * rotation of the view, in degrees.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 */

public static final int rotation = 16843558; // 0x1010326

/**
 * Flag allowing the activity to specify which screen rotation animation
 * it desires.  Valid values are "rotate", "crossfade", and "jumpcut"
 * as described in {@link android.view.WindowManager.LayoutParams#rotationAnimation}.
 * Specifying your Rotation animation in the WindowManager.LayoutParams
 * may be racy with app startup and updattransitions occuring during application startup and thusly
 * the manifest attribute is preferred.
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>crossfade</td><td>1</td><td></td></tr>
 * <tr><td>jumpcut</td><td>2</td><td></td></tr>
 * <tr><td>rotate</td><td>0</td><td></td></tr>
 * <tr><td>seamless</td><td>3</td><td></td></tr>
 * </table>
 */

public static final int rotationAnimation = 16844090; // 0x101053a

/**
 * rotation of the view around the x axis, in degrees.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 */

public static final int rotationX = 16843559; // 0x1010327

/**
 * rotation of the view around the y axis, in degrees.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 */

public static final int rotationY = 16843560; // 0x1010328

/**
 * A Drawable resource providing a graphical representation of its
 * associated item.  Use with the
 * application tag (to supply a default round icon for all application
 * components), or with the activity, receiver, service, or instrumentation
 * tag (to supply a specific round icon for that component).  It may also be
 * used with the intent-filter tag to supply a round icon to show to the
 * user when an activity is being selected based on a particular Intent.
 * <p>The given round icon will be used to display to the user a graphical
 * representation of its associated component; for example, as the round icon
 * for main activity that is displayed in the launcher.  This must be
 * a reference to a Drawable resource containing the image definition.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int roundIcon = 16844076; // 0x101052c

/**
 * The maxmimum number of rows to create when automatically positioning children.
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int rowCount = 16843637; // 0x1010375

/**
 * Fraction of the animation duration used to delay the beginning of
 * the animation of each row.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 */

public static final int rowDelay = 16843216; // 0x10101d0

/**
 * Row edge flags.
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>bottom</td><td>8</td><td>Row is anchored to the bottom of the keyboard.</td></tr>
 * <tr><td>top</td><td>4</td><td>Row is anchored to the top of the keyboard.</td></tr>
 * </table>
 */

public static final int rowEdgeFlags = 16843329; // 0x1010241

/**
 * Defines the height of each row.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int rowHeight = 16843058; // 0x1010132

/**
 * When set to true, forces row boundaries to appear in the same order
 * as row indices.
 * The default is true.
 * See {@link android.widget.GridLayout#setRowOrderPreserved(boolean)}.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int rowOrderPreserved = 16843638; // 0x1010376

/**
 * If false, no state will be saved for this view when it is being
 * frozen. The default is true, allowing the view to be saved
 * (however it also must have an ID assigned to it for its
 * state to be saved).  Setting this to false only disables the
 * state for this view, not for its children which may still
 * be saved.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int saveEnabled = 16842983; // 0x10100e7

/**
 * Specifies where the drawable is positioned after scaling. The default value is
 * left.
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
 * <tr><td>center</td><td>11</td><td>Place the object in the center of its container in both the vertical and horizontal axis, not changing its size.</td></tr>
 * <tr><td>center_horizontal</td><td>1</td><td>Place object in the horizontal center of its container, not changing its size.</td></tr>
 * <tr><td>center_vertical</td><td>10</td><td>Place object in the vertical center of its container, not changing its size.</td></tr>
 * <tr><td>clip_horizontal</td><td>8</td><td>Additional option that can be set to have the left and/or right edges of
 * the child clipped to its container's bounds.
 * The clip will be based on the horizontal gravity: a left gravity will clip the right
 * edge, a right gravity will clip the left edge, and neither will clip both edges.</td></tr>
 * <tr><td>clip_vertical</td><td>80</td><td>Additional option that can be set to have the top and/or bottom edges of
 * the child clipped to its container's bounds.
 * The clip will be based on the vertical gravity: a top gravity will clip the bottom
 * edge, a bottom gravity will clip the top edge, and neither will clip both edges.</td></tr>
 * <tr><td>end</td><td>800005</td><td>Push object to the end of its container, not changing its size.</td></tr>
 * <tr><td>fill</td><td>77</td><td>Grow the horizontal and vertical size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>fill_horizontal</td><td>7</td><td>Grow the horizontal size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>fill_vertical</td><td>70</td><td>Grow the vertical size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>left</td><td>3</td><td>Push object to the left of its container, not changing its size.</td></tr>
 * <tr><td>right</td><td>5</td><td>Push object to the right of its container, not changing its size.</td></tr>
 * <tr><td>start</td><td>800003</td><td>Push object to the beginning of its container, not changing its size.</td></tr>
 * <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
 * </table>
 */

public static final int scaleGravity = 16843262; // 0x10101fe

/**
 * Scale height, expressed as a percentage of the drawable's bound. The value's
 * format is XX%. For instance: 100%, 12.5%, etc.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int scaleHeight = 16843261; // 0x10101fd

/**
 * Controls how the image should be resized or moved to match the size
 * of this ImageView.  See {@link android.widget.ImageView.ScaleType}
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>center</td><td>5</td><td>Center the image in the view, but perform no scaling.</td></tr>
 * <tr><td>centerCrop</td><td>6</td><td>Scale the image uniformly (maintain the image's aspect ratio) so both dimensions
 * (width and height) of the image will be equal to or larger than the corresponding
 * dimension of the view (minus padding). The image is then centered in the view.</td></tr>
 * <tr><td>centerInside</td><td>7</td><td>Scale the image uniformly (maintain the image's aspect ratio) so that both
 * dimensions (width and height) of the image will be equal to or less than the
 * corresponding dimension of the view (minus padding). The image is then centered in
 * the view.</td></tr>
 * <tr><td>fitCenter</td><td>3</td><td>Scale the image using {@link android.graphics.Matrix.ScaleToFit#CENTER}.</td></tr>
 * <tr><td>fitEnd</td><td>4</td><td>Scale the image using {@link android.graphics.Matrix.ScaleToFit#END}.</td></tr>
 * <tr><td>fitStart</td><td>2</td><td>Scale the image using {@link android.graphics.Matrix.ScaleToFit#START}.</td></tr>
 * <tr><td>fitXY</td><td>1</td><td>Scale the image using {@link android.graphics.Matrix.ScaleToFit#FILL}.</td></tr>
 * <tr><td>matrix</td><td>0</td><td>Scale using the image matrix when drawing. See
 * {@link android.widget.ImageView#setImageMatrix(Matrix)}.</td></tr>
 * </table>
 */

public static final int scaleType = 16843037; // 0x101011d

/**
 * Scale width, expressed as a percentage of the drawable's bound. The value's
 * format is XX%. For instance: 100%, 12.5%, etc.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int scaleWidth = 16843260; // 0x10101fc

/**
 * scale of the view in the x direction.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 */

public static final int scaleX = 16843556; // 0x1010324

/**
 * scale of the view in the y direction.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 */

public static final int scaleY = 16843557; // 0x1010325

/**
 * Specify a URI scheme that is handled, as per
 * {@link android.content.IntentFilter#addDataScheme
 * IntentFilter.addDataScheme()}.
 * <p><em>Note: scheme matching in the Android framework is
 * case-sensitive, unlike the formal RFC.  As a result,
 * schemes here should always use lower case letters.</em></p>
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int scheme = 16842791; // 0x1010027

/**
 * Specifies a compatible screen density, as per the device
 * configuration screen density bins.
 * <p>May be an integer value, such as "<code>100</code>".
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>hdpi</td><td>f0</td><td>A high density screen, approximately 240dpi.</td></tr>
 * <tr><td>ldpi</td><td>78</td><td>A low density screen, approximately 120dpi.</td></tr>
 * <tr><td>mdpi</td><td>a0</td><td>A medium density screen, approximately 160dpi.</td></tr>
 * <tr><td>xhdpi</td><td>140</td><td>An extra high density screen, approximately 320dpi.</td></tr>
 * <tr><td>xxhdpi</td><td>1e0</td><td>An extra extra high density screen, approximately 480dpi.</td></tr>
 * <tr><td>xxxhdpi</td><td>280</td><td>An extra extra extra high density screen, approximately 640dpi.</td></tr>
 * </table>
 */

public static final int screenDensity = 16843467; // 0x10102cb

/**
 * Specify the orientation an activity should be run in.  If not
 * specified, it will run in the current preferred orientation
 * of the screen.
 * <p>This attribute is supported by the <a
 * href="{@docRoot}guide/topics/manifest/activity-element.html">{@code <activity>}</a>
 * element.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>behind</td><td>3</td><td>Keep the screen in the same orientation as whatever is behind
 * this activity.
 * Corresponds to
 * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_BEHIND}.</td></tr>
 * <tr><td>fullSensor</td><td>a</td><td>Orientation is determined by a physical orientation sensor:
 * the display will rotate based on how the user moves the device.
 * This allows any of the 4 possible rotations, regardless of what
 * the device will normally do (for example some devices won't
 * normally use 180 degree rotation).
 * Corresponds to
 * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_FULL_SENSOR}.</td></tr>
 * <tr><td>fullUser</td><td>d</td><td>Respect the user's sensor-based rotation preference, but if
 * sensor-based rotation is enabled then allow the screen to rotate
 * in all 4 possible directions regardless of what
 * the device will normally do (for example some devices won't
 * normally use 180 degree rotation).
 * Corresponds to
 * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_FULL_USER}.</td></tr>
 * <tr><td>landscape</td><td>0</td><td>Would like to have the screen in a landscape orientation: that
 * is, with the display wider than it is tall, ignoring sensor data.
 * Corresponds to
 * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_LANDSCAPE}.</td></tr>
 * <tr><td>locked</td><td>e</td><td>Screen is locked to its current rotation, whatever that is.
 * Corresponds to
 * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_LOCKED}.</td></tr>
 * <tr><td>nosensor</td><td>5</td><td>Always ignore orientation determined by orientation sensor:
 * the display will not rotate when the user moves the device.
 * Corresponds to
 * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_NOSENSOR}.</td></tr>
 * <tr><td>portrait</td><td>1</td><td>Would like to have the screen in a portrait orientation: that
 * is, with the display taller than it is wide, ignoring sensor data.
 * Corresponds to
 * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_PORTRAIT}.</td></tr>
 * <tr><td>reverseLandscape</td><td>8</td><td>Would like to have the screen in landscape orientation, turned in
 * the opposite direction from normal landscape.
 * Corresponds to
 * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_REVERSE_LANDSCAPE}.</td></tr>
 * <tr><td>reversePortrait</td><td>9</td><td>Would like to have the screen in portrait orientation, turned in
 * the opposite direction from normal portrait.
 * Corresponds to
 * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_REVERSE_PORTRAIT}.</td></tr>
 * <tr><td>sensor</td><td>4</td><td>Orientation is determined by a physical orientation sensor:
 * the display will rotate based on how the user moves the device.
 * Ignores user's setting to turn off sensor-based rotation.
 * Corresponds to
 * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_SENSOR}.</td></tr>
 * <tr><td>sensorLandscape</td><td>6</td><td>Would like to have the screen in landscape orientation, but can
 * use the sensor to change which direction the screen is facing.
 * Corresponds to
 * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_SENSOR_LANDSCAPE}.</td></tr>
 * <tr><td>sensorPortrait</td><td>7</td><td>Would like to have the screen in portrait orientation, but can
 * use the sensor to change which direction the screen is facing.
 * Corresponds to
 * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_SENSOR_PORTRAIT}.</td></tr>
 * <tr><td>unspecified</td><td>ffffffff</td><td>No preference specified: let the system decide the best
 * orientation.  This will either be the orientation selected
 * by the activity below, or the user's preferred orientation
 * if this activity is the bottom of a task. If the user
 * explicitly turned off sensor based orientation through settings
 * sensor based device rotation will be ignored. If not by default
 * sensor based orientation will be taken into account and the
 * orientation will changed based on how the user rotates the device.
 * Corresponds to
 * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_UNSPECIFIED}.</td></tr>
 * <tr><td>user</td><td>2</td><td>Use the user's current preferred orientation of the handset.
 * Corresponds to
 * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_USER}.</td></tr>
 * <tr><td>userLandscape</td><td>b</td><td>Would like to have the screen in landscape orientation, but if
 * the user has enabled sensor-based rotation then we can use the
 * sensor to change which direction the screen is facing.
 * Corresponds to
 * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_USER_LANDSCAPE}.</td></tr>
 * <tr><td>userPortrait</td><td>c</td><td>Would like to have the screen in portrait orientation, but if
 * the user has enabled sensor-based rotation then we can use the
 * sensor to change which direction the screen is facing.
 * Corresponds to
 * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_USER_PORTRAIT}.</td></tr>
 * </table>
 */

public static final int screenOrientation = 16842782; // 0x101001e

/**
 * Whether this view should be treated as a focusable unit by screen reader accessibility
 * tools. See {@link android.view.View#setScreenReaderFocusable(boolean)}. The default
 * value, {@code false}, leaves the screen reader to consider other signals, such as
 * focusability or the presence of text, to decide what it focus.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int screenReaderFocusable = 16844148; // 0x1010574

/**
 * Specifies a compatible screen size, as per the device
 * configuration screen size bins.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>large</td><td>190</td><td>A large screen configuration, at least 400x530dp.</td></tr>
 * <tr><td>normal</td><td>12c</td><td>A normal screen configuration, at least 320x480dp.</td></tr>
 * <tr><td>small</td><td>c8</td><td>A small screen configuration, at least 240x320dp.</td></tr>
 * <tr><td>xlarge</td><td>1f4</td><td>An extra large screen configuration, at least 600x800dp.</td></tr>
 * </table>
 */

public static final int screenSize = 16843466; // 0x10102ca

/**
 * Whether the text is allowed to be wider than the view (and
 * therefore can be scrolled horizontally).
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int scrollHorizontally = 16843099; // 0x101015b

/**
 * Defines which scroll indicators should be displayed when the view
 * can be scrolled. Multiple values may be combined using logical OR,
 * for example "top|bottom".
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>bottom</td><td>2</td><td>Displays bottom scroll indicator when vew can be scrolled down.</td></tr>
 * <tr><td>end</td><td>20</td><td>Displays right scroll indicator when vew can be scrolled in the
 * end direction.</td></tr>
 * <tr><td>left</td><td>4</td><td>Displays left scroll indicator when vew can be scrolled left.</td></tr>
 * <tr><td>none</td><td>0</td><td>No scroll indicators are displayed.</td></tr>
 * <tr><td>right</td><td>8</td><td>Displays right scroll indicator when vew can be scrolled right.</td></tr>
 * <tr><td>start</td><td>10</td><td>Displays right scroll indicator when vew can be scrolled in the
 * start direction.</td></tr>
 * <tr><td>top</td><td>1</td><td>Displays top scroll indicator when view can be scrolled up.</td></tr>
 * </table>
 */

public static final int scrollIndicators = 16844006; // 0x10104e6

/**
 * Default ScrollView style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int scrollViewStyle = 16842880; // 0x1010080

/**
 * The initial horizontal scroll offset, in pixels.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int scrollX = 16842962; // 0x10100d2

/**
 * The initial vertical scroll offset, in pixels.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int scrollY = 16842963; // 0x10100d3

/**
 * Defines whether the horizontal scrollbar track should always be drawn.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int scrollbarAlwaysDrawHorizontalTrack = 16842856; // 0x1010068

/**
 * Defines whether the vertical scrollbar track should always be drawn.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int scrollbarAlwaysDrawVerticalTrack = 16842857; // 0x1010069

/**
 * Defines the delay in milliseconds that a scrollbar waits before fade out.
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int scrollbarDefaultDelayBeforeFade = 16843433; // 0x10102a9

/**
 * Defines the delay in milliseconds that a scrollbar takes to fade out.
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int scrollbarFadeDuration = 16843432; // 0x10102a8

/**
 * Sets the width of vertical scrollbars and height of horizontal scrollbars.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int scrollbarSize = 16842851; // 0x1010063

/**
 * Controls the scrollbar style and position. The scrollbars can be overlaid or
 * inset. When inset, they add to the padding of the view. And the
 * scrollbars can be drawn inside the padding area or on the edge of
 * the view. For example, if a view has a background drawable and you
 * want to draw the scrollbars inside the padding specified by the
 * drawable, you can use insideOverlay or insideInset. If you want them
 * to appear at the edge of the view, ignoring the padding, then you can
 * use outsideOverlay or outsideInset.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>insideInset</td><td>1000000</td><td>Inside the padding and inset.</td></tr>
 * <tr><td>insideOverlay</td><td>0</td><td>Inside the padding and overlaid.</td></tr>
 * <tr><td>outsideInset</td><td>3000000</td><td>Edge of the view and inset.</td></tr>
 * <tr><td>outsideOverlay</td><td>2000000</td><td>Edge of the view and overlaid.</td></tr>
 * </table>
 */

public static final int scrollbarStyle = 16842879; // 0x101007f

/**
 * Defines the horizontal scrollbar thumb drawable.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int scrollbarThumbHorizontal = 16842852; // 0x1010064

/**
 * Defines the vertical scrollbar thumb drawable.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int scrollbarThumbVertical = 16842853; // 0x1010065

/**
 * Defines the horizontal scrollbar track drawable.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int scrollbarTrackHorizontal = 16842854; // 0x1010066

/**
 * Defines the vertical scrollbar track drawable.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int scrollbarTrackVertical = 16842855; // 0x1010067

/**
 * Defines which scrollbars should be displayed on scrolling or not.
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>horizontal</td><td>100</td><td>Displays horizontal scrollbar only.</td></tr>
 * <tr><td>none</td><td>0</td><td>No scrollbar is displayed.</td></tr>
 * <tr><td>vertical</td><td>200</td><td>Displays vertical scrollbar only.</td></tr>
 * </table>
 */

public static final int scrollbars = 16842974; // 0x10100de

/**
 * When set to true, the list uses a drawing cache during scrolling.
 * This makes the rendering faster but uses more memory. The default
 * value is true.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int scrollingCache = 16843006; // 0x10100fe

/**
 * If supplied, this string will be displayed as the text of the "Search" button.
 * <i>Optional attribute.</i>
 * {@deprecated This will create a non-standard UI appearance, because the search bar UI is
 * changing to use only icons for its buttons.}
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

@Deprecated public static final int searchButtonText = 16843269; // 0x1010205

/**
 * Search icon displayed as a text field hint.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int searchHintIcon = 16843988; // 0x10104d4

/**
 * Search icon.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int searchIcon = 16843907; // 0x1010483

/**
 * Additional features are controlled by mode bits in this field.  Omitting
 * this field, or setting to zero, provides default behavior.  <i>Optional attribute.</i>
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>queryRewriteFromData</td><td>10</td><td>If set, this flag causes the suggestion column SUGGEST_COLUMN_INTENT_DATA to
 * be considered as the text for suggestion query rewriting.  This should only
 * be used when the values in SUGGEST_COLUMN_INTENT_DATA are suitable for user
 * inspection and editing - typically, HTTP/HTTPS Uri's.</td></tr>
 * <tr><td>queryRewriteFromText</td><td>20</td><td>If set, this flag causes the suggestion column SUGGEST_COLUMN_TEXT_1 to
 * be considered as the text for suggestion query rewriting.  This should be used
 * for suggestions in which no query text is provided and the SUGGEST_COLUMN_INTENT_DATA
 * values are not suitable for user inspection and editing.</td></tr>
 * <tr><td>showSearchIconAsBadge</td><td>8</td><td><strong>This is deprecated.</strong><br/>The default
 * application icon is now always used, so this option is
 * obsolete.</td></tr>
 * <tr><td>showSearchLabelAsBadge</td><td>4</td><td>If set, this flag enables the display of the search target (label) within the
 * search bar.  If neither bad mode is selected, no badge will be shown.</td></tr>
 * </table>
 */

public static final int searchMode = 16843221; // 0x10101d5

/**
 * If provided, this string will be used to describe the searchable item in the
 * searchable items settings within system search settings. <i>Optional
 * attribute.</i>
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int searchSettingsDescription = 16843402; // 0x101028a

/**
 * If provided, this is the trigger indicating that the searchable activity
 * provides suggestions as well.  The value must be a fully-qualified content provider
 * authority (for example, "com.example.android.apis.SuggestionProvider") and should match
 * the "android:authorities" tag in your content provider's manifest entry.  <i>Optional
 * attribute.</i>
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int searchSuggestAuthority = 16843222; // 0x10101d6

/**
 * If provided, and not overridden by an action in the selected suggestion, this
 * string will be placed in the action field of the {@link android.content.Intent Intent}
 * when the user clicks a suggestion.  <i>Optional attribute.</i>
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int searchSuggestIntentAction = 16843225; // 0x10101d9

/**
 * If provided, and not overridden by an action in the selected suggestion, this
 * string will be placed in the data field of the {@link android.content.Intent Intent}
 * when the user clicks a suggestion.  <i>Optional attribute.</i>
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int searchSuggestIntentData = 16843226; // 0x10101da

/**
 * If provided, this will be inserted in the suggestions query Uri, after the authority
 * you have provide but before the standard suggestions path. <i>Optional attribute.</i>
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int searchSuggestPath = 16843223; // 0x10101d7

/**
 * If provided, suggestion queries will be passed into your query function
 * as the <i>selection</i> parameter.  Typically this will be a WHERE clause for your
 * database, and will contain a single question mark, which represents the actual query
 * string that has been typed by the user.  If not provided, then the user query text
 * will be appended to the query Uri (after an additional "/".)  <i>Optional
 * attribute.</i>
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int searchSuggestSelection = 16843224; // 0x10101d8

/**
 * If provided, this is the minimum number of characters needed to trigger
 * search suggestions. The default value is 0. <i>Optional attribute.</i>
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int searchSuggestThreshold = 16843373; // 0x101026d

/**
 * Style for the search query widget.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int searchViewStyle = 16843904; // 0x1010480

/**
 * The alpha applied to the foreground color to create the secondary text color.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 */

public static final int secondaryContentAlpha = 16844115; // 0x1010553

/**
 * Defines the secondary progress value, between 0 and max. This progress is drawn between
 * the primary progress and the background.  It can be ideal for media scenarios such as
 * showing the buffering progress while the default progress shows the play progress.
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int secondaryProgress = 16843064; // 0x1010138

/**
 * Tint to apply to the secondary progress indicator.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int secondaryProgressTint = 16843879; // 0x1010467

/**
 * Blending mode used to apply the secondary progress indicator tint.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
 * result to valid color values. Saturate(S + D)</td></tr>
 * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
 * the tint. [Sa * Da, Sc * Dc]</td></tr>
 * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
 * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
 * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
 * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
 * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
 * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
 * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
 * </table>
 */

public static final int secondaryProgressTintMode = 16843880; // 0x1010468

/**
 * Default SeekBar style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int seekBarStyle = 16842875; // 0x101007b

/**
 * Style for segmented buttons - a container that houses several buttons
 * with the appearance of a singel button broken into segments.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int segmentedButtonStyle = 16843568; // 0x1010330

/**
 * If the text is selectable, select it all when the view takes
 * focus.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int selectAllOnFocus = 16843102; // 0x101015e

/**
 * Whether the Preference is selectable.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int selectable = 16843238; // 0x10101e6

/**
 * Background drawable for bordered standalone items that need focus/pressed states.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int selectableItemBackground = 16843534; // 0x101030e

/**
 * Background drawable for borderless standalone items that need focus/pressed states.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int selectableItemBackgroundBorderless = 16843868; // 0x101045c

/**
 * @deprecated Drawable for the vertical bar shown at the beginning and at the end of the selected date.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

@Deprecated public static final int selectedDateVerticalBar = 16843591; // 0x1010347

/**
 * @deprecated The background color for the selected week.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

@Deprecated public static final int selectedWeekBackgroundColor = 16843586; // 0x1010342

/**
 * The service that hosts active voice interaction sessions.  This is required.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int sessionService = 16843837; // 0x101043d

/**
 * Component name of an activity that allows the user to modify
 * the settings for this service.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int settingsActivity = 16843301; // 0x1010225

/**
 * Component name of an activity that allows the user to set up this service.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int setupActivity = 16843766; // 0x10103f6

/**
 * Place a blurred shadow of text underneath the text, drawn with the
 * specified color. The text shadow produced does not interact with
 * properties on View that are responsible for real time shadows,
 * {@link android.R.styleable#View_elevation elevation} and
 * {@link android.R.styleable#View_translationZ translationZ}.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int shadowColor = 16843105; // 0x1010161

/**
 * Horizontal offset of the text shadow.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 */

public static final int shadowDx = 16843106; // 0x1010162

/**
 * Vertical offset of the text shadow.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 */

public static final int shadowDy = 16843107; // 0x1010163

/**
 * Blur radius of the text shadow.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 */

public static final int shadowRadius = 16843108; // 0x1010164

/**
 * Indicates what shape to fill with a gradient.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>line</td><td>2</td><td>Line shape.</td></tr>
 * <tr><td>oval</td><td>1</td><td>Oval shape.</td></tr>
 * <tr><td>rectangle</td><td>0</td><td>Rectangle shape, with optional rounder corners.</td></tr>
 * <tr><td>ring</td><td>3</td><td>Ring shape.</td></tr>
 * </table>
 */

public static final int shape = 16843162; // 0x101019a

/**
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int shareInterpolator = 16843195; // 0x10101bb

/**
 * Specify the name of a user ID that will be shared between multiple
 * packages.  By default, each package gets its own unique user-id.
 * By setting this value on two or more packages, each of these packages
 * will be given a single shared user ID, so they can for example run
 * in the same process.  Note that for them to actually get the same
 * user ID, they must also be signed with the same signature.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int sharedUserId = 16842763; // 0x101000b

/**
 * Specify a label for the shared user UID of this package.  This is
 * only used if you have also used android:sharedUserId.  This must
 * be a reference to a string resource; it can not be an explicit
 * string.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int sharedUserLabel = 16843361; // 0x1010261

/**
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int shortcutDisabledMessage = 16844075; // 0x101052b

/**
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int shortcutId = 16844072; // 0x1010528

/**
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int shortcutLongLabel = 16844074; // 0x101052a

/**
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int shortcutShortLabel = 16844073; // 0x1010529

/**
 * Whether the view of this Preference should be disabled when
 * this Preference is disabled.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int shouldDisableView = 16843246; // 0x10101ee

/**
 * How this item should display in the Action Bar, if present.
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>always</td><td>2</td><td>Always show this item in an actionbar, even if it would override
 * the system's limits of how much stuff to put there. This may make
 * your action bar look bad on some screens. In most cases you should
 * use "ifRoom" instead. Mutually exclusive with "ifRoom" and "never".</td></tr>
 * <tr><td>collapseActionView</td><td>8</td><td>This item's action view collapses to a normal menu
 * item. When expanded, the action view takes over a
 * larger segment of its container.</td></tr>
 * <tr><td>ifRoom</td><td>1</td><td>Show this item in an action bar if there is room for it as determined
 * by the system. Favor this option over "always" where possible.
 * Mutually exclusive with "never" and "always".</td></tr>
 * <tr><td>never</td><td>0</td><td>Never show this item in an action bar, show it in the overflow menu instead.
 * Mutually exclusive with "ifRoom" and "always".</td></tr>
 * <tr><td>withText</td><td>4</td><td>When this item is shown as an action in the action bar, show a text
 * label with it even if it has an icon representation.</td></tr>
 * </table>
 */

public static final int showAsAction = 16843481; // 0x10102d9

/**
 * Whether to show an item for a default sound.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int showDefault = 16843258; // 0x10101fa

/**
 * Setting for which dividers to show.
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>beginning</td><td>1</td><td></td></tr>
 * <tr><td>end</td><td>4</td><td></td></tr>
 * <tr><td>middle</td><td>2</td><td></td></tr>
 * <tr><td>none</td><td>0</td><td></td></tr>
 * </table>
 */

public static final int showDividers = 16843561; // 0x1010329

/**
 * Specify that an Activity should be shown even if the current/foreground user
 * is different from the user of the Activity. This will also force the
 * <code>android.view.LayoutParams.FLAG_SHOW_WHEN_LOCKED</code> flag
 * to be set for all windows of this activity
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int showForAllUsers = 16844015; // 0x10104ef

/**
 * Whether to show any metadata when previewing the wallpaper. If this value is
 * set to true, any component that shows a preview of this live wallpaper should also show
 * accompanying information like the title, the description, the author and the context
 * description of this wallpaper so the user gets to know further information about this
 * wallpaper.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int showMetadataInPreview = 16844079; // 0x101052f

/**
 * Specify that an Activity should be shown over the lock screen and,
 * in a multiuser environment, across all users' windows.
 * @deprecated use {@link android.R.attr#showForAllUsers} instead.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

@Deprecated public static final int showOnLockScreen = 16843721; // 0x10103c9

/**
 * Whether to show an item for 'Silent'.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int showSilent = 16843259; // 0x10101fb

/**
 * Whether to draw on/off text.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int showText = 16843949; // 0x10104ad

/**
 * @deprecated Whether do show week numbers.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

@Deprecated public static final int showWeekNumber = 16843582; // 0x101033e

/**
 * Specifies whether an {@link android.app.Activity} should be shown on top of the the lock screen
 * whenever the lockscreen is up and the activity is resumed. Normally an activity will be
 * transitioned to the stopped state if it is started while the lockscreen is up, but with
 * this flag set the activity will remain in the resumed state visible on-top of the lock
 * screen.
 * <p>This should be used instead of {@link android.view.WindowManager.LayoutParams#FLAG_SHOW_WHEN_LOCKED}
 * flag set for Windows. When using the Window flag during activity startup, there may not be
 * time to add it before the system stops your activity for being behind the lock-screen.
 * This leads to a double life-cycle as it is then restarted.</p>
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int showWhenLocked = 16844137; // 0x1010569

/**
 * @deprecated The number of weeks to be shown.
 * <p>May be an integer value, such as "<code>100</code>".
 */

@Deprecated public static final int shownWeekCount = 16843585; // 0x1010341

/**
 * The zero-based index of the columns to shrink. The column indices
 * must be separated by a comma: 1, 2, 5. Illegal and duplicate
 * indices are ignored. You can shrink all columns by using the
 * value "*" instead. Note that a column can be marked stretchable
 * and shrinkable at the same time.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int shrinkColumns = 16843082; // 0x101014a

/**
 * Constrains the text to a single horizontally scrolling line
 * instead of letting it wrap onto multiple lines, and advances
 * focus instead of inserting a newline when you press the
 * enter key.
 * The default value is false (multi-line wrapped text mode) for non-editable text, but if
 * you specify any value for inputType, the default is true (single-line input field mode).
 * {@deprecated This attribute is deprecated. Use <code>maxLines</code> instead to change
 * the layout of a static text, and use the <code>textMultiLine</code> flag in the
 * inputType attribute instead for editable text views (if both singleLine and inputType
 * are supplied, the inputType flags will override the value of singleLine). }
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

@Deprecated public static final int singleLine = 16843101; // 0x101015d

/**
 * Whether to use single line for the preference title text. By default, preference title
 * will be constrained to one line, so the default value of this attribute is true.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int singleLineTitle = 16844124; // 0x101055c

/**
 * If set to true, a single instance of this component will run for
 * all users.  That instance will run as user 0, the default/primary
 * user.  When the app running is in processes for other users and interacts
 * with this component (by binding to a service for example) those processes will
 * always interact with the instance running for user 0.  Enabling
 * single user mode forces "exported" of the component to be false, to
 * help avoid introducing multi-user security bugs.  This feature is only
 * available to applications built in to the system image; you must hold the
 * permission INTERACT_ACROSS_USERS in order
 * to use this feature.  This flag can only be used with services,
 * receivers, and providers; it can not be used with activities.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int singleUser = 16843711; // 0x10103bf

/**
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>bottom</td><td>50</td><td>Slide to and from the bottom edge of the Scene.</td></tr>
 * <tr><td>end</td><td>800005</td><td>Slide to and from the x-axis position at the end of the Scene root.</td></tr>
 * <tr><td>left</td><td>3</td><td>Slide to and from the left edge of the Scene.</td></tr>
 * <tr><td>right</td><td>5</td><td>Slide to and from the right edge of the Scene.</td></tr>
 * <tr><td>start</td><td>800003</td><td>Slide to and from the x-axis position at the start of the Scene root.</td></tr>
 * <tr><td>top</td><td>30</td><td>Slide to and from the top edge of the Scene.</td></tr>
 * </table>
 */

public static final int slideEdge = 16843824; // 0x1010430

/**
 * Smaller icon of the authenticator.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int smallIcon = 16843422; // 0x101029e

/**
 * Indicates whether the application supports smaller screen form-factors.
 * A small screen is defined as one with a smaller aspect ratio than
 * the traditional HVGA screen; that is, for a portrait screen, less
 * tall than an HVGA screen.  In practice, this means a QVGA low
 * density or VGA high density screen.  An application that does
 * not support small screens <em>will not be available</em> for
 * small screen devices, since there is little the platform can do
 * to make such an application work on a smaller screen.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int smallScreens = 16843396; // 0x1010284

/**
 * When set to true, the list will use a more refined calculation
 * method based on the pixels height of the items visible on screen. This
 * property is set to true by default but should be set to false if your adapter
 * will display items of varying heights. When this property is set to true and
 * your adapter displays items of varying heights, the scrollbar thumb will
 * change size as the user scrolls through the list. When set to false, the list
 * will use only the number of items in the adapter and the number of items visible
 * on screen to determine the scrollbar's properties.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int smoothScrollbar = 16843313; // 0x1010231

/**
 * Boolean that controls whether a view should have sound effects
 * enabled for events such as clicking and touching.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int soundEffectsEnabled = 16843285; // 0x1010215

/**
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int spacing = 16843027; // 0x1010113

/**
 * Default style for spinner drop down items.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int spinnerDropDownItemStyle = 16842887; // 0x1010087

/**
 * Default spinner item style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int spinnerItemStyle = 16842889; // 0x1010089

/**
 * Display mode for spinner options.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>dialog</td><td>0</td><td>Spinner options will be presented to the user as a dialog window.</td></tr>
 * <tr><td>dropdown</td><td>1</td><td>Spinner options will be presented to the user as an inline dropdown
 * anchored to the spinner widget itself.</td></tr>
 * </table>
 */

public static final int spinnerMode = 16843505; // 0x10102f1

/**
 * Default Spinner style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int spinnerStyle = 16842881; // 0x1010081

/**
 * Whether the spinners are shown. Only valid for "spinner" mode.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int spinnersShown = 16843595; // 0x101034b

/**
 * Sets whether this ViewGroup should split MotionEvents
 * to separate child views during touch event dispatch.
 * If false (default), touch events will be dispatched to
 * the child view where the first pointer went down until
 * the last pointer goes up.
 * If true, touch events may be dispatched to multiple children.
 * MotionEvents for each pointer will be dispatched to the child
 * view where the initial ACTION_DOWN event happened.
 * See {@link android.view.ViewGroup#setMotionEventSplittingEnabled(boolean)}
 * for more information.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int splitMotionEvents = 16843503; // 0x10102ef

/**
 * When an application is partitioned into splits, this is the name of the
 * split that contains the defined component.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int splitName = 16844105; // 0x1010549

/**
 * Whether to split the track and leave a gap for the thumb drawable.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int splitTrack = 16843852; // 0x101044c

/**
 * Alpha value of the spot shadow projected by elevated views, between 0 and 1.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 */

public static final int spotShadowAlpha = 16843967; // 0x10104bf

/**
 * Sets a drawable as the content of this ImageView.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int src = 16843033; // 0x1010119

/**
 * Specify a URI scheme specific part that must exactly match, as per
 * {@link android.content.IntentFilter#addDataSchemeSpecificPart
 * IntentFilter.addDataSchemeSpecificPart()} with
 * {@link android.os.PatternMatcher#PATTERN_LITERAL}.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int ssp = 16843747; // 0x10103e3

/**
 * Specify a URI scheme specific part that matches a simple pattern, as per
 * {@link android.content.IntentFilter#addDataSchemeSpecificPart
 * IntentFilter.addDataSchemeSpecificPart()} with
 * {@link android.os.PatternMatcher#PATTERN_SIMPLE_GLOB}.
 * Note that because '\' is used as an escape character when
 * reading the string from XML (before it is parsed as a pattern),
 * you will need to double-escape: for example a literal "*" would
 * be written as "\\*" and a literal "\" would be written as
 * "\\\\".  This is basically the same as what you would need to
 * write if constructing the string in Java code.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int sspPattern = 16843749; // 0x10103e5

/**
 * Specify a URI scheme specific part that must be a prefix to match, as per
 * {@link android.content.IntentFilter#addDataSchemeSpecificPart
 * IntentFilter.addDataSchemeSpecificPart()} with
 * {@link android.os.PatternMatcher#PATTERN_PREFIX}.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int sspPrefix = 16843748; // 0x10103e4

/**
 * Used by ListView and GridView to stack their content from the bottom.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int stackFromBottom = 16843005; // 0x10100fd

/**
 * Default StackView style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int stackViewStyle = 16843838; // 0x101043e

/**
 * Default Star style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int starStyle = 16842882; // 0x1010082

/**
 * Start inset to apply to the layer. Overrides {@code left} or
 * {@code right} depending on layout direction.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int start = 16843995; // 0x10104db

/**
 * Start color of the gradient.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int startColor = 16843165; // 0x101019d

/**
 * Delay in milliseconds before the transition starts.
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int startDelay = 16843746; // 0x10103e2

/**
 * Delay in milliseconds before the animation runs, once start time is reached.
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int startOffset = 16843198; // 0x10101be

/**
 * X coordinate of the start point origin of the gradient.
 * Defined in same coordinates as the path itself
 * <p>May be a floating point value, such as "<code>1.2</code>".
 */

public static final int startX = 16844048; // 0x1010510

/**
 * Y coordinate of the start point of the gradient within the shape.
 * Defined in same coordinates as the path itself
 * <p>May be a floating point value, such as "<code>1.2</code>".
 */

public static final int startY = 16844049; // 0x1010511

/**
 * {@deprecated Use minDate instead.}
 * The first year (inclusive), for example "1940".
 * {@deprecated Use minDate instead.}
 * <p>May be an integer value, such as "<code>100</code>".
 */

@Deprecated public static final int startYear = 16843132; // 0x101017c

/**
 * Sets the state-based animator for the View.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int stateListAnimator = 16843848; // 0x1010448

/**
 * Indicates that an Activity does not need to have its freeze state
 * (as returned by {@link android.app.Activity#onSaveInstanceState}
 * retained in order to be restarted.  Generally you use this for activities
 * that do not store any state.  When this flag is set, if for some reason
 * the activity is killed before it has a chance to save its state,
 * then the system will not remove it from the activity stack like
 * it normally would.  Instead, the next time the user navigates to
 * it its {@link android.app.Activity#onCreate} method will be called
 * with a null icicle, just like it was starting for the first time.
 * <p>This is used by the Home activity to make sure it does not get
 * removed if it crashes for some reason.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int stateNotNeeded = 16842774; // 0x1010016

/**
 * State identifier indicating the popup will be above the anchor.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int state_above_anchor = 16842922; // 0x10100aa

/**
 * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * indicating that the Drawable is in a view that is hardware accelerated.
 * This means that the device can at least render a full-screen scaled
 * bitmap with one layer of text and bitmaps composited on top of it
 * at 60fps.  When this is set, the colorBackgroundCacheHint will be
 * ignored even if it specifies a solid color, since that optimization
 * is not needed.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int state_accelerated = 16843547; // 0x101031b

/**
 * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * set when a view or its parent has been "activated" meaning the user has currently
 * marked it as being of interest.  This is an alternative representation of
 * state_checked for when the state should be propagated down the view hierarchy.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int state_activated = 16843518; // 0x10102fe

/**
 * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * set when a view or drawable is considered "active" by its host. Actual usage may vary
 * between views. Consult the host view documentation for details.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int state_active = 16842914; // 0x10100a2

/**
 * State identifier indicating that the object <var>may</var> display a check mark. See
 * {@link android.R.attr#state_checked} for the identifier that indicates whether it is
 * actually checked.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int state_checkable = 16842911; // 0x101009f

/**
 * State identifier indicating that the object is currently checked.  See
 * {@link android.R.attr#state_checkable} for an additional identifier that can indicate
 * if any object may ever display a check, regardless of whether state_checked is
 * currently set.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int state_checked = 16842912; // 0x10100a0

/**
 * State for {@link android.graphics.drawable.StateListDrawable StateListDrawable}
 * indicating that the Drawable is in a view that is capable of accepting a drop of
 * the content currently being manipulated in a drag-and-drop operation.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int state_drag_can_accept = 16843624; // 0x1010368

/**
 * State for {@link android.graphics.drawable.StateListDrawable StateListDrawable}
 * indicating that a drag operation (for which the Drawable's view is a valid recipient)
 * is currently positioned over the Drawable.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int state_drag_hovered = 16843625; // 0x1010369

/**
 * State identifier indicating the group is empty (has no children).
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int state_empty = 16842921; // 0x10100a9

/**
 * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * set when a view is enabled.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int state_enabled = 16842910; // 0x101009e

/**
 * State identifier indicating the group is expanded.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int state_expanded = 16842920; // 0x10100a8

/**
 * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * set when a view or drawable is in the first position in an ordered set. Actual usage
 * may vary between views. Consult the host view documentation for details.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int state_first = 16842916; // 0x10100a4

/**
 * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * set when a view has input focus.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int state_focused = 16842908; // 0x101009c

/**
 * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * set when a pointer is hovering over the view.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int state_hovered = 16843623; // 0x1010367

/**
 * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * set when a view or drawable is in the last position in an ordered set. Actual usage
 * may vary between views. Consult the host view documentation for details.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int state_last = 16842918; // 0x10100a6

/**
 * State for {@link android.inputmethodservice.KeyboardView KeyboardView}
 * key preview background.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int state_long_pressable = 16843324; // 0x101023c

/**
 * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * set when a view or drawable is in the middle position in an ordered set. Actual usage
 * may vary between views. Consult the host view documentation for details.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int state_middle = 16842917; // 0x10100a5

/**
 * State identifier indicating a TextView has a multi-line layout.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int state_multiline = 16843597; // 0x101034d

/**
 * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * set when the user is pressing down in a view.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int state_pressed = 16842919; // 0x10100a7

/**
 * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * set when a view (or one of its parents) is currently selected.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int state_selected = 16842913; // 0x10100a1

/**
 * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * set when a view or drawable is considered "single" by its host. Actual usage may vary
 * between views. Consult the host view documentation for details.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int state_single = 16842915; // 0x10100a3

/**
 * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * set when a view's window has input focus.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int state_window_focused = 16842909; // 0x101009d

/**
 * A resource id of a static drawable.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int staticWallpaperPreview = 16843569; // 0x1010331

/**
 * The color for the status bar. If the color is not opaque, consider setting
 * {@link android.view.View#SYSTEM_UI_FLAG_LAYOUT_STABLE} and
 * {@link android.view.View#SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN}.
 * For this to take effect, the window must be drawing the system bar backgrounds with
 * {@link android.R.attr#windowDrawsSystemBarBackgrounds} and the status bar must not
 * have been requested to be translucent with
 * {@link android.R.attr#windowTranslucentStatus}.
 * Corresponds to {@link android.view.Window#setStatusBarColor(int)}.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int statusBarColor = 16843857; // 0x1010451

/**
 * The step size of the rating.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 */

public static final int stepSize = 16843078; // 0x1010146

/**
 * If set to true, this service with be automatically stopped
 * when the user remove a task rooted in an activity owned by
 * the application.  The default is false.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int stopWithTask = 16843626; // 0x101036a

/**
 * Different audio stream types.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>alarm</td><td>4</td><td></td></tr>
 * <tr><td>music</td><td>3</td><td></td></tr>
 * <tr><td>ring</td><td>2</td><td></td></tr>
 * <tr><td>system</td><td>1</td><td></td></tr>
 * <tr><td>voice</td><td>0</td><td></td></tr>
 * </table>
 */

public static final int streamType = 16843273; // 0x1010209

/**
 * The zero-based index of the columns to stretch. The column indices
 * must be separated by a comma: 1, 2, 5. Illegal and duplicate
 * indices are ignored. You can stretch all columns by using the
 * value "*" instead. Note that a column can be marked stretchable
 * and shrinkable at the same time.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int stretchColumns = 16843081; // 0x1010149

/**
 * Defines how columns should stretch to fill the available empty space, if any.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>columnWidth</td><td>2</td><td>Each column is stretched equally.</td></tr>
 * <tr><td>none</td><td>0</td><td>Stretching is disabled.</td></tr>
 * <tr><td>spacingWidth</td><td>1</td><td>The spacing between each column is stretched.</td></tr>
 * <tr><td>spacingWidthUniform</td><td>3</td><td>The spacing between each column is uniformly stretched..</td></tr>
 * </table>
 */

public static final int stretchMode = 16843030; // 0x1010116

/**
 * The opacity of a path stroke, as a value between 0 (completely transparent)
 * and 1 (completely opaque).
 * <p>May be a floating point value, such as "<code>1.2</code>".
 */

public static final int strokeAlpha = 16843979; // 0x10104cb

/**
 * The color to stroke the path if not defined implies no stroke.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int strokeColor = 16843782; // 0x1010406

/**
 * sets the linecap for a stroked path.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>butt</td><td>0</td><td></td></tr>
 * <tr><td>round</td><td>1</td><td></td></tr>
 * <tr><td>square</td><td>2</td><td></td></tr>
 * </table>
 */

public static final int strokeLineCap = 16843787; // 0x101040b

/**
 * sets the lineJoin for a stroked path.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>bevel</td><td>2</td><td></td></tr>
 * <tr><td>miter</td><td>0</td><td></td></tr>
 * <tr><td>round</td><td>1</td><td></td></tr>
 * </table>
 */

public static final int strokeLineJoin = 16843788; // 0x101040c

/**
 * sets the Miter limit for a stroked path.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 */

public static final int strokeMiterLimit = 16843789; // 0x101040d

/**
 * The width a path stroke.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 */

public static final int strokeWidth = 16843783; // 0x1010407

/**
 * Drawable for the arrow icon indicating a particular item is a submenu.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int subMenuArrow = 16844019; // 0x10104f3

/**
 * Background for the section containing the action (for example, voice search).
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int submitBackground = 16843912; // 0x1010488

/**
 * Specifies subtitle text used for navigationMode="normal".
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int subtitle = 16843473; // 0x10102d1

/**
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int subtitleTextAppearance = 16843823; // 0x101042f

/**
 * A color to apply to the subtitle string.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int subtitleTextColor = 16844004; // 0x10104e4

/**
 * Specifies a style to use for subtitle text.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int subtitleTextStyle = 16843513; // 0x10102f9

/**
 * The extra value of the subtype. This string can be any string and will be passed to
 * the SpellChecker.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int subtypeExtraValue = 16843674; // 0x101039a

/**
 * The unique id for the subtype. The input method framework keeps track of enabled
 * subtypes by ID. When the IME package gets upgraded, enabled IDs will stay enabled even
 * if other attributes are different. If the ID is unspecified (by calling the other
 * constructor or 0. Arrays.hashCode(new Object[] {locale, mode, extraValue,
 * isAuxiliary, overridesImplicitlyEnabledSubtype}) will be used instead.
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int subtypeId = 16843713; // 0x10103c1

/**
 * The locale of the subtype. This string should be a locale (for example, en_US and
 * fr_FR). This is also used by the framework to know the supported locales
 * of the spell checker. {@link android.view.textservice.SpellCheckerSubtype#getLocale()}
 * returns the value specified in this attribute.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int subtypeLocale = 16843673; // 0x1010399

/**
 * If you wish to handle an action key while a suggestion is being displayed <i>and
 * selected</i>, there are two ways to handle this.  If <i>all</i> of your suggestions
 * can handle the action key, you can simply define the action message using this
 * attribute.  This will be added to the
 * {@link android.content.Intent#ACTION_SEARCH ACTION_SEARCH} intent that is passed to your
 * searchable activity.  To examine the string, use
 * {@link android.content.Intent#getStringExtra getStringExtra(SearchManager.ACTION_MSG)}.
 * <i>Optional attribute.</i>
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int suggestActionMsg = 16843228; // 0x10101dc

/**
 * If you wish to handle an action key while a suggestion is being displayed <i>and
 * selected</i>, but you do not wish to enable this action key for every suggestion,
 * then you can use this attribute to control it on a suggestion-by-suggestion basis.
 * First, you must define a column (and name it here) where your suggestions will include
 * the action string.  Then, in your content provider, you must provide this column, and
 * when desired, provide data in this column.
 * The search manager will look at your suggestion cursor, using the string
 * provided here in order to select a column, and will use that to select a string from
 * the cursor.  That string will be added to the
 * {@link android.content.Intent#ACTION_SEARCH ACTION_SEARCH} intent that is passed to
 * your searchable activity.  To examine the string, use
 * {@link android.content.Intent#getStringExtra
 * getStringExtra(SearchManager.ACTION_MSG)}.  <i>If the data does not exist for the
 * selection suggestion, the action key will be ignored.</i><i>Optional attribute.</i>
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int suggestActionMsgColumn = 16843229; // 0x10101dd

/**
 * Layout for query suggestion rows.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int suggestionRowLayout = 16843910; // 0x1010486

/**
 * The summary for the item.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int summary = 16843241; // 0x10101e9

/**
 * Column in data table that summarizes this data.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int summaryColumn = 16843426; // 0x10102a2

/**
 * The summary for the Preference in a PreferenceActivity screen when the
 * CheckBoxPreference is unchecked. If separate on/off summaries are not
 * needed, the summary attribute can be used instead.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int summaryOff = 16843248; // 0x10101f0

/**
 * The summary for the Preference in a PreferenceActivity screen when the
 * CheckBoxPreference is checked. If separate on/off summaries are not
 * needed, the summary attribute can be used instead.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int summaryOn = 16843247; // 0x10101ef

/**
 * Flag indicating whether this voice interaction service is capable of handling the
 * assist action.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int supportsAssist = 16844016; // 0x10104f0

/**
 * Flag indicating whether this voice interaction service is capable of being launched
 * from the keyguard.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int supportsLaunchVoiceAssistFromKeyguard = 16844017; // 0x10104f1

/**
 * Flag indicating whether this voice interaction service can handle local voice
 * interaction requests from an Activity. This flag is new in
 * {@link android.os.Build.VERSION_CODES#N} and not used in previous versions.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int supportsLocalInteraction = 16844047; // 0x101050f

/**
 * Indicates that the activity specifically supports the picture-in-picture form of
 * multi-window. If true, this activity will support entering picture-in-picture, but will
 * only support split-screen and other forms of multi-window if
 * {@link android.R.attr#resizeableActivity} is also set to true.
 * Note that your activity may still be resized even if this attribute is true and
 * {@link android.R.attr#resizeableActivity} is false.
 * <p>The default value is <code>false</code>.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int supportsPictureInPicture = 16844023; // 0x10104f7

/**
 * Declare that your application will be able to deal with RTL (right to left) layouts.
 * The default value is false.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int supportsRtl = 16843695; // 0x10103af

/**
 * Set to true if this input method supports ways to switch to
 * a next input method (for example, a globe key.). When this is true and
 * InputMethodManager#shouldOfferSwitchingToNextInputMethod() returns true,
 * the IME has to offer ways to invoke InputMethodManager#switchToNextInputMethod()
 * accordingly.
 * <p> Note that the system determines the most appropriate next input method
 * and subtype in order to provide the consistent user experience in switching
 * between IMEs and subtypes.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int supportsSwitchingToNextInputMethod = 16843755; // 0x10103eb

/**
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int supportsUploading = 16843419; // 0x101029b

/**
 * Minimum width for the switch component.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int switchMinWidth = 16843632; // 0x1010370

/**
 * Minimum space between the switch and caption text.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int switchPadding = 16843633; // 0x1010371

/**
 * Default style for switch preferences.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int switchPreferenceStyle = 16843629; // 0x101036d

/**
 * Default style for the Switch widget.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int switchStyle = 16843839; // 0x101043f

/**
 * TextAppearance style for text displayed on the switch thumb.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int switchTextAppearance = 16843630; // 0x101036e

/**
 * The text used on the switch itself when in the "off" state.
 * This should be a very SHORT string, as it appears in a small space.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int switchTextOff = 16843628; // 0x101036c

/**
 * The text used on the switch itself when in the "on" state.
 * This should be a very SHORT string, as it appears in a small space.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int switchTextOn = 16843627; // 0x101036b

/**
 * Flag indicating whether this content provider would like to
 * participate in data synchronization.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int syncable = 16842777; // 0x1010019

/**
 * Determines whether the strip under the tab indicators is drawn or not.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int tabStripEnabled = 16843453; // 0x10102bd

/**
 * Drawable used to draw the left part of the strip underneath the tabs.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int tabStripLeft = 16843451; // 0x10102bb

/**
 * Drawable used to draw the right part of the strip underneath the tabs.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int tabStripRight = 16843452; // 0x10102bc

/**
 * Default TabWidget style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int tabWidgetStyle = 16842883; // 0x1010083

/**
 * Supply a tag for this view containing a String, to be retrieved
 * later with {@link android.view.View#getTag View.getTag()} or
 * searched for with {@link android.view.View#findViewWithTag
 * View.findViewWithTag()}.  It is generally preferable to use
 * IDs (through the android:id attribute) instead of tags because
 * they are faster and allow for compile-time type checking.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int tag = 16842961; // 0x10100d1

/**
 * The name of the activity this alias should launch.  The activity
 * must be in the same manifest as the alias, and have been defined
 * in that manifest before the alias here.  This must use a Java-style
 * naming convention to ensure the name is unique, for example
 * "com.mycompany.MyName".
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int targetActivity = 16843266; // 0x1010202

/**
 * The class part of the ComponentName to assign to the Intent, as per
 * {@link android.content.Intent#setComponent Intent.setComponent()}.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int targetClass = 16842799; // 0x101002f

/**
 * @deprecated Removed.
 * Reference to an array resource that be used as description for the targets around the circle.
 * {@deprecated Removed.}
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

@Deprecated public static final int targetDescriptions = 16843680; // 0x10103a0

/**
 * The id of a target on which this transition will animate changes.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int targetId = 16843740; // 0x10103dc

/**
 * The transitionName of the target on which this transition will animation changes.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int targetName = 16843853; // 0x101044d

/**
 * The name of the application package that an Instrumentation object
 * will run against.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int targetPackage = 16842785; // 0x1010021

/**
 * The name of an application's processes that an Instrumentation object
 * will run against.  If not specified, only runs in the main process of the targetPackage.
 * Can either be a comma-separated list of process names or '*' for any process that
 * launches to run targetPackage code.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int targetProcesses = 16844097; // 0x1010541

/**
 * Specifies the target sandbox this app wants to use. Higher sandbox versions
 * will have increasing levels of security.
 * <p>The default value of this attribute is <code>1</code>.
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int targetSandboxVersion = 16844108; // 0x101054c

/**
 * This is the SDK version number that the application is targeting.
 * It is able to run on older versions (down to minSdkVersion), but
 * was explicitly tested to work with the version specified here.
 * Specifying this version allows the platform to disable compatibility
 * code that are not required or enable newer features that are not
 * available to older applications.  This may also be a string
 * (such as "Donut") if this is built against a development
 * branch, in which case minSdkVersion is also forced to be that
 * string.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int targetSdkVersion = 16843376; // 0x1010270

/**
 * Specify a task name that activities have an "affinity" to.
 * Use with the application tag (to supply a default affinity for all
 * activities in the application), or with the activity tag (to supply
 * a specific affinity for that component).
 * <p>The default value for this attribute is the same as the package
 * name, indicating that all activities in the manifest should generally
 * be considered a single "application" to the user.  You can use this
 * attribute to modify that behavior: either giving them an affinity
 * for another task, if the activities are intended to be part of that
 * task from the user's perspective, or using an empty string for
 * activities that have no affinity to a task.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int taskAffinity = 16842770; // 0x1010012

/**
 * When closing the last activity of a task, this is the animation that is
 * run on the activity of the next task (which is entering the screen).
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int taskCloseEnterAnimation = 16842942; // 0x10100be

/**
 * When opening an activity in a new task, this is the animation that is
 * run on the activity of the old task (which is exiting the screen).
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int taskCloseExitAnimation = 16842943; // 0x10100bf

/**
 * When opening an activity in a new task, this is the animation that is
 * run on the activity of the new task (which is entering the screen).
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int taskOpenEnterAnimation = 16842940; // 0x10100bc

/**
 * When opening an activity in a new task, this is the animation that is
 * run on the activity of the old task (which is exiting the screen).
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int taskOpenExitAnimation = 16842941; // 0x10100bd

/**
 * When sending the current task to the background, this is the
 * animation that is run on the top activity of the task behind
 * it (which is entering the screen).
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int taskToBackEnterAnimation = 16842946; // 0x10100c2

/**
 * When sending the current task to the background, this is the
 * animation that is run on the top activity of the current task
 * (which is exiting the screen).
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int taskToBackExitAnimation = 16842947; // 0x10100c3

/**
 * When bringing an existing task to the foreground, this is the
 * animation that is run on the top activity of the task being brought
 * to the foreground (which is entering the screen).
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int taskToFrontEnterAnimation = 16842944; // 0x10100c0

/**
 * When bringing an existing task to the foreground, this is the
 * animation that is run on the current foreground activity
 * (which is exiting the screen).
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int taskToFrontExitAnimation = 16842945; // 0x10100c1

/**
 * This is the amount of tension.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 */

public static final int tension = 16843370; // 0x101026a

/**
 * Option to indicate this application is only for testing purposes.
 * For example, it may expose functionality or data outside of itself
 * that would cause a security hole, but is useful for testing.  This
 * kind of application can not be installed without the
 * INSTALL_ALLOW_TEST flag, which means only through adb install.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int testOnly = 16843378; // 0x1010272

/**
 * Text to display.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int text = 16843087; // 0x101014f

/**
 * Defines the alignment of the text.
 * <p>May be an integer value, such as "<code>100</code>".
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>center</td><td>4</td><td>Center the paragraph, for example: ALIGN_CENTER.</td></tr>
 * <tr><td>gravity</td><td>1</td><td>Default for the root view. The gravity determines the alignment, ALIGN_NORMAL,
 * ALIGN_CENTER, or ALIGN_OPPOSITE, which are relative to each paragraph’s
 * text direction.</td></tr>
 * <tr><td>inherit</td><td>0</td><td>Default.</td></tr>
 * <tr><td>textEnd</td><td>3</td><td>Align to the end of the paragraph, for example: ALIGN_OPPOSITE.</td></tr>
 * <tr><td>textStart</td><td>2</td><td>Align to the start of the paragraph, for example: ALIGN_NORMAL.</td></tr>
 * <tr><td>viewEnd</td><td>6</td><td>Align to the end of the view, which is ALIGN_RIGHT if the view’s resolved
 * layoutDirection is LTR, and ALIGN_LEFT otherwise.</td></tr>
 * <tr><td>viewStart</td><td>5</td><td>Align to the start of the view, which is ALIGN_LEFT if the view’s resolved
 * layoutDirection is LTR, and ALIGN_RIGHT otherwise.</td></tr>
 * </table>
 */

public static final int textAlignment = 16843697; // 0x10103b1

/**
 * Present the text in ALL CAPS. This may use a small-caps form when available.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int textAllCaps = 16843660; // 0x101038c

/**
 * Default appearance of text: color, typeface, size, and style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int textAppearance = 16842804; // 0x1010034

/**
 * Text color, typeface, size, and style for the text inside of a button.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int textAppearanceButton = 16843271; // 0x1010207

/**
 * Default appearance of text against an inverted background:
 * color, typeface, size, and style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int textAppearanceInverse = 16842805; // 0x1010035

/**
 * Text color, typeface, size, and style for "large" text. Defaults to primary text color.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int textAppearanceLarge = 16842816; // 0x1010040

/**
 * Text color, typeface, size, and style for "large" inverse text. Defaults to primary inverse text color.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int textAppearanceLargeInverse = 16842819; // 0x1010043

/**
 * Text color, typeface, size, and style for the text inside of a popup menu.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int textAppearanceLargePopupMenu = 16843521; // 0x1010301

/**
 * The preferred TextAppearance for the primary text of list items.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int textAppearanceListItem = 16843678; // 0x101039e

/**
 * The preferred TextAppearance for the secondary text of list items.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int textAppearanceListItemSecondary = 16843826; // 0x1010432

/**
 * The preferred TextAppearance for the primary text of small list items.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int textAppearanceListItemSmall = 16843679; // 0x101039f

/**
 * Text color, typeface, size, and style for "medium" text. Defaults to primary text color.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int textAppearanceMedium = 16842817; // 0x1010041

/**
 * Text color, typeface, size, and style for "medium" inverse text. Defaults to primary inverse text color.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int textAppearanceMediumInverse = 16842820; // 0x1010044

/**
 * Text color, typeface, size, and style for header text inside of a popup menu.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int textAppearancePopupMenuHeader = 16844034; // 0x1010502

/**
 * Text color, typeface, size, and style for system search result subtitle. Defaults to primary inverse text color.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int textAppearanceSearchResultSubtitle = 16843424; // 0x10102a0

/**
 * Text color, typeface, size, and style for system search result title. Defaults to primary inverse text color.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int textAppearanceSearchResultTitle = 16843425; // 0x10102a1

/**
 * Text color, typeface, size, and style for "small" text. Defaults to secondary text color.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int textAppearanceSmall = 16842818; // 0x1010042

/**
 * Text color, typeface, size, and style for "small" inverse text. Defaults to secondary inverse text color.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int textAppearanceSmallInverse = 16842821; // 0x1010045

/**
 * Text color, typeface, size, and style for small text inside of a popup menu.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int textAppearanceSmallPopupMenu = 16843522; // 0x1010302

/**
 * Drawable to use for check marks.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int textCheckMark = 16842822; // 0x1010046

/**
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int textCheckMarkInverse = 16842823; // 0x1010047

/**
 * Color of text (usually same as colorForeground).
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int textColor = 16842904; // 0x1010098

/**
 * Color of list item text in alert dialogs.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int textColorAlertDialogListItem = 16843526; // 0x1010306

/**
 * Color of highlighted text.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int textColorHighlight = 16842905; // 0x1010099

/**
 * Color of highlighted text, when used in a light theme.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int textColorHighlightInverse = 16843599; // 0x101034f

/**
 * Color of hint text (displayed when the field is empty).
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int textColorHint = 16842906; // 0x101009a

/**
 * Inverse hint text color.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int textColorHintInverse = 16842815; // 0x101003f

/**
 * Color of link text (URLs).
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int textColorLink = 16842907; // 0x101009b

/**
 * Color of link text (URLs), when used in a light theme.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int textColorLinkInverse = 16843600; // 0x1010350

/**
 * The most prominent text color.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int textColorPrimary = 16842806; // 0x1010036

/**
 * Bright text color. Only differentiates based on the disabled state.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int textColorPrimaryDisableOnly = 16842807; // 0x1010037

/**
 * Primary inverse text color, useful for inverted backgrounds.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int textColorPrimaryInverse = 16842809; // 0x1010039

/**
 * Bright inverse text color. Only differentiates based on the disabled state.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int textColorPrimaryInverseDisableOnly = 16843403; // 0x101028b

/**
 * Bright inverse text color. This does not differentiate the disabled state.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int textColorPrimaryInverseNoDisable = 16842813; // 0x101003d

/**
 * Bright text color. This does not differentiate the disabled state. As an example,
 * buttons use this since they display the disabled state via the background and not the
 * foreground text color.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int textColorPrimaryNoDisable = 16842811; // 0x101003b

/**
 * Secondary text color.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int textColorSecondary = 16842808; // 0x1010038

/**
 * Secondary inverse text color, useful for inverted backgrounds.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int textColorSecondaryInverse = 16842810; // 0x101003a

/**
 * Dim inverse text color. This does not differentiate the disabled state.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int textColorSecondaryInverseNoDisable = 16842814; // 0x101003e

/**
 * Dim text color. This does not differentiate the disabled state.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int textColorSecondaryNoDisable = 16842812; // 0x101003c

/**
 * Tertiary text color.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int textColorTertiary = 16843282; // 0x1010212

/**
 * Tertiary inverse text color, useful for inverted backgrounds.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int textColorTertiaryInverse = 16843283; // 0x1010213

/**
 * Reference to a drawable that will be drawn under the insertion cursor.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int textCursorDrawable = 16843618; // 0x1010362

/**
 * Defines the direction of the text.
 * <p>May be an integer value, such as "<code>100</code>".
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>anyRtl</td><td>2</td><td>The paragraph direction is RTL if it contains any strong RTL character, otherwise
 * it is LTR if it contains any strong LTR characters.  If there are neither, the
 * paragraph direction is the view’s resolved layout direction.</td></tr>
 * <tr><td>firstStrong</td><td>1</td><td>Default for the root view. The first strong directional character determines the
 * paragraph direction.  If there is no strong directional character, the paragraph
 * direction is the view’s resolved layout direction.</td></tr>
 * <tr><td>firstStrongLtr</td><td>6</td><td>The first strong directional character determines the paragraph direction. If
 * there is no strong directional character, the paragraph direction is LTR.</td></tr>
 * <tr><td>firstStrongRtl</td><td>7</td><td>The first strong directional character determines the paragraph direction. If
 * there is no strong directional character, the paragraph direction is RTL.</td></tr>
 * <tr><td>inherit</td><td>0</td><td>Default.</td></tr>
 * <tr><td>locale</td><td>5</td><td>The paragraph direction is coming from the system Locale.</td></tr>
 * <tr><td>ltr</td><td>3</td><td>The paragraph direction is left to right.</td></tr>
 * <tr><td>rtl</td><td>4</td><td>The paragraph direction is right to left.</td></tr>
 * </table>
 */

public static final int textDirection = 16843696; // 0x10103b0

/**
 * Variation of textEditPasteWindowLayout displayed when the clipboard is empty.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int textEditNoPasteWindowLayout = 16843541; // 0x1010315

/**
 * The layout of the view that is displayed on top of the cursor to paste inside a
 * TextEdit field.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int textEditPasteWindowLayout = 16843540; // 0x1010314

/**
 * Variation of textEditSidePasteWindowLayout displayed when the clipboard is empty.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int textEditSideNoPasteWindowLayout = 16843615; // 0x101035f

/**
 * Used instead of textEditPasteWindowLayout when the window is moved on the side of the
 * insertion cursor because it would be clipped if it were positioned on top.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int textEditSidePasteWindowLayout = 16843614; // 0x101035e

/**
 * Layout of the TextView item that will populate the suggestion popup window.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int textEditSuggestionItemLayout = 16843636; // 0x1010374

/**
 * When set to true, the list will filter results as the user types. The
 * List's adapter must support the Filterable interface for this to work.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int textFilterEnabled = 16843007; // 0x10100ff

/**
 * Weight for the font used in the TextView.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * <p>May be an integer value, such as "<code>100</code>".
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 */

public static final int textFontWeight = 16844165; // 0x1010585

/**
 * Indicates that the content of a non-editable TextView can be selected.
 * Default value is false. EditText content is always selectable.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int textIsSelectable = 16843542; // 0x1010316

/**
 * The text for the button when it is not checked.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int textOff = 16843045; // 0x1010125

/**
 * The text for the button when it is checked.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int textOn = 16843044; // 0x1010124

/**
 * Sets the horizontal scaling factor for the text.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 */

public static final int textScaleX = 16843089; // 0x1010151

/**
 * Reference to a drawable that will be used to display a text selection
 * anchor for positioning the cursor within text.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int textSelectHandle = 16843463; // 0x10102c7

/**
 * Reference to a drawable that will be used to display a text selection
 * anchor on the left side of a selection region.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int textSelectHandleLeft = 16843461; // 0x10102c5

/**
 * Reference to a drawable that will be used to display a text selection
 * anchor on the right side of a selection region.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int textSelectHandleRight = 16843462; // 0x10102c6

/**
 * Reference to a style that will be used for the window containing a text
 * selection anchor.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int textSelectHandleWindowStyle = 16843464; // 0x10102c8

/**
 * Size of text. Recommended dimension type for text is "sp" for scaled-pixels (example: 15sp).
 * Supported values include the following:<p/>
 * <ul>
 * <li><b>px</b> Pixels</li>
 * <li><b>sp</b> Scaled pixels (scaled to relative pixel size on screen). See {@link android.util.DisplayMetrics} for more information.</li>
 * <li><b>pt</b> Points</li>
 * <li><b>dip</b> Device independent pixels. See {@link android.util.DisplayMetrics} for more information.</li>
 * </ul>
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int textSize = 16842901; // 0x1010095

/**
 * Default text typeface style.
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>bold</td><td>1</td><td></td></tr>
 * <tr><td>italic</td><td>2</td><td></td></tr>
 * <tr><td>normal</td><td>0</td><td></td></tr>
 * </table>
 */

public static final int textStyle = 16842903; // 0x1010097

/**
 * Reference to a style that will be used for the window containing a list of possible
 * text suggestions in an EditText.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int textSuggestionsWindowStyle = 16843635; // 0x1010373

/**
 * Default TextView style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int textViewStyle = 16842884; // 0x1010084

/**
 * The overall theme to use for an activity.  Use with either the
 * application tag (to supply a default theme for all activities) or
 * the activity tag (to supply a specific theme for that activity).
 * <p>This automatically sets
 * your activity's Context to use this theme, and may also be used
 * for "starting" animations prior to the activity being launched (to
 * better match what the activity actually looks like).  It is a reference
 * to a style resource defining the theme.  If not set, the default
 * system theme will be used.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int theme = 16842752; // 0x1010000

/**
 * Thickness of the ring. When defined, thicknessRatio is ignored.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int thickness = 16843360; // 0x1010260

/**
 * Thickness of the ring expressed as a ratio of the ring's width. For instance,
 * if thicknessRatio=3, then the thickness equals the ring's width divided by 3.
 * This value is ignored if innerRadius is defined. Default value is 3.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 */

public static final int thicknessRatio = 16843164; // 0x101019c

/**
 * Draws the thumb on a seekbar.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int thumb = 16843074; // 0x1010142

/**
 * An offset for the thumb that allows it to extend out of the range of the track.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int thumbOffset = 16843075; // 0x1010143

/**
 * Position of thumb in relation to the track.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>inside</td><td>1</td><td>The thumb is entirely inside the track. At its extremes,
 * the thumb will be contained entirely within the track.</td></tr>
 * <tr><td>midpoint</td><td>0</td><td>The thumb's midpoint is anchored to the track. At its
 * extremes, the thumb will extend half-way outside the
 * track.</td></tr>
 * </table>
 */

public static final int thumbPosition = 16844005; // 0x10104e5

/**
 * Amount of padding on either side of text within the switch thumb.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int thumbTextPadding = 16843634; // 0x1010372

/**
 * Tint to apply to the thumb drawable.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int thumbTint = 16843889; // 0x1010471

/**
 * Blending mode used to apply the thumb tint.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
 * result to valid color values. Saturate(S + D)</td></tr>
 * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
 * the tint. [Sa * Da, Sc * Dc]</td></tr>
 * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
 * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
 * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
 * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
 * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
 * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
 * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
 * </table>
 */

public static final int thumbTintMode = 16843890; // 0x1010472

/**
 * Reference to the wallpaper's thumbnail bitmap.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int thumbnail = 16843429; // 0x10102a5

/**
 * Drawable displayed at each progress position on a seekbar.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int tickMark = 16844042; // 0x101050a

/**
 * Tint to apply to the tick mark drawable.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int tickMarkTint = 16844043; // 0x101050b

/**
 * Blending mode used to apply the tick mark tint.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
 * result to valid color values. Saturate(S + D)</td></tr>
 * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
 * the tint. [Sa * Da, Sc * Dc]</td></tr>
 * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
 * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
 * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
 * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
 * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
 * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
 * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
 * </table>
 */

public static final int tickMarkTintMode = 16844044; // 0x101050c

/**
 * Defines the tile mode. When the tile mode is enabled, the bitmap is repeated.
 * Gravity is ignored when the tile mode is enabled. Default value is "disabled".
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>clamp</td><td>0</td><td>Replicates the edge color.</td></tr>
 * <tr><td>disabled</td><td>ffffffff</td><td>Do not tile the bitmap. This is the default value.</td></tr>
 * <tr><td>mirror</td><td>2</td><td>Repeats the shader's image horizontally and vertically, alternating
 * mirror images so that adjacent images always seam.</td></tr>
 * <tr><td>repeat</td><td>1</td><td>Repeats the bitmap in both direction.</td></tr>
 * </table>
 */

public static final int tileMode = 16843265; // 0x1010201

/**
 * Defines the horizontal tile mode. When the tile mode is enabled, the bitmap is repeated.
 * Gravity is ignored when the tile mode is enabled. Default value is "disabled".
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>clamp</td><td>0</td><td>Replicates the edge color.</td></tr>
 * <tr><td>disabled</td><td>ffffffff</td><td>Do not tile the bitmap. This is the default value.</td></tr>
 * <tr><td>mirror</td><td>2</td><td>Repeats the shader's image horizontally, alternating
 * mirror images so that adjacent images always seam.</td></tr>
 * <tr><td>repeat</td><td>1</td><td>Repeats the bitmap horizontally.</td></tr>
 * </table>
 */

public static final int tileModeX = 16843895; // 0x1010477

/**
 * Defines the vertical tile mode. When the tile mode is enabled, the bitmap is repeated.
 * Gravity is ignored when the tile mode is enabled. Default value is "disabled".
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>clamp</td><td>0</td><td>Replicates the edge color.</td></tr>
 * <tr><td>disabled</td><td>ffffffff</td><td>Do not tile the bitmap. This is the default value.</td></tr>
 * <tr><td>mirror</td><td>2</td><td>Repeats the shader's image vertically, alternating
 * mirror images so that adjacent images always seam.</td></tr>
 * <tr><td>repeat</td><td>1</td><td>Repeats the bitmap vertically.</td></tr>
 * </table>
 */

public static final int tileModeY = 16843896; // 0x1010478

/**
 * The TimePicker dialog theme.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int timePickerDialogTheme = 16843934; // 0x101049e

/**
 * Defines the look of the widget. Prior to the L release, the only choice was
 * spinner. As of L, with the Material theme selected, the default layout is clock,
 * but this attribute can be used to force spinner to be used instead.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>clock</td><td>2</td><td>Time picker with clock face to select the time.</td></tr>
 * <tr><td>spinner</td><td>1</td><td>Time picker with spinner controls to select the time.</td></tr>
 * </table>
 */

public static final int timePickerMode = 16843956; // 0x10104b4

/**
 * The TimePicker style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int timePickerStyle = 16843933; // 0x101049d

/**
 * Specifies the time zone to use. When this attribute is specified, the
 * TextClock will ignore the time zone of the system. To use the user's
 * time zone, do not specify this attribute. The default value is the
 * user's time zone. Please refer to {@link java.util.TimeZone} for more
 * information about time zone ids.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int timeZone = 16843724; // 0x10103cc

/**
 * The tinting color for the image. By default, the tint will blend using SRC_ATOP mode.
 * Please note that for compatibility reasons, this is NOT consistent with the default
 * SRC_IN tint mode used by {@link android.widget.ImageView#setImageTintList} and by
 * similar tint attributes on other views.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int tint = 16843041; // 0x1010121

/**
 * When a tint color is set, specifies its Porter-Duff blending mode. The
 * default value is src_in, which treats the drawable as an alpha mask.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
 * result to valid color values. Saturate(S + D)</td></tr>
 * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
 * the tint. [Sa * Da, Sc * Dc]</td></tr>
 * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
 * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
 * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
 * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
 * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
 * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
 * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
 * </table>
 */

public static final int tintMode = 16843771; // 0x10103fb

/**
 * The title associated with the item.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int title = 16843233; // 0x10101e1

/**
 * The condensed title associated with the item.  This is used in situations where the
 * normal title may be too long to be displayed.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int titleCondensed = 16843234; // 0x10101e2

/**
 * Specifies extra space on the left, start, right and end sides
 * of the toolbar's title. Margin values should be positive.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int titleMargin = 16844024; // 0x10104f8

/**
 * Specifies extra space on the bottom side of the toolbar's title.
 * If both this attribute and titleMargin are specified, then this
 * attribute takes precedence. Margin values should be positive.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int titleMarginBottom = 16844028; // 0x10104fc

/**
 * Specifies extra space on the end side of the toolbar's title.
 * If both this attribute and titleMargin are specified, then this
 * attribute takes precedence. Margin values should be positive.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int titleMarginEnd = 16844026; // 0x10104fa

/**
 * Specifies extra space on the start side of the toolbar's title.
 * If both this attribute and titleMargin are specified, then this
 * attribute takes precedence. Margin values should be positive.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int titleMarginStart = 16844025; // 0x10104f9

/**
 * Specifies extra space on the top side of the toolbar's title.
 * If both this attribute and titleMargin are specified, then this
 * attribute takes precedence. Margin values should be positive.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int titleMarginTop = 16844027; // 0x10104fb

/**
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int titleTextAppearance = 16843822; // 0x101042e

/**
 * A color to apply to the title string.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int titleTextColor = 16844003; // 0x10104e3

/**
 * Specifies a style to use for title text.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int titleTextStyle = 16843512; // 0x10102f8

/**
 * <p>May be a floating point value, such as "<code>1.2</code>".
 */

public static final int toAlpha = 16843211; // 0x10101cb

/**
 * <p>May be a floating point value, such as "<code>1.2</code>".
 */

public static final int toDegrees = 16843188; // 0x10101b4

/**
 * Keyframe identifier for the ending state.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int toId = 16843849; // 0x1010449

/**
 * The destination scene in this scene change.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int toScene = 16843742; // 0x10103de

/**
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 */

public static final int toXDelta = 16843207; // 0x10101c7

/**
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 */

public static final int toXScale = 16843203; // 0x10101c3

/**
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 */

public static final int toYDelta = 16843209; // 0x10101c9

/**
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 */

public static final int toYScale = 16843205; // 0x10101c5

/**
 * Default Toolbar style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int toolbarStyle = 16843946; // 0x10104aa

/**
 * The tooltip text associated with the item.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int tooltipText = 16844084; // 0x1010534

/**
 * Amount of top padding inside the gradient shape.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int top = 16843182; // 0x10101ae

/**
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int topBright = 16842955; // 0x10100cb

/**
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int topDark = 16842951; // 0x10100c7

/**
 * Radius of the top left corner.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int topLeftRadius = 16843177; // 0x10101a9

/**
 * Extra offset for the handle at the top of the SlidingDrawer.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int topOffset = 16843352; // 0x1010258

/**
 * Radius of the top right corner.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int topRightRadius = 16843178; // 0x10101aa

/**
 * Set to true if this ViewGroup blocks focus in the presence of a touchscreen.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int touchscreenBlocksFocus = 16843919; // 0x101048f

/**
 * Drawable to use as the "track" that the switch thumb slides within.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int track = 16843631; // 0x101036f

/**
 * Tint to apply to the track.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int trackTint = 16843993; // 0x10104d9

/**
 * Blending mode used to apply the track tint.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
 * result to valid color values. Saturate(S + D)</td></tr>
 * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
 * the tint. [Sa * Da, Sc * Dc]</td></tr>
 * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
 * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
 * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
 * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
 * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
 * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
 * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
 * </table>
 */

public static final int trackTintMode = 16843994; // 0x10104da

/**
 * Sets the transcript mode for the list. In transcript mode, the list
 * scrolls to the bottom to make new items visible when they are added.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>alwaysScroll</td><td>2</td><td>The list will automatically scroll to the bottom, no matter what items
 * are currently visible.</td></tr>
 * <tr><td>disabled</td><td>0</td><td>Disables transcript mode. This is the default value.</td></tr>
 * <tr><td>normal</td><td>1</td><td>The list will automatically scroll to the bottom when
 * a data set change notification is received and only if the last item is
 * already visible on screen.</td></tr>
 * </table>
 */

public static final int transcriptMode = 16843008; // 0x1010100

/**
 * x location of the pivot point around which the view will rotate and scale.
 * This xml attribute sets the pivotX property of the View.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int transformPivotX = 16843552; // 0x1010320

/**
 * y location of the pivot point around which the view will rotate and scale.
 * This xml attribute sets the pivotY property of the View.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int transformPivotY = 16843553; // 0x1010321

/**
 * The id of a transition to be used in a particular scene change.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int transition = 16843743; // 0x10103df

/**
 * Sets whether or not this ViewGroup should be treated as a single entity
 * when doing an Activity transition. Typically, the elements inside a
 * ViewGroup are each transitioned from the scene individually. The default
 * for a ViewGroup is false unless it has a background. See
 * {@link android.app.ActivityOptions#makeSceneTransitionAnimation(android.app.Activity,
 * android.view.View, String)} for more information. Corresponds to
 * {@link android.view.ViewGroup#setTransitionGroup(boolean)}.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int transitionGroup = 16843777; // 0x1010401

/**
 * Names a View such that it can be identified for Transitions. Names should be
 * unique in the View hierarchy.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int transitionName = 16843776; // 0x1010400

/**
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>sequential</td><td>1</td><td>child transitions should be played sequentially, in the same order
 * as the xml.</td></tr>
 * <tr><td>together</td><td>0</td><td>child transitions should be played together.</td></tr>
 * </table>
 */

public static final int transitionOrdering = 16843744; // 0x10103e0

/**
 * Changes whether the transition supports appearing and/or disappearing Views.
 * Corresponds to {@link android.transition.Visibility#setMode(int)}.
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>mode_in</td><td>1</td><td>Only appearing Views will be supported.</td></tr>
 * <tr><td>mode_out</td><td>2</td><td>Only disappearing Views will be supported.</td></tr>
 * </table>
 */

public static final int transitionVisibilityMode = 16843900; // 0x101047c

/**
 * The amount to translate the group on X coordinate.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 */

public static final int translateX = 16843866; // 0x101045a

/**
 * The amount to translate the group on Y coordinate.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 */

public static final int translateY = 16843867; // 0x101045b

/**
 * translation in x of the view. This value is added post-layout to the left
 * property of the view, which is set by its layout.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int translationX = 16843554; // 0x1010322

/**
 * translation in y of the view. This value is added post-layout to the top
 * property of the view, which is set by its layout.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int translationY = 16843555; // 0x1010323

/**
 * translation in z of the view. This value is added to its elevation.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int translationZ = 16843770; // 0x10103fa

/**
 * The fraction of the path to trim from the end from 0 to 1 .
 * <p>May be a floating point value, such as "<code>1.2</code>".
 */

public static final int trimPathEnd = 16843785; // 0x1010409

/**
 * Shift trim region (allows visible region to include the start and end) from 0 to 1.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 */

public static final int trimPathOffset = 16843786; // 0x101040a

/**
 * The fraction of the path to trim from the start from 0 to 1.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 */

public static final int trimPathStart = 16843784; // 0x1010408

/**
 * The index of the font in the ttc (TrueType Collection) font file. If the font file
 * referenced is not in the ttc format, this attribute needs not be specified.
 * {@see android.graphics.Typeface#Builder.setTtcIndex(int)}.
 * The default value is 0. More details about the TrueType Collection font format can be found
 * here: https://en.wikipedia.org/wiki/TrueType#TrueType_Collection.
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int ttcIndex = 16844143; // 0x101056f

/**
 * The number of tuners that the TV input service is associated with. This value can be
 * changed at runtime by calling
 * {@link android.media.tv.TvInputManager#updateTvInputInfo(android.media.tv.TvInputInfo)}.
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int tunerCount = 16844061; // 0x101051d

/**
 * Specifies whether the screen should be turned on when the {@link android.app.Activity} is resumed.
 * Normally an activity will be transitioned to the stopped state if it is started while the
 * screen if off, but with this flag set the activity will cause the screen to turn on if the
 * activity will be visible and resumed due to the screen coming on. The screen will not be
 * turned on if the activity won't be visible after the screen is turned on. This flag is
 * normally used in conjunction with the {@link android.R.attr#showWhenLocked} flag to make
 * sure the activity is visible after the screen is turned on when the lockscreen is up. In
 * addition, if this flag is set and the activity calls
 * {@link android.app.KeyguardManager#requestDismissKeyguard}
 * the screen will turn on.
 * <p>This should be used instead of {@link android.view.WindowManager.LayoutParams#FLAG_TURN_SCREEN_ON}
 * flag set for Windows. When using the Window flag during activity startup, there may not be
 * time to add it before the system stops your activity because the screen has not yet turned
 * on. This leads to a double life-cycle as it is then restarted.</p>
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int turnScreenOn = 16844138; // 0x101056a

/**
 * Type of gradient. The default type is linear.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>linear</td><td>0</td><td>Linear gradient extending across the center point.</td></tr>
 * <tr><td>radial</td><td>1</td><td>Radial gradient extending from the center point outward.</td></tr>
 * <tr><td>sweep</td><td>2</td><td>Sweep (or angular) gradient sweeping counter-clockwise around the center point.</td></tr>
 * </table>
 */

public static final int type = 16843169; // 0x10101a1

/**
 * Default text typeface.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>monospace</td><td>3</td><td></td></tr>
 * <tr><td>normal</td><td>0</td><td></td></tr>
 * <tr><td>sans</td><td>1</td><td></td></tr>
 * <tr><td>serif</td><td>2</td><td></td></tr>
 * </table>
 */

public static final int typeface = 16842902; // 0x1010096

/**
 * Extra options for an activity's UI. Applies to either the {@code <activity>} or
 * {@code <application>} tag. If specified on the {@code <application>}
 * tag these will be considered defaults for all activities in the
 * application.
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>none</td><td>0</td><td>No extra UI options. This is the default.</td></tr>
 * <tr><td>splitActionBarWhenNarrow</td><td>1</td><td>Split the options menu into a separate bar at the bottom of
 * the screen when severely constrained for horizontal space.
 * (e.g. portrait mode on a phone.) Instead of a small number
 * of action buttons appearing in the action bar at the top
 * of the screen, the action bar will split into the top navigation
 * section and the bottom menu section. Menu items will not be
 * split across the two bars; they will always appear together.</td></tr>
 * </table>
 */

public static final int uiOptions = 16843672; // 0x1010398

/**
 * Color used to draw the user's strokes until we are sure it's a gesture.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

public static final int uncertainGestureColor = 16843382; // 0x1010276

/**
 * @deprecated The color for the dates of an unfocused month.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

@Deprecated public static final int unfocusedMonthDateColor = 16843588; // 0x1010344

/**
 * Sets the alpha on the items that are not selected.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 */

public static final int unselectedAlpha = 16843278; // 0x101020e

/**
 * Update period in milliseconds, or 0 if the AppWidget will update itself.
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int updatePeriodMillis = 16843344; // 0x1010250

/**
 * Specify whether the 32 bit version of the ABI should be used in a
 * multiArch application. If both abioverride flag (i.e. using abi option of abd install)
 * and use32bitAbi are used, then use32bit is ignored.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * <p>May be an integer value, such as "<code>100</code>".
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 */

public static final int use32bitAbi = 16844053; // 0x1010515

/**
 * When set to true, tells GridLayout to use default margins when none are specified
 * in a view's layout parameters.
 * The default value is false.
 * See {@link android.widget.GridLayout#setUseDefaultMargins(boolean)}.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int useDefaultMargins = 16843641; // 0x1010379

/**
 * Use the drawable's intrinsic width and height as minimum size values.
 * Useful if the target drawable is a 9-patch or otherwise should not be scaled
 * down beyond a minimum size.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int useIntrinsicSizeAsMinimum = 16843536; // 0x1010310

/**
 * Whether the drawable level value (see
 * {@link android.graphics.drawable.Drawable#getLevel()}) is used to scale the gradient.
 * Scaling behavior varies based on gradient type. For "linear", adjusts the ending
 * position along the gradient's axis of orientation. For "radial", adjusts the outer
 * radius. For "sweep", adjusts the ending angle. The default value is false.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int useLevel = 16843167; // 0x101019f

/**
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int userVisible = 16843409; // 0x1010291

/**
 * Declare that this application may use cleartext traffic, such as HTTP rather than HTTPS;
 * WebSockets rather than WebSockets Secure; XMPP, IMAP, STMP without STARTTLS or TLS.
 * Defaults to true. If set to false {@code false}, the application declares that it does not
 * intend to use cleartext network traffic, in which case platform components (e.g. HTTP
 * stacks, {@code DownloadManager}, {@code MediaPlayer}) will refuse applications's requests
 * to use cleartext traffic. Third-party libraries are encouraged to honor this flag as well.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int usesCleartextTraffic = 16844012; // 0x10104ec

/**
 * Concrete value to assign to this piece of named meta-data.
 * The data can later be retrieved from the meta data Bundle
 * through {@link android.os.Bundle#getString Bundle.getString},
 * {@link android.os.Bundle#getInt Bundle.getInt},
 * {@link android.os.Bundle#getBoolean Bundle.getBoolean},
 * or {@link android.os.Bundle#getFloat Bundle.getFloat} depending
 * on the type used here.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * <p>May be an integer value, such as "<code>100</code>".
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * <p>May be a floating point value, such as "<code>1.2</code>".
 */

public static final int value = 16842788; // 0x1010024

/**
 * Value the animation starts from.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * <p>May be an integer value, such as "<code>100</code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int valueFrom = 16843486; // 0x10102de

/**
 * Value the animation animates to.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * <p>May be an integer value, such as "<code>100</code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int valueTo = 16843487; // 0x10102df

/**
 * The type of valueFrom and valueTo.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>colorType</td><td>3</td><td>values are colors, which are integers starting with "#".</td></tr>
 * <tr><td>floatType</td><td>0</td><td>The given values are floats. This is the default value if valueType is
 * unspecified. Note that if any value attribute has a color value
 * (beginning with "#"), then this attribute is ignored and the color values are
 * interpreted as integers.</td></tr>
 * <tr><td>intType</td><td>1</td><td>values are integers.</td></tr>
 * <tr><td>pathType</td><td>2</td><td>values are paths defined as strings.
 * This type is used for path morphing in AnimatedVectorDrawable.</td></tr>
 * </table>
 */

public static final int valueType = 16843488; // 0x10102e0

/**
 * If true, allows the drawable's padding to change based on the
 * current state that is selected.  If false, the padding will
 * stay the same (based on the maximum padding of all the states).
 * Enabling this feature requires that the owner of the drawable
 * deal with performing layout when the state changes, which is
 * often not supported.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int variablePadding = 16843157; // 0x1010195

/**
 * The vendor name if this print service is vendor specific.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int vendor = 16843751; // 0x10103e7

/**
 * The version of the feature that is being used.
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int version = 16844057; // 0x1010519

/**
 * Internal version code.  This is the number used to determine whether
 * one version is more recent than another: it has no other meaning than
 * that higher numbers are more recent.  You could use this number to
 * encode a "x.y" in the lower and upper 16 bits, make it a build
 * number, simply increase it by one each time a new version is
 * released, or define it however else you want, as long as each
 * successive version has a higher number.  This is not a version
 * number generally shown to the user, that is usually supplied
 * with {@link android.R.attr#versionName}.  When an app is delivered
 * as multiple split APKs, each APK must have the exact same versionCode.
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int versionCode = 16843291; // 0x101021b

/**
 * Internal major version code.  This is essentially additional high bits
 * for the base version code; it has no other meaning than
 * that higher numbers are more recent.  This is not a version
 * number generally shown to the user, that is usually supplied
 * with {@link android.R.attr#versionName}.
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int versionCodeMajor = 16844150; // 0x1010576

/**
 * Required specific library version.
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int versionMajor = 16844151; // 0x1010577

/**
 * The text shown to the user to indicate the version they have.  This
 * is used for no other purpose than display to the user; the actual
 * significant version number is given by {@link android.R.attr#versionCode}.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int versionName = 16843292; // 0x101021c

/**
 * Amount to offset the touch Y coordinate by, for bias correction.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int verticalCorrection = 16843322; // 0x101023a

/**
 * Default vertical divider between menu items.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int verticalDivider = 16843054; // 0x101012e

/**
 * Default vertical gap between rows of keys.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 */

public static final int verticalGap = 16843328; // 0x1010240

/**
 * Determines which side the vertical scroll bar should be placed on.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>defaultPosition</td><td>0</td><td>Place the scroll bar wherever the system default determines.</td></tr>
 * <tr><td>left</td><td>1</td><td>Place the scroll bar on the left.</td></tr>
 * <tr><td>right</td><td>2</td><td>Place the scroll bar on the right.</td></tr>
 * </table>
 */

public static final int verticalScrollbarPosition = 16843572; // 0x1010334

/**
 * Defines the default vertical spacing between rows.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int verticalSpacing = 16843029; // 0x1010115

/**
 * The height of the canvas the drawing is on.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 */

public static final int viewportHeight = 16843779; // 0x1010403

/**
 * The width of the canvas the drawing is on.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 */

public static final int viewportWidth = 16843778; // 0x1010402

/**
 * Controls the initial visibility of the view.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>gone</td><td>2</td><td>Completely hidden, as if the view had not been added.</td></tr>
 * <tr><td>invisible</td><td>1</td><td>Not displayed, but taken into account during layout (space is left for it).</td></tr>
 * <tr><td>visible</td><td>0</td><td>Visible on screen; the default value.</td></tr>
 * </table>
 */

public static final int visibility = 16842972; // 0x10100dc

/**
 * Provides initial visibility state of the drawable; the default
 * value is false.  See
 * {@link android.graphics.drawable.Drawable#setVisible}.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int visible = 16843156; // 0x1010194

/**
 * Specify whether a component should be visible to instant apps.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int visibleToInstantApps = 16844081; // 0x1010531

/**
 * Flag indicating whether the application requests the VM to operate in
 * the safe mode.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int vmSafeMode = 16843448; // 0x10102b8

/**
 * Voice button icon.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int voiceIcon = 16843908; // 0x1010484

/**
 * If provided, this specifies the spoken language to be expected, and that it will be
 * different than the one set in the {@link java.util.Locale#getDefault()}.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int voiceLanguage = 16843349; // 0x1010255

/**
 * If provided, this specifies the language model that should be used by the
 * voice recognition system.  See
 * {@link android.speech.RecognizerIntent#EXTRA_LANGUAGE_MODEL } for more information.
 * If not provided, the default value
 * {@link android.speech.RecognizerIntent#LANGUAGE_MODEL_FREE_FORM } will be used.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int voiceLanguageModel = 16843347; // 0x1010253

/**
 * If provided, enforces the maximum number of results to return, including the "best"
 * result which will always be provided as the SEARCH intent's primary query.  Must be one
 * or greater.  If not provided, the recognizer will choose how many results to return.
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int voiceMaxResults = 16843350; // 0x1010256

/**
 * If provided, this specifies a prompt that will be displayed during voice input.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int voicePromptText = 16843348; // 0x1010254

/**
 * Voice search features are controlled by mode bits in this field.  Omitting
 * this field, or setting to zero, provides default behavior.
 * If showVoiceSearchButton is set, then launchWebSearch or launchRecognizer must
 * also be set.  <i>Optional attribute.</i>
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>launchRecognizer</td><td>4</td><td>If set, the voice search button will take the user directly to a built-in
 * voice recording activity.  This activity will prompt the user to speak,
 * transcribe the spoken text, and forward the resulting query
 * text to the searchable activity, just as if the user had typed it into
 * the search UI and clicked the search button.</td></tr>
 * <tr><td>launchWebSearch</td><td>2</td><td>If set, the voice search button will take the user directly to a built-in
 * voice web search activity.  Most applications will not use this flag, as it
 * will take the user away from the activity in which search was invoked.</td></tr>
 * <tr><td>showVoiceSearchButton</td><td>1</td><td>If set, display a voice search button.  This only takes effect if voice search is
 * available on the device.</td></tr>
 * </table>
 */

public static final int voiceSearchMode = 16843346; // 0x1010252

/**
 * When opening a new activity that hides the wallpaper, while
 * currently showing the wallpaper, this is the animation that
 * is run on the new activity (which is entering the screen).
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int wallpaperCloseEnterAnimation = 16843413; // 0x1010295

/**
 * When opening a new activity that hides the wallpaper, while
 * currently showing the wallpaper, this is the animation that
 * is run on the old wallpaper activity (which is exiting the screen).
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int wallpaperCloseExitAnimation = 16843414; // 0x1010296

/**
 * When closing a foreround activity that is on top of the wallpaper
 * when the previous activity is also on top of the wallpaper,
 * this is the animation that is run on the previous activity
 * (which is entering the screen).  The wallpaper remains
 * static behind the animation.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int wallpaperIntraCloseEnterAnimation = 16843417; // 0x1010299

/**
 * When closing a foreround activity that is on top of the wallpaper
 * when the previous activity is also on top of the wallpaper,
 * this is the animation that is run on the current activity
 * (which is exiting the screen).  The wallpaper remains
 * static behind the animation.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int wallpaperIntraCloseExitAnimation = 16843418; // 0x101029a

/**
 * When opening a new activity that is on top of the wallpaper
 * when the current activity is also on top of the wallpaper,
 * this is the animation that is run on the new activity
 * (which is entering the screen).  The wallpaper remains
 * static behind the animation.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int wallpaperIntraOpenEnterAnimation = 16843415; // 0x1010297

/**
 * When opening a new activity that is on top of the wallpaper
 * when the current activity is also on top of the wallpaper,
 * this is the animation that is run on the current activity
 * (which is exiting the screen).  The wallpaper remains
 * static behind the animation.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int wallpaperIntraOpenExitAnimation = 16843416; // 0x1010298

/**
 * When opening a new activity that shows the wallpaper, while
 * currently not showing the wallpaper, this is the animation that
 * is run on the new wallpaper activity (which is entering the screen).
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int wallpaperOpenEnterAnimation = 16843411; // 0x1010293

/**
 * When opening a new activity that shows the wallpaper, while
 * currently not showing the wallpaper, this is the animation that
 * is run on the current activity (which is exiting the screen).
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int wallpaperOpenExitAnimation = 16843412; // 0x1010294

/**
 * Default WebTextView style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int webTextViewStyle = 16843449; // 0x10102b9

/**
 * Default WebView style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int webViewStyle = 16842885; // 0x1010085

/**
 * The text appearance for the week day abbreviation in the calendar header.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int weekDayTextAppearance = 16843592; // 0x1010348

/**
 * @deprecated The color for the week numbers.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

@Deprecated public static final int weekNumberColor = 16843589; // 0x1010345

/**
 * @deprecated The color for the separator line between weeks.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

@Deprecated public static final int weekSeparatorLineColor = 16843590; // 0x1010346

/**
 * Defines the maximum weight sum. If unspecified, the sum is computed
 * by adding the layout_weight of all of the children. This can be
 * used for instance to give a single child 50% of the total available
 * space by giving it a layout_weight of 0.5 and setting the weightSum
 * to 1.0.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 */

public static final int weightSum = 16843048; // 0x1010128

/**
 * Optional parameter which indicates where this widget can be shown,
 * ie. home screen, keyguard, search bar or any combination thereof.
 * Supports combined values using | operator.
 * <p>May be an integer value, such as "<code>100</code>".
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>home_screen</td><td>1</td><td></td></tr>
 * <tr><td>keyguard</td><td>2</td><td></td></tr>
 * <tr><td>searchbox</td><td>4</td><td></td></tr>
 * </table>
 */

public static final int widgetCategory = 16843716; // 0x10103c4

/**
 * Flags indicating various features supported by the widget. These are hints to the
 * widget host, and do not actually change the behavior of the widget.
 * <p>May be an integer value, such as "<code>100</code>".
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>hide_from_picker</td><td>2</td><td>The widget is added directly by the app, and does not need to appear in
 * the global list of available widgets</td></tr>
 * <tr><td>reconfigurable</td><td>1</td><td>The widget can be reconfigured anytime after it is bound</td></tr>
 * </table>
 */

public static final int widgetFeatures = 16844153; // 0x1010579

/**
 * The layout for the controllable widget portion of a Preference. This is inflated
 * into the layout for a Preference and should be used more frequently than
 * the layout attribute. For example, a checkbox preference would specify
 * a custom layout (consisting of just the CheckBox) here.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int widgetLayout = 16843243; // 0x10101eb

/**
 * Makes the TextView be exactly this wide.
 * You could get the same effect by specifying this number in the
 * layout parameters.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int width = 16843097; // 0x1010159

/**
 * Flag indicating whether this window should have an Action Bar
 * in place of the usual title bar.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int windowActionBar = 16843469; // 0x10102cd

/**
 * Flag indicating whether this window's Action Bar should overlay
 * application content. Does nothing if the window would not
 * have an Action Bar.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int windowActionBarOverlay = 16843492; // 0x10102e4

/**
 * Flag indicating whether action modes should overlay window content
 * when there is not reserved space for their UI (such as an Action Bar).
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int windowActionModeOverlay = 16843485; // 0x10102dd

/**
 * Flag indicating whether this window allows Activity Transitions.
 * Corresponds to {@link android.view.Window#FEATURE_ACTIVITY_TRANSITIONS}.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int windowActivityTransitions = 16843981; // 0x10104cd

/**
 * Flag indicating whether this Window's transition should overlap with
 * the exiting transition of the calling Activity. Corresponds to
 * {@link android.view.Window#setAllowEnterTransitionOverlap(boolean)}.
 * The default value is true.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int windowAllowEnterTransitionOverlap = 16843836; // 0x101043c

/**
 * Flag indicating whether this Window's transition should overlap with
 * the exiting transition of the called Activity when the called Activity
 * finishes. Corresponds to
 * {@link android.view.Window#setAllowReturnTransitionOverlap(boolean)}.
 * The default value is true.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int windowAllowReturnTransitionOverlap = 16843835; // 0x101043b

/**
 * Reference to a style resource holding
 * the set of window animations to use, which can be
 * any of the attributes defined by
 * {@link android.R.styleable#WindowAnimation}.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int windowAnimationStyle = 16842926; // 0x10100ae

/**
 * Drawable to use as the overall window background.  As of
 * {@link android.os.Build.VERSION_CODES#HONEYCOMB}, this may
 * be a selector that uses state_accelerated to pick a non-solid
 * color when running on devices that can draw such a bitmap
 * with complex compositing on top at 60fps.
 * <p>There are a few special considerations to use when setting this
 * drawable:
 * <ul>
 * <li> This information will be used to infer the pixel format
 * for your window's surface.  If the drawable has any
 * non-opaque pixels, your window will be translucent
 * (32 bpp).
 * <li> If you want to draw the entire background
 * yourself, you should set this drawable to some solid
 * color that closely matches that background (so the
 * system's preview of your window will match), and
 * then in code manually set your window's background to
 * null so it will not be drawn.
 * </ul>
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int windowBackground = 16842836; // 0x1010054

/**
 * Drawable to draw selectively within the inset areas when the windowBackground
 * has been set to null. This protects against seeing visual garbage in the
 * surface when the app has not drawn any content into this area. One example is
 * when the user is resizing a window of an activity that has
 * {@link android.R.attr#resizeableActivity} set for multi-window mode.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int windowBackgroundFallback = 16844035; // 0x1010503

/**
 * Whether to clip window content to the outline of the window background.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int windowClipToOutline = 16843947; // 0x10104ab

/**
 * Control whether a container should automatically close itself if
 * the user touches outside of it.  This only applies to activities
 * and dialogs.
 * <p>Note: this attribute will only be respected for applications
 * that are targeting {@link android.os.Build.VERSION_CODES#HONEYCOMB}
 * or later.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int windowCloseOnTouchOutside = 16843611; // 0x101035b

/**
 * This Drawable is overlaid over the foreground of the Window's content area, usually
 * to place a shadow below the title.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int windowContentOverlay = 16842841; // 0x1010059

/**
 * Reference to a TransitionManager XML resource defining the desired
 * transitions between different window content.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int windowContentTransitionManager = 16843769; // 0x10103f9

/**
 * Flag indicating whether this window requests that content changes be performed
 * as scene changes with transitions. Corresponds to
 * {@link android.view.Window#FEATURE_CONTENT_TRANSITIONS}.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int windowContentTransitions = 16843768; // 0x10103f8

/**
 * Flag allowing you to disable the splash screen for a window. The default value is
 * false; if set to true, the system can never use the window's theme to show a splash
 * screen before your actual instance is shown to the user.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int windowDisablePreview = 16843298; // 0x1010222

/**
 * Flag indicating whether this Window is responsible for drawing the background for the
 * system bars. If true and the window is not floating, the system bars are drawn with a
 * transparent background and the corresponding areas in this window are filled with the
 * colors specified in {@link android.R.attr#statusBarColor} and
 * {@link android.R.attr#navigationBarColor}. Corresponds to
 * {@link android.view.WindowManager.LayoutParams#FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS}.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int windowDrawsSystemBarBackgrounds = 16843856; // 0x1010450

/**
 * Elevation to use for the window.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int windowElevation = 16843920; // 0x1010490

/**
 * Flag indicating that this window should allow touches to be split
 * across other windows that also support split touch.
 * The default value is true for applications with a targetSdkVersion
 * of Honeycomb or newer; false otherwise.
 * When this flag is false, the first pointer that goes down determines
 * the window to which all subsequent touches go until all pointers go up.
 * When this flag is true, each pointer (not necessarily the first) that
 * goes down determines the window to which all subsequent touches of that
 * pointer will go until that pointers go up thereby enabling touches
 * with multiple pointers to be split across multiple windows.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int windowEnableSplitTouch = 16843543; // 0x1010317

/**
 * The animation used when a window is being added.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int windowEnterAnimation = 16842932; // 0x10100b4

/**
 * Reference to a Transition XML resource defining the desired Transition
 * used to move Views into the initial Window's content Scene. Corresponds to
 * {@link android.view.Window#setEnterTransition(android.transition.Transition)}.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int windowEnterTransition = 16843831; // 0x1010437

/**
 * The animation used when a window is being removed.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int windowExitAnimation = 16842933; // 0x10100b5

/**
 * Reference to a Transition XML resource defining the desired Transition
 * used to move Views out of the Window's content Scene when launching a new Activity.
 * Corresponds to
 * {@link android.view.Window#setExitTransition(android.transition.Transition)}.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int windowExitTransition = 16843832; // 0x1010438

/**
 * Drawable to use as a frame around the window.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int windowFrame = 16842837; // 0x1010055

/**
 * Flag indicating whether this window should fill the entire screen.  Corresponds
 * to {@link android.view.WindowManager.LayoutParams#FLAG_FULLSCREEN}.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int windowFullscreen = 16843277; // 0x101020d

/**
 * The animation used when a window is going from VISIBLE to INVISIBLE.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int windowHideAnimation = 16842935; // 0x10100b7

/**
 * Flag indicating whether this is a floating window.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int windowIsFloating = 16842839; // 0x1010057

/**
 * Flag indicating whether this is a translucent window. If this attribute is unset (but
 * not if set to false), the window might still be considered translucent, if
 * windowSwipeToDismiss is set to true.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int windowIsTranslucent = 16842840; // 0x1010058

/**
 * Controls how the window is laid out if there is a {@code DisplayCutout}.
 * <p>
 * Defaults to {@code default}.
 * <p>
 * See also
 * {@link android.view.WindowManager.LayoutParams#layoutInDisplayCutoutMode
 * WindowManager.LayoutParams.layoutInDisplayCutoutMode},
 * {@link android.view.WindowManager.LayoutParams#LAYOUT_IN_DISPLAY_CUTOUT_MODE_DEFAULT},
 * {@link android.view.WindowManager.LayoutParams#LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES},
 * {@link android.view.WindowManager.LayoutParams#LAYOUT_IN_DISPLAY_CUTOUT_MODE_NEVER},
 * and {@link android.view.DisplayCutout DisplayCutout}
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>default</td><td>0</td><td><p>
 * The window is allowed to extend into the <code>DisplayCutout</code> area, only if
 * the <code>DisplayCutout</code> is fully contained within a system bar. Otherwise, the
 * window is laid out such that it does not overlap with the <code>DisplayCutout</code>
 * area.
 * <p>
 * Corresponds to <code>LAYOUT_IN_DISPLAY_CUTOUT_MODE_DEFAULT</code>.</td></tr>
 * <tr><td>never</td><td>2</td><td><p>
 * The window is never allowed to overlap with the <code>DisplayCutout</code> area.
 * <p>
 * This should be used with windows that transiently set
 * <code>SYSTEM_UI_FLAG_FULLSCREEN</code> to avoid a relayout of the window when the
 * flag is set or cleared.
 * <p>
 * Corresponds to <code>LAYOUT_IN_DISPLAY_CUTOUT_MODE_NEVER</code>.</td></tr>
 * <tr><td>shortEdges</td><td>1</td><td><p>
 * The window is always allowed to extend into the <code>DisplayCutout</code> areas on the
 * short edges of the screen even if fullscreen or in landscape.
 * The window will never extend into a <code>DisplayCutout</code> area on the long edges of
 * the screen.
 * <p>
 * The window must make sure that no important content overlaps with the
 * <code>DisplayCutout</code>.
 * <p>
 * Corresponds to <code>LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES</code>.</td></tr>
 * </table>
 */

public static final int windowLayoutInDisplayCutoutMode = 16844166; // 0x1010586

/**
 * If set, the navigation bar will be drawn such that it is compatible with a light
 * navigation bar background.
 * <p>For this to take effect, the window must be drawing the system bar backgrounds with
 * {@link android.R.attr#windowDrawsSystemBarBackgrounds} and the navigation bar must not
 * have been requested to be translucent with
 * {@link android.R.attr#windowTranslucentNavigation}.
 * Corresponds to setting {@link android.view.View#SYSTEM_UI_FLAG_LIGHT_NAVIGATION_BAR} on
 * the decor view.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int windowLightNavigationBar = 16844140; // 0x101056c

/**
 * If set, the status bar will be drawn such that it is compatible with a light
 * status bar background.
 * <p>For this to take effect, the window must be drawing the system bar backgrounds with
 * {@link android.R.attr#windowDrawsSystemBarBackgrounds} and the status bar must not
 * have been requested to be translucent with
 * {@link android.R.attr#windowTranslucentStatus}.
 * Corresponds to setting {@link android.view.View#SYSTEM_UI_FLAG_LIGHT_STATUS_BAR} on
 * the decor view.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int windowLightStatusBar = 16844000; // 0x10104e0

/**
 * The minimum width the window is allowed to be, along the major
 * axis of the screen.  That is, when in landscape.  Can be either
 * an absolute dimension or a fraction of the screen size in that
 * dimension.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 */

public static final int windowMinWidthMajor = 16843606; // 0x1010356

/**
 * The minimum width the window is allowed to be, along the minor
 * axis of the screen.  That is, when in portrait.  Can be either
 * an absolute dimension or a fraction of the screen size in that
 * dimension.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 */

public static final int windowMinWidthMinor = 16843607; // 0x1010357

/**
 * Flag indicating that this window should not be displayed at all.
 * The default value is false; if set to true, and this window is
 * the main window of an Activity, then it will never actually
 * be added to the window manager.  This means that your activity
 * must immediately quit without waiting for user interaction,
 * because there will be no such interaction coming.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int windowNoDisplay = 16843294; // 0x101021e

/**
 * Flag indicating whether there should be no title on this window.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int windowNoTitle = 16842838; // 0x1010056

/**
 * Flag indicating whether this window should extend into overscan region.  Corresponds
 * to {@link android.view.WindowManager.LayoutParams#FLAG_LAYOUT_IN_OVERSCAN}.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int windowOverscan = 16843727; // 0x10103cf

/**
 * Reference to a Transition XML resource defining the desired Transition
 * used to move Views in to the scene when returning from a previously-started Activity.
 * Corresponds to
 * {@link android.view.Window#setReenterTransition(android.transition.Transition)}.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int windowReenterTransition = 16843951; // 0x10104af

/**
 * Reference to a Transition XML resource defining the desired Transition
 * used to move Views out of the scene when the Window is
 * preparing to close. Corresponds to
 * {@link android.view.Window#setReturnTransition(android.transition.Transition)}.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int windowReturnTransition = 16843950; // 0x10104ae

/**
 * Reference to a Transition XML resource defining the desired Transition
 * used to move shared elements transferred into the Window's initial content Scene.
 * Corresponds to {@link android.view.Window#setSharedElementEnterTransition(
 * android.transition.Transition)}.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int windowSharedElementEnterTransition = 16843833; // 0x1010439

/**
 * Reference to a Transition XML resource defining the desired Transition
 * used when starting a new Activity to move shared elements prior to transferring
 * to the called Activity.
 * Corresponds to {@link android.view.Window#setSharedElementExitTransition(
 * android.transition.Transition)}.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int windowSharedElementExitTransition = 16843834; // 0x101043a

/**
 * Reference to a Transition XML resource defining the desired Transition
 * used for shared elements transferred back to a calling Activity.
 * Corresponds to {@link android.view.Window#setSharedElementReenterTransition(
 * android.transition.Transition)}.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int windowSharedElementReenterTransition = 16843953; // 0x10104b1

/**
 * Reference to a Transition XML resource defining the desired Transition
 * used to move shared elements transferred back to a calling Activity.
 * Corresponds to {@link android.view.Window#setSharedElementReturnTransition(
 * android.transition.Transition)}.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int windowSharedElementReturnTransition = 16843952; // 0x10104b0

/**
 * Indicates whether or not shared elements should use an overlay
 * during transitions. The default value is true.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int windowSharedElementsUseOverlay = 16843963; // 0x10104bb

/**
 * The animation used when a window is going from INVISIBLE to VISIBLE.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int windowShowAnimation = 16842934; // 0x10100b6

/**
 * Flag indicating that this window's background should be the
 * user's current wallpaper.  Corresponds
 * to {@link android.view.WindowManager.LayoutParams#FLAG_SHOW_WALLPAPER}.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int windowShowWallpaper = 16843410; // 0x1010292

/**
 * Defines the default soft input state that this window would
 * like when it is displayed.  Corresponds
 * to {@link android.view.WindowManager.LayoutParams#softInputMode}.
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>adjustNothing</td><td>30</td><td>Don't resize <em>or</em> pan the window to make room for the
 * soft input area; the window is never adjusted for it.</td></tr>
 * <tr><td>adjustPan</td><td>20</td><td>Don't resize the window to make room for the soft input area;
 * instead pan the contents of the window as focus moves inside
 * of it so that the user can see what they are typing.  This is
 * generally less desireable than panning because the user may
 * need to close the input area to get at and interact with
 * parts of the window.</td></tr>
 * <tr><td>adjustResize</td><td>10</td><td>Always resize the window: the content area of the window is
 * reduced to make room for the soft input area.</td></tr>
 * <tr><td>adjustUnspecified</td><td>0</td><td>The window resize/pan adjustment has not been specified,
 * the system will automatically select between resize and pan
 * modes, depending
 * on whether the content of the window has any layout views
 * that can scroll their contents.  If there is such a view,
 * then the window will be resized, with the assumption being
 * that the resizeable area can be reduced to make room for
 * the input UI.</td></tr>
 * <tr><td>stateAlwaysHidden</td><td>3</td><td>Always make the soft input area hidden when this window
 * has input focus.</td></tr>
 * <tr><td>stateAlwaysVisible</td><td>5</td><td>Always make the soft input area visible when this window
 * has input focus.</td></tr>
 * <tr><td>stateHidden</td><td>2</td><td>Make the soft input area hidden when normally appropriate
 * (when the user is navigating forward to your window).</td></tr>
 * <tr><td>stateUnchanged</td><td>1</td><td>Leave the soft input window as-is, in whatever state it
 * last was.</td></tr>
 * <tr><td>stateUnspecified</td><td>0</td><td>Not specified, use what the system thinks is best.  This
 * is the default.</td></tr>
 * <tr><td>stateVisible</td><td>4</td><td>Make the soft input area visible when normally appropriate
 * (when the user is navigating forward to your window).</td></tr>
 * </table>
 */

public static final int windowSoftInputMode = 16843307; // 0x101022b

/**
 * Reference to a drawable to be used as the splash screen content of the window. This
 * drawable will be placed on top of the {@link android.R.attr#windowBackground} with its
 * bounds inset by the system bars. If the drawable should not be inset by the system
 * bars, use a fullscreen theme.
 * <p>
 * Note that even if no splashscreen content is set on the theme, the system may still
 * show a splash screen using the other attributes on the theme, like the
 * {@link android.R.attr#windowBackground}.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int windowSplashscreenContent = 16844132; // 0x1010564

/**
 * Flag to indicate that a window can be swiped away to be dismissed.
 * Corresponds to {@link android.view.Window#FEATURE_SWIPE_TO_DISMISS}. It will also
 * dynamically change translucency of the window, if the windowIsTranslucent is not set.
 * If windowIsTranslucent is set (to either true or false) it will obey that setting.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int windowSwipeToDismiss = 16843763; // 0x10103f3

/**
 * The style resource to use for a window's title area.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int windowTitleBackgroundStyle = 16842844; // 0x101005c

/**
 * The style resource to use for a window's title bar height.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int windowTitleSize = 16842842; // 0x101005a

/**
 * The style resource to use for a window's title text.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int windowTitleStyle = 16842843; // 0x101005b

/**
 * The duration, in milliseconds, of the window background fade duration
 * when transitioning into or away from an Activity when called with an
 * Activity Transition. Corresponds to
 * {@link android.view.Window#setTransitionBackgroundFadeDuration(long)}.
 * <p>May be an integer value, such as "<code>100</code>".
 */

public static final int windowTransitionBackgroundFadeDuration = 16843873; // 0x1010461

/**
 * Flag indicating whether this window requests a translucent navigation bar.  Corresponds
 * to {@link android.view.WindowManager.LayoutParams#FLAG_TRANSLUCENT_NAVIGATION}.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int windowTranslucentNavigation = 16843760; // 0x10103f0

/**
 * Flag indicating whether this window requests a translucent status bar.  Corresponds
 * to {@link android.view.WindowManager.LayoutParams#FLAG_TRANSLUCENT_STATUS}.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int windowTranslucentStatus = 16843759; // 0x10103ef

/**
 * A specific {@link android.R.attr#permission} name for write
 * access to a {@link android.content.ContentProvider}.  See the
 * <a href="{@docRoot}guide/topics/security/security.html">Security and Permissions</a>
 * document for more information on permissions.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 */

public static final int writePermission = 16842760; // 0x1010008

/**
 * A coordinate in the X dimension.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int x = 16842924; // 0x10100ac

/**
 * Indicates whether the application supports extra large screen form-factors.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 */

public static final int xlargeScreens = 16843455; // 0x10102bf

/**
 * A coordinate in the Y dimension.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 */

public static final int y = 16842925; // 0x10100ad

/**
 * The list year's text appearance in the list.
 * {@deprecated Use yearListTextColor. }
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

@Deprecated public static final int yearListItemTextAppearance = 16843929; // 0x1010499

/**
 * The list year's selected circle color in the list.
 * {@deprecated No longer displayed.}
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 */

@Deprecated public static final int yearListSelectorColor = 16843930; // 0x101049a

/**
 * Default style for YesNoPreference.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 */

public static final int yesNoPreferenceStyle = 16842896; // 0x1010090

/**
 * Allows for an adjustment of the Z ordering of the content being
 * animated for the duration of the animation.  The default value is normal.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>bottom</td><td>ffffffff</td><td>The content being animated is forced under all other
 * content for the duration of the animation.</td></tr>
 * <tr><td>normal</td><td>0</td><td>The content being animated be kept in its current Z order.</td></tr>
 * <tr><td>top</td><td>1</td><td>The content being animated is forced on top of all other
 * content for the duration of the animation.</td></tr>
 * </table>
 */

public static final int zAdjustment = 16843201; // 0x10101c1
}

@SuppressWarnings({"unchecked", "deprecation", "all"})
public static final class bool {

public bool() { throw new RuntimeException("Stub!"); }
}

@SuppressWarnings({"unchecked", "deprecation", "all"})
public static final class color {

public color() { throw new RuntimeException("Stub!"); }

/**
 * Equivalent to 0xff000000
 * Equivalent to 0xff000000
 */

public static final int background_dark = 17170446; // 0x106000e

/**
 * Equivalent to 0xffffffff
 * Equivalent to 0xffffffff
 */

public static final int background_light = 17170447; // 0x106000f

/**
 * The color black, equivalent to 0xff000000
 */

public static final int black = 17170444; // 0x106000c

/**
 * Equivalent to 0xffaaaaaa
 * A dark gray, equivalent to 0xffaaaaaa
 */

public static final int darker_gray = 17170432; // 0x1060000

/**
 * A really bright Holo shade of blue. Equivalent to #ff00ddff.
 */

public static final int holo_blue_bright = 17170459; // 0x106001b

/**
 * A dark Holo shade of blue. Equivalent to #ff0099cc
 */

public static final int holo_blue_dark = 17170451; // 0x1060013

/**
 * A light Holo shade of blue. Equivalent to #ff33b5e5.
 */

public static final int holo_blue_light = 17170450; // 0x1060012

/**
 * A dark Holo shade of green. Equivalent to #ff669900
 */

public static final int holo_green_dark = 17170453; // 0x1060015

/**
 * A light Holo shade of green. Equivalent to #ff99cc00.
 */

public static final int holo_green_light = 17170452; // 0x1060014

/**
 * A dark Holo shade of orange. Equivalent to ffff8800.
 */

public static final int holo_orange_dark = 17170457; // 0x1060019

/**
 * A light Holo shade of orange. Equivalent to #ffffbb33.
 */

public static final int holo_orange_light = 17170456; // 0x1060018

/**
 * A Holo shade of purple. Equivalent to #ffaa66cc
 */

public static final int holo_purple = 17170458; // 0x106001a

/**
 * A dark Holo shade of red. Equivalent to #ffcc0000
 */

public static final int holo_red_dark = 17170455; // 0x1060017

/**
 * A light Holo shade of red. Equivalent to #ffff4444. <
 */

public static final int holo_red_light = 17170454; // 0x1060016

/**
 * {@deprecated Use a text color from your theme instead.}
 */

@Deprecated public static final int primary_text_dark = 17170433; // 0x1060001

/**
 * {@deprecated Use a text color from your theme instead.}
 */

@Deprecated public static final int primary_text_dark_nodisable = 17170434; // 0x1060002

/**
 * {@deprecated Use a text color from your theme instead.}
 */

@Deprecated public static final int primary_text_light = 17170435; // 0x1060003

/**
 * {@deprecated Use a text color from your theme instead.}
 */

@Deprecated public static final int primary_text_light_nodisable = 17170436; // 0x1060004

/**
 * {@deprecated Use a text color from your theme instead.}
 */

@Deprecated public static final int secondary_text_dark = 17170437; // 0x1060005

/**
 * {@deprecated Use a text color from your theme instead.}
 */

@Deprecated public static final int secondary_text_dark_nodisable = 17170438; // 0x1060006

/**
 * {@deprecated Use a text color from your theme instead.}
 */

@Deprecated public static final int secondary_text_light = 17170439; // 0x1060007

/**
 * {@deprecated Use a text color from your theme instead.}
 */

@Deprecated public static final int secondary_text_light_nodisable = 17170440; // 0x1060008

/**
 * Equivalent to 0xff808080
 */

public static final int tab_indicator_text = 17170441; // 0x1060009

/**
 * {@deprecated Use a text color from your theme instead.}
 */

@Deprecated public static final int tertiary_text_dark = 17170448; // 0x1060010

/**
 * {@deprecated Use a text color from your theme instead.}
 */

@Deprecated public static final int tertiary_text_light = 17170449; // 0x1060011

/**
 * Fully transparent, equivalent to 0x00000000
 */

public static final int transparent = 17170445; // 0x106000d

/**
 * The color white, equivalent to 0xffffffff
 */

public static final int white = 17170443; // 0x106000b

/**
 * Equivalent to 0xff000000
 */

public static final int widget_edittext_dark = 17170442; // 0x106000a
}

@SuppressWarnings({"unchecked", "deprecation", "all"})
public static final class dimen {

public dimen() { throw new RuntimeException("Stub!"); }

/**
 * The standard size (both width and height) of an application icon that
 * will be displayed in the app launcher and elsewhere.
 */

public static final int app_icon_size = 17104896; // 0x1050000

/**
 * The platform's desired minimum size for a dialog's width when it
 * is along the major axis (that is the screen is landscape).  This may
 * be either a fraction or a dimension.
 */

public static final int dialog_min_width_major = 17104899; // 0x1050003

/**
 * The platform's desired minimum size for a dialog's width when it
 * is along the minor axis (that is the screen is portrait).  This may
 * be either a fraction or a dimension.
 */

public static final int dialog_min_width_minor = 17104900; // 0x1050004

/**
 * The width of the big icons in notifications.
 */

public static final int notification_large_icon_height = 17104902; // 0x1050006

/**
 * The width of the big icons in notifications.
 */

public static final int notification_large_icon_width = 17104901; // 0x1050005

/**
 * The height that is used when creating thumbnails of applications.
 * The height that is used when creating thumbnails of applications.
 * The height that is used when creating thumbnails of applications.
 */

public static final int thumbnail_height = 17104897; // 0x1050001

/**
 * The width that is used when creating thumbnails of applications.
 * The width that is used when creating thumbnails of applications.
 * The width that is used when creating thumbnails of applications.
 */

public static final int thumbnail_width = 17104898; // 0x1050002
}

@SuppressWarnings({"unchecked", "deprecation", "all"})
public static final class drawable {

public drawable() { throw new RuntimeException("Stub!"); }

public static final int alert_dark_frame = 17301504; // 0x1080000

public static final int alert_light_frame = 17301505; // 0x1080001

public static final int arrow_down_float = 17301506; // 0x1080002

public static final int arrow_up_float = 17301507; // 0x1080003

public static final int bottom_bar = 17301658; // 0x108009a

public static final int btn_default = 17301508; // 0x1080004

public static final int btn_default_small = 17301509; // 0x1080005

public static final int btn_dialog = 17301527; // 0x1080017

public static final int btn_dropdown = 17301510; // 0x1080006

public static final int btn_minus = 17301511; // 0x1080007

public static final int btn_plus = 17301512; // 0x1080008

public static final int btn_radio = 17301513; // 0x1080009

public static final int btn_star = 17301514; // 0x108000a

public static final int btn_star_big_off = 17301515; // 0x108000b

public static final int btn_star_big_on = 17301516; // 0x108000c

public static final int button_onoff_indicator_off = 17301518; // 0x108000e

public static final int button_onoff_indicator_on = 17301517; // 0x108000d

public static final int checkbox_off_background = 17301519; // 0x108000f

public static final int checkbox_on_background = 17301520; // 0x1080010

/**
 * Drawable to use as a background for separators on a list with a dark background
 */

public static final int dark_header = 17301669; // 0x10800a5

public static final int dialog_frame = 17301521; // 0x1080011

public static final int dialog_holo_dark_frame = 17301682; // 0x10800b2

public static final int dialog_holo_light_frame = 17301683; // 0x10800b3

public static final int divider_horizontal_bright = 17301522; // 0x1080012

public static final int divider_horizontal_dark = 17301524; // 0x1080014

public static final int divider_horizontal_dim_dark = 17301525; // 0x1080015

public static final int divider_horizontal_textfield = 17301523; // 0x1080013

public static final int edit_text = 17301526; // 0x1080016

public static final int editbox_background = 17301528; // 0x1080018

public static final int editbox_background_normal = 17301529; // 0x1080019

public static final int editbox_dropdown_dark_frame = 17301530; // 0x108001a

public static final int editbox_dropdown_light_frame = 17301531; // 0x108001b

public static final int gallery_thumb = 17301532; // 0x108001c

public static final int ic_btn_speak_now = 17301668; // 0x10800a4

public static final int ic_delete = 17301533; // 0x108001d

public static final int ic_dialog_alert = 17301543; // 0x1080027

public static final int ic_dialog_dialer = 17301544; // 0x1080028

public static final int ic_dialog_email = 17301545; // 0x1080029

public static final int ic_dialog_info = 17301659; // 0x108009b

public static final int ic_dialog_map = 17301546; // 0x108002a

public static final int ic_input_add = 17301547; // 0x108002b

public static final int ic_input_delete = 17301548; // 0x108002c

public static final int ic_input_get = 17301549; // 0x108002d

public static final int ic_lock_idle_alarm = 17301550; // 0x108002e

public static final int ic_lock_idle_charging = 17301534; // 0x108001e

public static final int ic_lock_idle_lock = 17301535; // 0x108001f

public static final int ic_lock_idle_low_battery = 17301536; // 0x1080020

public static final int ic_lock_lock = 17301551; // 0x108002f

public static final int ic_lock_power_off = 17301552; // 0x1080030

public static final int ic_lock_silent_mode = 17301553; // 0x1080031

public static final int ic_lock_silent_mode_off = 17301554; // 0x1080032

public static final int ic_media_ff = 17301537; // 0x1080021

public static final int ic_media_next = 17301538; // 0x1080022

public static final int ic_media_pause = 17301539; // 0x1080023

public static final int ic_media_play = 17301540; // 0x1080024

public static final int ic_media_previous = 17301541; // 0x1080025

public static final int ic_media_rew = 17301542; // 0x1080026

public static final int ic_menu_add = 17301555; // 0x1080033

public static final int ic_menu_agenda = 17301556; // 0x1080034

public static final int ic_menu_always_landscape_portrait = 17301557; // 0x1080035

public static final int ic_menu_call = 17301558; // 0x1080036

public static final int ic_menu_camera = 17301559; // 0x1080037

public static final int ic_menu_close_clear_cancel = 17301560; // 0x1080038

public static final int ic_menu_compass = 17301561; // 0x1080039

public static final int ic_menu_crop = 17301562; // 0x108003a

public static final int ic_menu_day = 17301563; // 0x108003b

public static final int ic_menu_delete = 17301564; // 0x108003c

public static final int ic_menu_directions = 17301565; // 0x108003d

public static final int ic_menu_edit = 17301566; // 0x108003e

public static final int ic_menu_gallery = 17301567; // 0x108003f

public static final int ic_menu_help = 17301568; // 0x1080040

public static final int ic_menu_info_details = 17301569; // 0x1080041

public static final int ic_menu_manage = 17301570; // 0x1080042

public static final int ic_menu_mapmode = 17301571; // 0x1080043

public static final int ic_menu_month = 17301572; // 0x1080044

public static final int ic_menu_more = 17301573; // 0x1080045

public static final int ic_menu_my_calendar = 17301574; // 0x1080046

public static final int ic_menu_mylocation = 17301575; // 0x1080047

public static final int ic_menu_myplaces = 17301576; // 0x1080048

public static final int ic_menu_preferences = 17301577; // 0x1080049

public static final int ic_menu_recent_history = 17301578; // 0x108004a

public static final int ic_menu_report_image = 17301579; // 0x108004b

public static final int ic_menu_revert = 17301580; // 0x108004c

public static final int ic_menu_rotate = 17301581; // 0x108004d

public static final int ic_menu_save = 17301582; // 0x108004e

public static final int ic_menu_search = 17301583; // 0x108004f

public static final int ic_menu_send = 17301584; // 0x1080050

public static final int ic_menu_set_as = 17301585; // 0x1080051

public static final int ic_menu_share = 17301586; // 0x1080052

public static final int ic_menu_slideshow = 17301587; // 0x1080053

public static final int ic_menu_sort_alphabetically = 17301660; // 0x108009c

public static final int ic_menu_sort_by_size = 17301661; // 0x108009d

public static final int ic_menu_today = 17301588; // 0x1080054

public static final int ic_menu_upload = 17301589; // 0x1080055

public static final int ic_menu_upload_you_tube = 17301590; // 0x1080056

public static final int ic_menu_view = 17301591; // 0x1080057

public static final int ic_menu_week = 17301592; // 0x1080058

public static final int ic_menu_zoom = 17301593; // 0x1080059

public static final int ic_notification_clear_all = 17301594; // 0x108005a

public static final int ic_notification_overlay = 17301595; // 0x108005b

public static final int ic_partial_secure = 17301596; // 0x108005c

public static final int ic_popup_disk_full = 17301597; // 0x108005d

public static final int ic_popup_reminder = 17301598; // 0x108005e

public static final int ic_popup_sync = 17301599; // 0x108005f

public static final int ic_search_category_default = 17301600; // 0x1080060

public static final int ic_secure = 17301601; // 0x1080061

public static final int list_selector_background = 17301602; // 0x1080062

public static final int menu_frame = 17301603; // 0x1080063

public static final int menu_full_frame = 17301604; // 0x1080064

public static final int menuitem_background = 17301605; // 0x1080065

public static final int picture_frame = 17301606; // 0x1080066

public static final int presence_audio_away = 17301679; // 0x10800af

public static final int presence_audio_busy = 17301680; // 0x10800b0

public static final int presence_audio_online = 17301681; // 0x10800b1

public static final int presence_away = 17301607; // 0x1080067

public static final int presence_busy = 17301608; // 0x1080068

public static final int presence_invisible = 17301609; // 0x1080069

public static final int presence_offline = 17301610; // 0x108006a

public static final int presence_online = 17301611; // 0x108006b

/**
 * presence drawables for videochat or audiochat capable contacts
 */

public static final int presence_video_away = 17301676; // 0x10800ac

public static final int presence_video_busy = 17301677; // 0x10800ad

public static final int presence_video_online = 17301678; // 0x10800ae

public static final int progress_horizontal = 17301612; // 0x108006c

public static final int progress_indeterminate_horizontal = 17301613; // 0x108006d

public static final int radiobutton_off_background = 17301614; // 0x108006e

public static final int radiobutton_on_background = 17301615; // 0x108006f

public static final int screen_background_dark = 17301656; // 0x1080098

/**
 * Semi-transparent background that can be used when placing a dark
 * themed UI on top of some arbitrary background (such as the
 * wallpaper).  This darkens the background sufficiently that the UI
 * can be seen.
 * Background drawable that can be used for a transparent activity to
 * be able to display a dark UI: this darkens its background to make
 * a dark (default theme) UI more visible.
 */

public static final int screen_background_dark_transparent = 17301673; // 0x10800a9

public static final int screen_background_light = 17301657; // 0x1080099

/**
 * Background drawable that can be used for a transparent activity to
 * be able to display a light UI: this lightens its background to make
 * a light UI more visible.
 */

public static final int screen_background_light_transparent = 17301674; // 0x10800aa

public static final int spinner_background = 17301616; // 0x1080070

public static final int spinner_dropdown_background = 17301617; // 0x1080071

public static final int star_big_off = 17301619; // 0x1080073

public static final int star_big_on = 17301618; // 0x1080072

public static final int star_off = 17301621; // 0x1080075

public static final int star_on = 17301620; // 0x1080074

public static final int stat_notify_call_mute = 17301622; // 0x1080076

public static final int stat_notify_chat = 17301623; // 0x1080077

public static final int stat_notify_error = 17301624; // 0x1080078

public static final int stat_notify_missed_call = 17301631; // 0x108007f

public static final int stat_notify_more = 17301625; // 0x1080079

public static final int stat_notify_sdcard = 17301626; // 0x108007a

public static final int stat_notify_sdcard_prepare = 17301675; // 0x10800ab

public static final int stat_notify_sdcard_usb = 17301627; // 0x108007b

public static final int stat_notify_sync = 17301628; // 0x108007c

public static final int stat_notify_sync_noanim = 17301629; // 0x108007d

public static final int stat_notify_voicemail = 17301630; // 0x108007e

public static final int stat_sys_data_bluetooth = 17301632; // 0x1080080

public static final int stat_sys_download = 17301633; // 0x1080081

public static final int stat_sys_download_done = 17301634; // 0x1080082

public static final int stat_sys_headset = 17301635; // 0x1080083

/**
 * @deprecated Replaced by a private asset in the phone app.
 */

@Deprecated public static final int stat_sys_phone_call = 17301636; // 0x1080084

/**
 * @deprecated Replaced by a private asset in the phone app.
 */

@Deprecated public static final int stat_sys_phone_call_forward = 17301637; // 0x1080085

/**
 * @deprecated Replaced by a private asset in the phone app.
 */

@Deprecated public static final int stat_sys_phone_call_on_hold = 17301638; // 0x1080086

public static final int stat_sys_speakerphone = 17301639; // 0x1080087

public static final int stat_sys_upload = 17301640; // 0x1080088

public static final int stat_sys_upload_done = 17301641; // 0x1080089

/**
 * @deprecated Replaced by a private asset in the phone app.
 */

@Deprecated public static final int stat_sys_vp_phone_call = 17301671; // 0x10800a7

/**
 * @deprecated Replaced by a private asset in the phone app.
 */

@Deprecated public static final int stat_sys_vp_phone_call_on_hold = 17301672; // 0x10800a8

public static final int stat_sys_warning = 17301642; // 0x108008a

public static final int status_bar_item_app_background = 17301643; // 0x108008b

public static final int status_bar_item_background = 17301644; // 0x108008c

public static final int sym_action_call = 17301645; // 0x108008d

public static final int sym_action_chat = 17301646; // 0x108008e

public static final int sym_action_email = 17301647; // 0x108008f

public static final int sym_call_incoming = 17301648; // 0x1080090

public static final int sym_call_missed = 17301649; // 0x1080091

public static final int sym_call_outgoing = 17301650; // 0x1080092

public static final int sym_contact_card = 17301652; // 0x1080094

public static final int sym_def_app_icon = 17301651; // 0x1080093

public static final int title_bar = 17301653; // 0x1080095

/**
 * Drawable to use as a background for a taller version of the titlebar
 */

public static final int title_bar_tall = 17301670; // 0x10800a6

public static final int toast_frame = 17301654; // 0x1080096

public static final int zoom_plate = 17301655; // 0x1080097
}

@SuppressWarnings({"unchecked", "deprecation", "all"})
public static final class fraction {

public fraction() { throw new RuntimeException("Stub!"); }
}

@SuppressWarnings({"unchecked", "deprecation", "all"})
public static final class id {

public id() { throw new RuntimeException("Stub!"); }

/**
 * Accessibility action identifier for {@link android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction#ACTION_CONTEXT_CLICK}.
 */

public static final int accessibilityActionContextClick = 16908348; // 0x102003c

/**
 * Accessibility action identifier for {@link android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction#ACTION_HIDE_TOOLTIP}.
 */

public static final int accessibilityActionHideTooltip = 16908357; // 0x1020045

/**
 * Accessibility action identifier for {@link android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction#ACTION_MOVE_WINDOW}.
 */

public static final int accessibilityActionMoveWindow = 16908354; // 0x1020042

/**
 * Accessibility action identifier for {@link android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction#ACTION_SCROLL_DOWN}.
 */

public static final int accessibilityActionScrollDown = 16908346; // 0x102003a

/**
 * Accessibility action identifier for {@link android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction#ACTION_SCROLL_LEFT}.
 */

public static final int accessibilityActionScrollLeft = 16908345; // 0x1020039

/**
 * Accessibility action identifier for {@link android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction#ACTION_SCROLL_RIGHT}.
 */

public static final int accessibilityActionScrollRight = 16908347; // 0x102003b

/**
 * Accessibility action identifier for {@link android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction#ACTION_SCROLL_TO_POSITION}.
 */

public static final int accessibilityActionScrollToPosition = 16908343; // 0x1020037

/**
 * Accessibility action identifier for {@link android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction#ACTION_SCROLL_UP}.
 */

public static final int accessibilityActionScrollUp = 16908344; // 0x1020038

/**
 * Accessibility action identifier for {@link android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction#ACTION_SET_PROGRESS}.
 */

public static final int accessibilityActionSetProgress = 16908349; // 0x102003d

/**
 * Accessibility action identifier for {@link android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction#ACTION_SHOW_ON_SCREEN}.
 */

public static final int accessibilityActionShowOnScreen = 16908342; // 0x1020036

/**
 * Accessibility action identifier for {@link android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction#ACTION_SHOW_TOOLTIP}.
 */

public static final int accessibilityActionShowTooltip = 16908356; // 0x1020044

/**
 * Menu ID to perform a "add to dictionary" operation.
 */

public static final int addToDictionary = 16908330; // 0x102002a

/**
 * Action used to manually trigger an autofill request
 */

public static final int autofill = 16908355; // 0x1020043

public static final int background = 16908288; // 0x1020000

public static final int button1 = 16908313; // 0x1020019

public static final int button2 = 16908314; // 0x102001a

public static final int button3 = 16908315; // 0x102001b

/**
 * The part of the UI shown by an
 * {@link android.inputmethodservice.InputMethodService} that contains the
 * views for displaying candidates for what the user has entered.
 */

public static final int candidatesArea = 16908317; // 0x102001d

public static final int checkbox = 16908289; // 0x1020001

/**
 * View ID of a {@link android.view.View} to close a popup keyboard
 */

public static final int closeButton = 16908327; // 0x1020027

public static final int content = 16908290; // 0x1020002

/**
 * Context menu ID for the "Copy" menu item to copy the currently
 * selected (or all) text in a text view to the clipboard.
 */

public static final int copy = 16908321; // 0x1020021

/**
 * Context menu ID for the "Copy URL" menu item to copy the currently
 * selected URL from the text view to the clipboard.
 */

public static final int copyUrl = 16908323; // 0x1020023

public static final int custom = 16908331; // 0x102002b

/**
 * Context menu ID for the "Cut" menu item to copy and delete the currently
 * selected (or all) text in a text view to the clipboard.
 */

public static final int cut = 16908320; // 0x1020020

public static final int edit = 16908291; // 0x1020003

public static final int empty = 16908292; // 0x1020004

/**
 * The part of the UI shown by an
 * {@link android.inputmethodservice.InputMethodService} that contains the
 * views for interacting with the user in extraction mode.
 */

public static final int extractArea = 16908316; // 0x102001c

public static final int hint = 16908293; // 0x1020005

public static final int home = 16908332; // 0x102002c

public static final int icon = 16908294; // 0x1020006

public static final int icon1 = 16908295; // 0x1020007

public static final int icon2 = 16908296; // 0x1020008

public static final int icon_frame = 16908350; // 0x102003e

public static final int input = 16908297; // 0x1020009

/**
 * The part of the UI shown by an
 * {@link android.inputmethodservice.InputMethodService} that contains the
 * views for entering text using the screen.
 */

public static final int inputArea = 16908318; // 0x102001e

/**
 * View ID of the text editor inside of an extracted text layout.
 */

public static final int inputExtractEditText = 16908325; // 0x1020025

/**
 * View ID of the {@link android.inputmethodservice.KeyboardView} within
 * an input method's input area.
 */

public static final int keyboardView = 16908326; // 0x1020026

public static final int list = 16908298; // 0x102000a

public static final int list_container = 16908351; // 0x102003f

public static final int mask = 16908334; // 0x102002e

public static final int message = 16908299; // 0x102000b

public static final int navigationBarBackground = 16908336; // 0x1020030

/**
 * Context menu ID for the "Paste" menu item to copy the current contents
 * of the clipboard into the text view.
 */

public static final int paste = 16908322; // 0x1020022

public static final int pasteAsPlainText = 16908337; // 0x1020031

public static final int primary = 16908300; // 0x102000c

public static final int progress = 16908301; // 0x102000d

public static final int redo = 16908339; // 0x1020033

public static final int replaceText = 16908340; // 0x1020034

public static final int secondaryProgress = 16908303; // 0x102000f

/**
 * Context menu ID for the "Select All" menu item to select all text
 * in a text view.
 */

public static final int selectAll = 16908319; // 0x102001f

/**
 * Context menu ID for the "Select text..." menu item to switch to text
 * selection context mode in text views.
 */

public static final int selectTextMode = 16908333; // 0x102002d

public static final int selectedIcon = 16908302; // 0x102000e

public static final int shareText = 16908341; // 0x1020035

/**
 * Menu ID to perform a "start selecting text" operation.
 */

public static final int startSelectingText = 16908328; // 0x1020028

public static final int statusBarBackground = 16908335; // 0x102002f

/**
 * Menu ID to perform a "stop selecting text" operation.
 */

public static final int stopSelectingText = 16908329; // 0x1020029

public static final int summary = 16908304; // 0x1020010

/**
 * Context menu ID for the "Input Method" menu item to being up the
 * input method picker dialog, allowing the user to switch to another
 * input method.
 */

public static final int switchInputMethod = 16908324; // 0x1020024

public static final int switch_widget = 16908352; // 0x1020040

public static final int tabcontent = 16908305; // 0x1020011

public static final int tabhost = 16908306; // 0x1020012

public static final int tabs = 16908307; // 0x1020013

public static final int text1 = 16908308; // 0x1020014

public static final int text2 = 16908309; // 0x1020015

public static final int textAssist = 16908353; // 0x1020041

public static final int title = 16908310; // 0x1020016

public static final int toggle = 16908311; // 0x1020017

public static final int undo = 16908338; // 0x1020032

public static final int widget_frame = 16908312; // 0x1020018
}

@SuppressWarnings({"unchecked", "deprecation", "all"})
public static final class integer {

public integer() { throw new RuntimeException("Stub!"); }

/**
 * The duration (in milliseconds) of a long animation.
 */

public static final int config_longAnimTime = 17694722; // 0x10e0002

/**
 * The duration (in milliseconds) of a medium-length animation.
 */

public static final int config_mediumAnimTime = 17694721; // 0x10e0001

/**
 * The duration (in milliseconds) of a short animation.
 */

public static final int config_shortAnimTime = 17694720; // 0x10e0000

/**
 * Maximum numerical value that will be shown in a status bar
 * notification icon or in the notification itself. Will be replaced
 * with @string/status_bar_notification_info_overflow when shown in the
 * UI.
 */

public static final int status_bar_notification_info_maxnum = 17694723; // 0x10e0003
}

@SuppressWarnings({"unchecked", "deprecation", "all"})
public static final class interpolator {

public interpolator() { throw new RuntimeException("Stub!"); }

/**
 * Acceleration curve matching a cubic ease out function.
 */

public static final int accelerate_cubic = 17563650; // 0x10c0002

/**
 * Acceleration curve matching an ease in + ease out function
 */

public static final int accelerate_decelerate = 17563654; // 0x10c0006

/**
 * Acceleration curve matching a quadtratic ease out function.
 */

public static final int accelerate_quad = 17563648; // 0x10c0000

/**
 * Acceleration curve matching a quint ease out function.
 */

public static final int accelerate_quint = 17563652; // 0x10c0004

/**
 * An interpolator where the change starts backward then flings forward.
 */

public static final int anticipate = 17563655; // 0x10c0007

/**
 * An interpolator where the change starts backward then flings forward and
 * overshoots the target value and finally goes back to the final value.
 */

public static final int anticipate_overshoot = 17563657; // 0x10c0009

/**
 * An interpolator where the change bounces at the end.
 */

public static final int bounce = 17563658; // 0x10c000a

/**
 * Repeats the animation for one cycle. The rate of change follows a
 * sinusoidal pattern.
 */

public static final int cycle = 17563660; // 0x10c000c

/**
 * Acceleration curve matching a cubic ease in function.
 */

public static final int decelerate_cubic = 17563651; // 0x10c0003

/**
 * Acceleration curve matching a quadtratic ease in function.
 */

public static final int decelerate_quad = 17563649; // 0x10c0001

/**
 * Acceleration curve matching a quint ease in function.
 */

public static final int decelerate_quint = 17563653; // 0x10c0005

/**
 * An interpolator which accelerates fast but decelerates extra slowly.
 */

public static final int fast_out_extra_slow_in = 17563674; // 0x10c001a

/**
 * An interpolator which accelerates fast and keeps accelerating until the end.
 */

public static final int fast_out_linear_in = 17563663; // 0x10c000f

/**
 * An interpolator which accelerates fast but decelerates slowly.
 */

public static final int fast_out_slow_in = 17563661; // 0x10c000d

/**
 * An interpolator where the rate of change is constant.
 */

public static final int linear = 17563659; // 0x10c000b

/**
 * An interpolator which starts with a peak non-zero velocity and decelerates slowly.
 */

public static final int linear_out_slow_in = 17563662; // 0x10c000e

/**
 * An interpolator where the change flings forward and overshoots the last
 * value then comes back.
 */

public static final int overshoot = 17563656; // 0x10c0008
}

@SuppressWarnings({"unchecked", "deprecation", "all"})
public static final class layout {

public layout() { throw new RuntimeException("Stub!"); }

public static final int activity_list_item = 17367040; // 0x1090000

public static final int browser_link_context_header = 17367054; // 0x109000e

public static final int expandable_list_content = 17367041; // 0x1090001

/**
 * Standard content view for a {@link android.app.ListFragment}.
 * If you are implementing a subclass of ListFragment with your
 * own customized content, you can include this layout in that
 * content to still retain all of the standard functionality of
 * the base class.
 */

public static final int list_content = 17367060; // 0x1090014

public static final int preference_category = 17367042; // 0x1090002

public static final int select_dialog_item = 17367057; // 0x1090011

public static final int select_dialog_multichoice = 17367059; // 0x1090013

public static final int select_dialog_singlechoice = 17367058; // 0x1090012

public static final int simple_dropdown_item_1line = 17367050; // 0x109000a

public static final int simple_expandable_list_item_1 = 17367046; // 0x1090006

public static final int simple_expandable_list_item_2 = 17367047; // 0x1090007

public static final int simple_gallery_item = 17367051; // 0x109000b

public static final int simple_list_item_1 = 17367043; // 0x1090003

public static final int simple_list_item_2 = 17367044; // 0x1090004

/**
 * A version of {@link #simple_list_item_1} that is able to change its
 * background state to indicate when it is activated (that is checked by
 * a ListView).
 */

public static final int simple_list_item_activated_1 = 17367062; // 0x1090016

/**
 * A version of {@link #simple_list_item_2} that is able to change its
 * background state to indicate when it is activated (that is checked by
 * a ListView).
 */

public static final int simple_list_item_activated_2 = 17367063; // 0x1090017

public static final int simple_list_item_checked = 17367045; // 0x1090005

public static final int simple_list_item_multiple_choice = 17367056; // 0x1090010

public static final int simple_list_item_single_choice = 17367055; // 0x109000f

/**
 * A simple ListView item layout which can contain text and support (single or multiple) item selection.
 */

public static final int simple_selectable_list_item = 17367061; // 0x1090015

public static final int simple_spinner_dropdown_item = 17367049; // 0x1090009

public static final int simple_spinner_item = 17367048; // 0x1090008

public static final int test_list_item = 17367052; // 0x109000c

public static final int two_line_list_item = 17367053; // 0x109000d
}

@SuppressWarnings({"unchecked", "deprecation", "all"})
public static final class menu {

public menu() { throw new RuntimeException("Stub!"); }
}

@SuppressWarnings({"unchecked", "deprecation", "all"})
public static final class mipmap {

public mipmap() { throw new RuntimeException("Stub!"); }

/**
 * Default icon for applications that don't specify an icon.
 */

public static final int sym_def_app_icon = 17629184; // 0x10d0000
}

@SuppressWarnings({"unchecked", "deprecation", "all"})
public static final class plurals {

public plurals() { throw new RuntimeException("Stub!"); }
}

@SuppressWarnings({"unchecked", "deprecation", "all"})
public static final class raw {

public raw() { throw new RuntimeException("Stub!"); }
}

@SuppressWarnings({"unchecked", "deprecation", "all"})
public static final class string {

public string() { throw new RuntimeException("Stub!"); }

/**
 * Button to close error alert when a video cannot be played
 */

public static final int VideoView_error_button = 17039376; // 0x1040010

/**
 * Text for error alert when a video container is not valid for progressive download/playback.
 */

public static final int VideoView_error_text_invalid_progressive_playback = 17039381; // 0x1040015

/**
 * Text for error alert when a video cannot be played. it can be used by any app.
 */

public static final int VideoView_error_text_unknown = 17039377; // 0x1040011

/**
 * Title for error alert when a video cannot be played.  it can be used by any app.
 */

public static final int VideoView_error_title = 17039378; // 0x1040012

/**
 * Item on EditText context menu. This action is used to request autofill.
 */

public static final int autofill = 17039386; // 0x104001a

/**
 * Preference framework strings.
 */

public static final int cancel = 17039360; // 0x1040000

/**
 * Item on EditText context menu. This action is used to cut selected the text into the clipboard.
 */

public static final int copy = 17039361; // 0x1040001

/**
 * Item on EditText context menu. This action is used to copy a URL from the edit field into the clipboard.
 */

public static final int copyUrl = 17039362; // 0x1040002

/**
 * Item on EditText context menu.  This action is used to cut selected the text into the clipboard.
 */

public static final int cut = 17039363; // 0x1040003

/**
 * What the UI should display for "Msisdn" unless overridden by the SIM
 */

public static final int defaultMsisdnAlphaTag = 17039365; // 0x1040005

/**
 * What the UI should display for "voice mail" unless overridden by the SIM
 */

public static final int defaultVoiceMailAlphaTag = 17039364; // 0x1040004

/**
 * This is the generic "attention" string to be used in attention dialogs.  Typically
 * combined with setIconAttribute(android.R.attr.alertDialogIcon)
 * (or setIcon(android.R.drawable.ic_dialog_alert) on legacy versions of the platform)
 */

public static final int dialog_alert_title = 17039380; // 0x1040014

/**
 * How to display the lack of a phone number
 */

public static final int emptyPhoneNumber = 17039366; // 0x1040006

/**
 * Content description which should be used for the fingerprint icon.
 */

public static final int fingerprint_icon_content_description = 17039384; // 0x1040018

/**
 * Displayed when a web request failed because the URL isn't in a valid form.
 */

public static final int httpErrorBadUrl = 17039367; // 0x1040007

/**
 * Displayed when a web request failed because the protocol of the server is not supported.
 */

public static final int httpErrorUnsupportedScheme = 17039368; // 0x1040008

/**
 * Preference framework strings.
 */

public static final int no = 17039369; // 0x1040009

/**
 * Preference framework strings.
 */

public static final int ok = 17039370; // 0x104000a

/**
 * Item on EditText context menu. This action is used to paste from the clipboard into the eidt field
 */

public static final int paste = 17039371; // 0x104000b

/**
 * Item on EditText context menu. This action is used to paste from the clipboard into the eidt field without formatting
 */

public static final int paste_as_plain_text = 17039385; // 0x1040019

/**
 * This is the default button label in the system-wide search UI.
 * It is also used by the home screen's search "widget". It should be short
 */

public static final int search_go = 17039372; // 0x104000c

/**
 * Item on EditText context menu. This action is used to select all text in the edit field.
 */

public static final int selectAll = 17039373; // 0x104000d

/**
 * Item on EditText context menu. Added only when the context menu is not empty, it enable selection context mode. [CHAR LIMIT=20]
 */

public static final int selectTextMode = 17039382; // 0x1040016

/**
 * Text to use when the number in a notification info is too large
 * (greater than status_bar_notification_info_maxnum, defined in
 * values/config.xml) and must be truncated. May need to be localized
 * for most appropriate textual indicator of "more than X".
 * [CHAR LIMIT=4]
 */

public static final int status_bar_notification_info_overflow = 17039383; // 0x1040017

/**
 * How to display the lack of a name
 */

public static final int unknownName = 17039374; // 0x104000e

/**
 * Used in Contacts for a field that has no label and in Note Pad
 * for a note with no name.
 */

public static final int untitled = 17039375; // 0x104000f

/**
 * Preference framework strings.
 */

public static final int yes = 17039379; // 0x1040013
}

@SuppressWarnings({"unchecked", "deprecation", "all"})
public static final class style {

public style() { throw new RuntimeException("Stub!"); }

/**
 * Base style for animations.  This style specifies no animations.
 */

public static final int Animation = 16973824; // 0x1030000

/**
 * Standard animations for a full-screen window or activity.
 */

public static final int Animation_Activity = 16973825; // 0x1030001

/**
 * Standard animations for a non-full-screen window or activity.
 */

public static final int Animation_Dialog = 16973826; // 0x1030002

/**
 * Window animations that are applied to input method overlay windows.
 */

public static final int Animation_InputMethod = 16973910; // 0x1030056

public static final int Animation_Toast = 16973828; // 0x1030004

/**
 * Standard animations for a translucent window or activity.  This
 * style is <em>not</em> used by default for the translucent theme
 * (since translucent activities are a special case that have no
 * clear UI paradigm), but you can make your own specialized theme
 * with this animation style if you would like to have the standard
 * platform transition animation.
 */

public static final int Animation_Translucent = 16973827; // 0x1030003

/**
 * Other Styles
 */

public static final int DeviceDefault_ButtonBar = 16974287; // 0x10301cf

public static final int DeviceDefault_ButtonBar_AlertDialog = 16974288; // 0x10301d0

public static final int DeviceDefault_Light_ButtonBar = 16974290; // 0x10301d2

public static final int DeviceDefault_Light_ButtonBar_AlertDialog = 16974291; // 0x10301d3

public static final int DeviceDefault_Light_SegmentedButton = 16974292; // 0x10301d4

public static final int DeviceDefault_SegmentedButton = 16974289; // 0x10301d1

public static final int Holo_ButtonBar = 16974053; // 0x10300e5

public static final int Holo_ButtonBar_AlertDialog = 16974055; // 0x10300e7

public static final int Holo_Light_ButtonBar = 16974054; // 0x10300e6

public static final int Holo_Light_ButtonBar_AlertDialog = 16974056; // 0x10300e8

public static final int Holo_Light_SegmentedButton = 16974058; // 0x10300ea

public static final int Holo_SegmentedButton = 16974057; // 0x10300e9

public static final int MediaButton = 16973879; // 0x1030037

public static final int MediaButton_Ffwd = 16973883; // 0x103003b

public static final int MediaButton_Next = 16973881; // 0x1030039

public static final int MediaButton_Pause = 16973885; // 0x103003d

public static final int MediaButton_Play = 16973882; // 0x103003a

public static final int MediaButton_Previous = 16973880; // 0x1030038

public static final int MediaButton_Rew = 16973884; // 0x103003c

public static final int TextAppearance = 16973886; // 0x103003e

/**
 * Text Appearance Styles
 */

public static final int TextAppearance_DeviceDefault = 16974253; // 0x10301ad

public static final int TextAppearance_DeviceDefault_DialogWindowTitle = 16974264; // 0x10301b8

public static final int TextAppearance_DeviceDefault_Inverse = 16974254; // 0x10301ae

public static final int TextAppearance_DeviceDefault_Large = 16974255; // 0x10301af

public static final int TextAppearance_DeviceDefault_Large_Inverse = 16974256; // 0x10301b0

public static final int TextAppearance_DeviceDefault_Medium = 16974257; // 0x10301b1

public static final int TextAppearance_DeviceDefault_Medium_Inverse = 16974258; // 0x10301b2

public static final int TextAppearance_DeviceDefault_SearchResult_Subtitle = 16974262; // 0x10301b6

public static final int TextAppearance_DeviceDefault_SearchResult_Title = 16974261; // 0x10301b5

public static final int TextAppearance_DeviceDefault_Small = 16974259; // 0x10301b3

public static final int TextAppearance_DeviceDefault_Small_Inverse = 16974260; // 0x10301b4

public static final int TextAppearance_DeviceDefault_Widget = 16974265; // 0x10301b9

public static final int TextAppearance_DeviceDefault_Widget_ActionBar_Menu = 16974286; // 0x10301ce

public static final int TextAppearance_DeviceDefault_Widget_ActionBar_Subtitle = 16974279; // 0x10301c7

/**
 * @deprecated Action bars are now themed using the inheritable android:theme attribute.
 */

@Deprecated public static final int TextAppearance_DeviceDefault_Widget_ActionBar_Subtitle_Inverse = 16974283; // 0x10301cb

public static final int TextAppearance_DeviceDefault_Widget_ActionBar_Title = 16974278; // 0x10301c6

/**
 * @deprecated Action bars are now themed using the inheritable android:theme attribute.
 */

@Deprecated public static final int TextAppearance_DeviceDefault_Widget_ActionBar_Title_Inverse = 16974282; // 0x10301ca

public static final int TextAppearance_DeviceDefault_Widget_ActionMode_Subtitle = 16974281; // 0x10301c9

/**
 * @deprecated Action bars are now themed using the inheritable android:theme attribute.
 */

@Deprecated public static final int TextAppearance_DeviceDefault_Widget_ActionMode_Subtitle_Inverse = 16974285; // 0x10301cd

public static final int TextAppearance_DeviceDefault_Widget_ActionMode_Title = 16974280; // 0x10301c8

/**
 * @deprecated Action bars are now themed using the inheritable android:theme attribute.
 */

@Deprecated public static final int TextAppearance_DeviceDefault_Widget_ActionMode_Title_Inverse = 16974284; // 0x10301cc

public static final int TextAppearance_DeviceDefault_Widget_Button = 16974266; // 0x10301ba

public static final int TextAppearance_DeviceDefault_Widget_DropDownHint = 16974271; // 0x10301bf

public static final int TextAppearance_DeviceDefault_Widget_DropDownItem = 16974272; // 0x10301c0

public static final int TextAppearance_DeviceDefault_Widget_EditText = 16974274; // 0x10301c2

public static final int TextAppearance_DeviceDefault_Widget_IconMenu_Item = 16974267; // 0x10301bb

public static final int TextAppearance_DeviceDefault_Widget_PopupMenu = 16974275; // 0x10301c3

public static final int TextAppearance_DeviceDefault_Widget_PopupMenu_Large = 16974276; // 0x10301c4

public static final int TextAppearance_DeviceDefault_Widget_PopupMenu_Small = 16974277; // 0x10301c5

public static final int TextAppearance_DeviceDefault_Widget_TabWidget = 16974268; // 0x10301bc

public static final int TextAppearance_DeviceDefault_Widget_TextView = 16974269; // 0x10301bd

public static final int TextAppearance_DeviceDefault_Widget_TextView_PopupMenu = 16974270; // 0x10301be

public static final int TextAppearance_DeviceDefault_Widget_TextView_SpinnerItem = 16974273; // 0x10301c1

public static final int TextAppearance_DeviceDefault_WindowTitle = 16974263; // 0x10301b7

public static final int TextAppearance_DialogWindowTitle = 16973889; // 0x1030041

/**
 * Text Styles
 */

public static final int TextAppearance_Holo = 16974075; // 0x10300fb

public static final int TextAppearance_Holo_DialogWindowTitle = 16974103; // 0x1030117

public static final int TextAppearance_Holo_Inverse = 16974076; // 0x10300fc

public static final int TextAppearance_Holo_Large = 16974077; // 0x10300fd

public static final int TextAppearance_Holo_Large_Inverse = 16974078; // 0x10300fe

public static final int TextAppearance_Holo_Medium = 16974079; // 0x10300ff

public static final int TextAppearance_Holo_Medium_Inverse = 16974080; // 0x1030100

public static final int TextAppearance_Holo_SearchResult_Subtitle = 16974084; // 0x1030104

public static final int TextAppearance_Holo_SearchResult_Title = 16974083; // 0x1030103

public static final int TextAppearance_Holo_Small = 16974081; // 0x1030101

public static final int TextAppearance_Holo_Small_Inverse = 16974082; // 0x1030102

public static final int TextAppearance_Holo_Widget = 16974085; // 0x1030105

public static final int TextAppearance_Holo_Widget_ActionBar_Menu = 16974112; // 0x1030120

public static final int TextAppearance_Holo_Widget_ActionBar_Subtitle = 16974099; // 0x1030113

public static final int TextAppearance_Holo_Widget_ActionBar_Subtitle_Inverse = 16974109; // 0x103011d

public static final int TextAppearance_Holo_Widget_ActionBar_Title = 16974098; // 0x1030112

public static final int TextAppearance_Holo_Widget_ActionBar_Title_Inverse = 16974108; // 0x103011c

public static final int TextAppearance_Holo_Widget_ActionMode_Subtitle = 16974101; // 0x1030115

public static final int TextAppearance_Holo_Widget_ActionMode_Subtitle_Inverse = 16974111; // 0x103011f

public static final int TextAppearance_Holo_Widget_ActionMode_Title = 16974100; // 0x1030114

public static final int TextAppearance_Holo_Widget_ActionMode_Title_Inverse = 16974110; // 0x103011e

public static final int TextAppearance_Holo_Widget_Button = 16974086; // 0x1030106

public static final int TextAppearance_Holo_Widget_DropDownHint = 16974091; // 0x103010b

public static final int TextAppearance_Holo_Widget_DropDownItem = 16974092; // 0x103010c

public static final int TextAppearance_Holo_Widget_EditText = 16974094; // 0x103010e

public static final int TextAppearance_Holo_Widget_IconMenu_Item = 16974087; // 0x1030107

public static final int TextAppearance_Holo_Widget_PopupMenu = 16974095; // 0x103010f

public static final int TextAppearance_Holo_Widget_PopupMenu_Large = 16974096; // 0x1030110

public static final int TextAppearance_Holo_Widget_PopupMenu_Small = 16974097; // 0x1030111

/**
 * This style is for smaller screens; values-xlarge defines a version
 * for larger screens.
 */

public static final int TextAppearance_Holo_Widget_TabWidget = 16974088; // 0x1030108

public static final int TextAppearance_Holo_Widget_TextView = 16974089; // 0x1030109

public static final int TextAppearance_Holo_Widget_TextView_PopupMenu = 16974090; // 0x103010a

public static final int TextAppearance_Holo_Widget_TextView_SpinnerItem = 16974093; // 0x103010d

public static final int TextAppearance_Holo_WindowTitle = 16974102; // 0x1030116

public static final int TextAppearance_Inverse = 16973887; // 0x103003f

public static final int TextAppearance_Large = 16973890; // 0x1030042

public static final int TextAppearance_Large_Inverse = 16973891; // 0x1030043

/**
 * Text styles
 */

public static final int TextAppearance_Material = 16974317; // 0x10301ed

public static final int TextAppearance_Material_Body1 = 16974320; // 0x10301f0

public static final int TextAppearance_Material_Body2 = 16974319; // 0x10301ef

public static final int TextAppearance_Material_Button = 16974318; // 0x10301ee

public static final int TextAppearance_Material_Caption = 16974321; // 0x10301f1

public static final int TextAppearance_Material_DialogWindowTitle = 16974322; // 0x10301f2

public static final int TextAppearance_Material_Display1 = 16974326; // 0x10301f6

public static final int TextAppearance_Material_Display2 = 16974325; // 0x10301f5

public static final int TextAppearance_Material_Display3 = 16974324; // 0x10301f4

public static final int TextAppearance_Material_Display4 = 16974323; // 0x10301f3

public static final int TextAppearance_Material_Headline = 16974327; // 0x10301f7

/**
 * Deprecated text styles
 */

public static final int TextAppearance_Material_Inverse = 16974328; // 0x10301f8

public static final int TextAppearance_Material_Large = 16974329; // 0x10301f9

public static final int TextAppearance_Material_Large_Inverse = 16974330; // 0x10301fa

public static final int TextAppearance_Material_Medium = 16974331; // 0x10301fb

public static final int TextAppearance_Material_Medium_Inverse = 16974332; // 0x10301fc

public static final int TextAppearance_Material_Menu = 16974333; // 0x10301fd

public static final int TextAppearance_Material_Notification = 16974334; // 0x10301fe

public static final int TextAppearance_Material_Notification_Emphasis = 16974335; // 0x10301ff

public static final int TextAppearance_Material_Notification_Info = 16974336; // 0x1030200

public static final int TextAppearance_Material_Notification_Line2 = 16974337; // 0x1030201

public static final int TextAppearance_Material_Notification_Time = 16974338; // 0x1030202

public static final int TextAppearance_Material_Notification_Title = 16974339; // 0x1030203

public static final int TextAppearance_Material_SearchResult_Subtitle = 16974340; // 0x1030204

public static final int TextAppearance_Material_SearchResult_Title = 16974341; // 0x1030205

public static final int TextAppearance_Material_Small = 16974342; // 0x1030206

public static final int TextAppearance_Material_Small_Inverse = 16974343; // 0x1030207

public static final int TextAppearance_Material_Subhead = 16974344; // 0x1030208

public static final int TextAppearance_Material_Title = 16974345; // 0x1030209

public static final int TextAppearance_Material_Widget = 16974347; // 0x103020b

public static final int TextAppearance_Material_Widget_ActionBar_Menu = 16974348; // 0x103020c

public static final int TextAppearance_Material_Widget_ActionBar_Subtitle = 16974349; // 0x103020d

public static final int TextAppearance_Material_Widget_ActionBar_Subtitle_Inverse = 16974350; // 0x103020e

public static final int TextAppearance_Material_Widget_ActionBar_Title = 16974351; // 0x103020f

public static final int TextAppearance_Material_Widget_ActionBar_Title_Inverse = 16974352; // 0x1030210

public static final int TextAppearance_Material_Widget_ActionMode_Subtitle = 16974353; // 0x1030211

public static final int TextAppearance_Material_Widget_ActionMode_Subtitle_Inverse = 16974354; // 0x1030212

public static final int TextAppearance_Material_Widget_ActionMode_Title = 16974355; // 0x1030213

public static final int TextAppearance_Material_Widget_ActionMode_Title_Inverse = 16974356; // 0x1030214

public static final int TextAppearance_Material_Widget_Button = 16974357; // 0x1030215

public static final int TextAppearance_Material_Widget_Button_Borderless_Colored = 16974559; // 0x10302df

public static final int TextAppearance_Material_Widget_Button_Colored = 16974558; // 0x10302de

public static final int TextAppearance_Material_Widget_Button_Inverse = 16974548; // 0x10302d4

public static final int TextAppearance_Material_Widget_DropDownHint = 16974358; // 0x1030216

public static final int TextAppearance_Material_Widget_DropDownItem = 16974359; // 0x1030217

public static final int TextAppearance_Material_Widget_EditText = 16974360; // 0x1030218

public static final int TextAppearance_Material_Widget_IconMenu_Item = 16974361; // 0x1030219

public static final int TextAppearance_Material_Widget_PopupMenu = 16974362; // 0x103021a

public static final int TextAppearance_Material_Widget_PopupMenu_Large = 16974363; // 0x103021b

public static final int TextAppearance_Material_Widget_PopupMenu_Small = 16974364; // 0x103021c

public static final int TextAppearance_Material_Widget_TabWidget = 16974365; // 0x103021d

public static final int TextAppearance_Material_Widget_TextView = 16974366; // 0x103021e

public static final int TextAppearance_Material_Widget_TextView_PopupMenu = 16974367; // 0x103021f

public static final int TextAppearance_Material_Widget_TextView_SpinnerItem = 16974368; // 0x1030220

public static final int TextAppearance_Material_Widget_Toolbar_Subtitle = 16974369; // 0x1030221

public static final int TextAppearance_Material_Widget_Toolbar_Title = 16974370; // 0x1030222

public static final int TextAppearance_Material_WindowTitle = 16974346; // 0x103020a

public static final int TextAppearance_Medium = 16973892; // 0x1030044

public static final int TextAppearance_Medium_Inverse = 16973893; // 0x1030045

public static final int TextAppearance_Small = 16973894; // 0x1030046

public static final int TextAppearance_Small_Inverse = 16973895; // 0x1030047

/**
 * Notification content styles
 */

public static final int TextAppearance_StatusBar_EventContent = 16973927; // 0x1030067

public static final int TextAppearance_StatusBar_EventContent_Title = 16973928; // 0x1030068

public static final int TextAppearance_StatusBar_Icon = 16973926; // 0x1030066

public static final int TextAppearance_StatusBar_Title = 16973925; // 0x1030065

public static final int TextAppearance_SuggestionHighlight = 16974104; // 0x1030118

public static final int TextAppearance_Theme = 16973888; // 0x1030040

public static final int TextAppearance_Theme_Dialog = 16973896; // 0x1030048

public static final int TextAppearance_Widget = 16973897; // 0x1030049

public static final int TextAppearance_Widget_Button = 16973898; // 0x103004a

public static final int TextAppearance_Widget_DropDownHint = 16973904; // 0x1030050

public static final int TextAppearance_Widget_DropDownItem = 16973905; // 0x1030051

public static final int TextAppearance_Widget_EditText = 16973900; // 0x103004c

public static final int TextAppearance_Widget_IconMenu_Item = 16973899; // 0x103004b

public static final int TextAppearance_Widget_PopupMenu_Large = 16973952; // 0x1030080

public static final int TextAppearance_Widget_PopupMenu_Small = 16973953; // 0x1030081

public static final int TextAppearance_Widget_TabWidget = 16973901; // 0x103004d

public static final int TextAppearance_Widget_TextView = 16973902; // 0x103004e

public static final int TextAppearance_Widget_TextView_PopupMenu = 16973903; // 0x103004f

public static final int TextAppearance_Widget_TextView_SpinnerItem = 16973906; // 0x1030052

public static final int TextAppearance_WindowTitle = 16973907; // 0x1030053

/**
 * The default theme for apps on API level 10 and lower. This is the theme used for
 * activities that have not explicitly set their own theme.
 * <p>You can count on this being a dark
 * background with light text on top, but should try to make no
 * other assumptions about its appearance. In particular, the text
 * inside of widgets using this theme may be completely different,
 * with the widget container being a light color and the text on top
 * of it a dark color.
 * <p>If you're developing for API level 11 and higher, you should instead use {@link
 * #Theme_Holo} or {@link #Theme_DeviceDefault}.</p>
 */

public static final int Theme = 16973829; // 0x1030005

public static final int ThemeOverlay = 16974407; // 0x1030247

public static final int ThemeOverlay_Material = 16974408; // 0x1030248

/**
 * Theme overlay that replaces the normal control color, which by default is the same as the
 * secondary text color, with the primary text color.
 */

public static final int ThemeOverlay_Material_ActionBar = 16974409; // 0x1030249

/**
 * Theme overlay that replaces colors with their dark versions but preserves
 * the value of colorAccent, colorPrimary and its variants.
 */

public static final int ThemeOverlay_Material_Dark = 16974411; // 0x103024b

/**
 * Theme overlay that replaces colors with their dark versions and replaces the normal
 * control color, which by default is the same as the secondary text color, with the primary
 * text color.
 */

public static final int ThemeOverlay_Material_Dark_ActionBar = 16974412; // 0x103024c

/**
 * Theme overlay that overrides window properties to display as a dialog.
 * Override behaviour to set the theme colours for dialogs, keep them the same.
 */

public static final int ThemeOverlay_Material_Dialog = 16974550; // 0x10302d6

public static final int ThemeOverlay_Material_Dialog_Alert = 16974551; // 0x10302d7

/**
 * Theme overlay that replaces colors with their light versions but preserves
 * the value of colorAccent, colorPrimary and its variants.
 */

public static final int ThemeOverlay_Material_Light = 16974410; // 0x103024a

/**
 * Variant on {@link #Theme} that ensures the background is
 * completely black.  This is useful for things like image viewers and
 * media players.   If you want the normal (dark background) theme
 * do <em>not</em> use this, use {@link #Theme}.
 */

public static final int Theme_Black = 16973832; // 0x1030008

/**
 * Variant of {@link #Theme_Black} with no title bar
 */

public static final int Theme_Black_NoTitleBar = 16973833; // 0x1030009

/**
 * Variant of {@link #Theme_Black} that has no title bar and
 * no status bar.  This theme
 * sets {@link android.R.attr#windowFullscreen} to true.
 */

public static final int Theme_Black_NoTitleBar_Fullscreen = 16973834; // 0x103000a

public static final int Theme_DeviceDefault = 16974120; // 0x1030128

/**
 * DeviceDefault theme for dialog windows and activities. This changes the window to be
 * floating (not fill the entire screen), and puts a frame around its contents. You can set this
 * theme on an activity if you would like to make an activity that looks like a Dialog.
 * DeviceDefault theme for dialog windows and activities. In contrast to Material, the
 * watch theme is not floating. You can set this theme on an activity if you would like to make
 * an activity that looks like a Dialog.
 */

public static final int Theme_DeviceDefault_Dialog = 16974126; // 0x103012e

/**
 * DeviceDefault theme for a window that will be displayed either full-screen on smaller
 * screens (small, normal) or as a dialog on larger screens (large, xlarge).
 * DeviceDefault theme for a window that will be displayed either full-screen on smaller
 * screens (small, normal) or as a dialog on larger screens (large, xlarge).
 */

public static final int Theme_DeviceDefault_DialogWhenLarge = 16974134; // 0x1030136

/**
 * DeviceDefault theme for a window without an action bar that will be displayed either
 * full-screen on smaller screens (small, normal) or as a dialog on larger screens (large,
 * xlarge).
 * DeviceDefault theme for a window without an action bar that will be displayed either
 * full-screen on smaller screens (small, normal) or as a dialog on larger screens (large,
 * xlarge).
 */

public static final int Theme_DeviceDefault_DialogWhenLarge_NoActionBar = 16974135; // 0x1030137

public static final int Theme_DeviceDefault_Dialog_Alert = 16974545; // 0x10302d1

/**
 * Variant of {@link #Theme_DeviceDefault_Dialog} that has a nice minimum width for a
 * regular dialog.
 * Variant of {@link #Theme_DeviceDefault_Dialog} that has a nice minimum width for a
 * regular dialog.
 */

public static final int Theme_DeviceDefault_Dialog_MinWidth = 16974127; // 0x103012f

/**
 * Variant of {@link #Theme_DeviceDefault_Dialog} without an action bar
 * Variant of {@link #Theme_DeviceDefault_Dialog} without an action bar
 */

public static final int Theme_DeviceDefault_Dialog_NoActionBar = 16974128; // 0x1030130

/**
 * Variant of {@link #Theme_DeviceDefault_Dialog_NoActionBar} that has a nice minimum width
 * for a regular dialog.
 * Variant of {@link #Theme_DeviceDefault_Dialog_NoActionBar} that has a nice minimum width
 * for a regular dialog.
 */

public static final int Theme_DeviceDefault_Dialog_NoActionBar_MinWidth = 16974129; // 0x1030131

/**
 * DeviceDefault style for input methods, which is used by the
 * {@link android.inputmethodservice.InputMethodService} class.
 * DeviceDefault style for input methods, which is used by the
 * {@link android.inputmethodservice.InputMethodService} class.
 */

public static final int Theme_DeviceDefault_InputMethod = 16974142; // 0x103013e

/**
 * Variant of {@link #Theme_DeviceDefault} with a light-colored style
 */

public static final int Theme_DeviceDefault_Light = 16974123; // 0x103012b

/**
 * Variant of the DeviceDefault (light) theme that has a solid (opaque) action bar with an
 * inverse color profile.
 */

public static final int Theme_DeviceDefault_Light_DarkActionBar = 16974143; // 0x103013f

/**
 * DeviceDefault light theme for dialog windows and activities. This changes the window to be
 * floating (not fill the entire screen), and puts a frame around its contents. You can set this
 * theme on an activity if you would like to make an activity that looks like a Dialog.
 */

public static final int Theme_DeviceDefault_Light_Dialog = 16974130; // 0x1030132

/**
 * DeviceDefault light theme for a window that will be displayed either full-screen on smaller
 * screens (small, normal) or as a dialog on larger screens (large, xlarge).
 */

public static final int Theme_DeviceDefault_Light_DialogWhenLarge = 16974136; // 0x1030138

/**
 * DeviceDefault light theme for a window without an action bar that will be displayed either
 * full-screen on smaller screens (small, normal) or as a dialog on larger screens (large,
 * xlarge).
 */

public static final int Theme_DeviceDefault_Light_DialogWhenLarge_NoActionBar = 16974137; // 0x1030139

public static final int Theme_DeviceDefault_Light_Dialog_Alert = 16974546; // 0x10302d2

/**
 * Variant of {@link #Theme_DeviceDefault_Light_Dialog} that has a nice minimum width for a
 * regular dialog.
 */

public static final int Theme_DeviceDefault_Light_Dialog_MinWidth = 16974131; // 0x1030133

/**
 * Variant of {@link #Theme_DeviceDefault_Light_Dialog} without an action bar
 */

public static final int Theme_DeviceDefault_Light_Dialog_NoActionBar = 16974132; // 0x1030134

/**
 * Variant of {@link #Theme_DeviceDefault_Light_Dialog_NoActionBar} that has a nice minimum
 * width for a regular dialog.
 */

public static final int Theme_DeviceDefault_Light_Dialog_NoActionBar_MinWidth = 16974133; // 0x1030135

/**
 * Variant of {@link #Theme_DeviceDefault_Light} with no action bar
 */

public static final int Theme_DeviceDefault_Light_NoActionBar = 16974124; // 0x103012c

/**
 * Variant of {@link #Theme_DeviceDefault_Light} with no action bar and no status bar.
 * This theme sets {@link android.R.attr#windowFullscreen} to true.
 */

public static final int Theme_DeviceDefault_Light_NoActionBar_Fullscreen = 16974125; // 0x103012d

/**
 * Variant of {@link #Theme_DeviceDefault_Light} with no action bar and no status bar
 * and extending in to overscan region.  This theme
 * sets {@link android.R.attr#windowFullscreen} and {@link android.R.attr#windowOverscan}
 * to true.
 */

public static final int Theme_DeviceDefault_Light_NoActionBar_Overscan = 16974304; // 0x10301e0

/**
 * Variant of {@link #Theme_DeviceDefault_Light} that has no title bar and translucent
 * system decor.  This theme sets {@link android.R.attr#windowTranslucentStatus} and
 * {@link android.R.attr#windowTranslucentNavigation} to true.
 */

public static final int Theme_DeviceDefault_Light_NoActionBar_TranslucentDecor = 16974308; // 0x10301e4

/**
 * DeviceDefault light theme for panel windows. This removes all extraneous window
 * decorations, so you basically have an empty rectangle in which to place your content. It makes
 * the window floating, with a transparent background, and turns off dimming behind the window.
 */

public static final int Theme_DeviceDefault_Light_Panel = 16974139; // 0x103013b

/**
 * Variant of {@link #Theme_DeviceDefault} with no action bar
 * Variant of {@link #Theme_DeviceDefault} with no action bar
 */

public static final int Theme_DeviceDefault_NoActionBar = 16974121; // 0x1030129

/**
 * Variant of {@link #Theme_DeviceDefault} with no action bar and no status bar.  This theme
 * sets {@link android.R.attr#windowFullscreen} to true.
 * Variant of {@link #Theme_DeviceDefault} with no action bar and no status bar.  This theme
 * sets {@link android.R.attr#windowFullscreen} to true.
 */

public static final int Theme_DeviceDefault_NoActionBar_Fullscreen = 16974122; // 0x103012a

/**
 * Variant of {@link #Theme_DeviceDefault} with no action bar and no status bar and
 * extending in to overscan region.  This theme
 * sets {@link android.R.attr#windowFullscreen} and {@link android.R.attr#windowOverscan}
 * to true.
 * Variant of {@link #Theme_DeviceDefault} with no action bar and no status bar and
 * extending in to overscan region.  This theme
 * sets {@link android.R.attr#windowFullscreen} and {@link android.R.attr#windowOverscan}
 * to true.
 */

public static final int Theme_DeviceDefault_NoActionBar_Overscan = 16974303; // 0x10301df

/**
 * Variant of {@link #Theme_DeviceDefault} that has no title bar and translucent
 * system decor.  This theme sets {@link android.R.attr#windowTranslucentStatus} and
 * {@link android.R.attr#windowTranslucentNavigation} to true.
 * Variant of {@link #Theme_DeviceDefault} that has no title bar and translucent
 * system decor.  This theme sets {@link android.R.attr#windowTranslucentStatus} and
 * {@link android.R.attr#windowTranslucentNavigation} to true.
 */

public static final int Theme_DeviceDefault_NoActionBar_TranslucentDecor = 16974307; // 0x10301e3

/**
 * DeviceDefault theme for panel windows. This removes all extraneous window
 * decorations, so you basically have an empty rectangle in which to place your content. It makes
 * the window floating, with a transparent background, and turns off dimming behind the window.
 * DeviceDefault theme for panel windows. This removes all extraneous window
 * decorations, so you basically have an empty rectangle in which to place your content. It makes
 * the window floating, with a transparent background, and turns off dimming behind the window.
 */

public static final int Theme_DeviceDefault_Panel = 16974138; // 0x103013a

/**
 * DeviceDefault theme for a window that should look like the Settings app.
 * DeviceDefault theme for a window that should look like the Settings app.
 */

public static final int Theme_DeviceDefault_Settings = 16974371; // 0x1030223

/**
 * DeviceDefault theme for windows that want to have the user's selected wallpaper appear
 * behind them.
 * DeviceDefault theme for windows that want to have the user's selected wallpaper appear
 * behind them.
 */

public static final int Theme_DeviceDefault_Wallpaper = 16974140; // 0x103013c

/**
 * DeviceDefault theme for windows that want to have the user's selected wallpaper appear
 * behind them and without an action bar.
 * DeviceDefault theme for windows that want to have the user's selected wallpaper appear
 * behind them and without an action bar.
 */

public static final int Theme_DeviceDefault_Wallpaper_NoTitleBar = 16974141; // 0x103013d

/**
 * Default theme for dialog windows and activities (on API level 10 and lower),
 * which is used by the
 * {@link android.app.Dialog} class.  This changes the window to be
 * floating (not fill the entire screen), and puts a frame around its
 * contents.  You can set this theme on an activity if you would like to
 * make an activity that looks like a Dialog.
 */

public static final int Theme_Dialog = 16973835; // 0x103000b

/**
 * Honeycomb holographic theme (dark version).
 * <p>This is the default system theme for apps that target API level 11 - 20. Starting
 * with API level 14, the default system theme is supplied by {@link #Theme_DeviceDefault},
 * which might apply a different style on different devices. If you want to ensure that your
 * app consistently uses the Holo theme at all times, you must explicitly declare it in your
 * manifest. For example, {@code <application android:theme="@android:style/Theme.Holo">}.
 * For more information, read <a
 * href="http://android-developers.blogspot.com/2012/01/holo-everywhere.html">Holo
 * Everywhere</a>.</p>
 * <p>The widgets in the holographic theme are translucent on their background, so
 * applications must ensure that any background they use with this theme is itself
 * dark; otherwise, it will be difficult to see the widgets. This UI style also includes a
 * full action bar by default.</p>
 * <p>Styles used by the Holo theme are named using the convention Type.Holo.Etc
 * (for example, {@code Widget.Holo.Button} and {@code
 * TextAppearance.Holo.Widget.PopupMenu.Large}).
 * Specific resources used by Holo are named using the convention @type/foo_bar_baz_holo
 * with trailing _dark or _light specifiers if they are not shared between both light and
 * dark versions of the theme.
 * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
 */

@Deprecated public static final int Theme_Holo = 16973931; // 0x103006b

/**
 * Holo theme for dialog windows and activities, which is used by the
 * {@link android.app.Dialog} class.  This changes the window to be
 * floating (not fill the entire screen), and puts a frame around its
 * contents.  You can set this theme on an activity if you would like to
 * make an activity that looks like a Dialog.
 * This is the default Dialog theme for applications targeting Honeycomb
 * or newer.
 * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
 */

@Deprecated public static final int Theme_Holo_Dialog = 16973935; // 0x103006f

/**
 * Theme for a window that will be displayed either full-screen on
 * smaller screens (small, normal) or as a dialog on larger screens
 * (large, xlarge).
 * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
 */

@Deprecated public static final int Theme_Holo_DialogWhenLarge = 16973943; // 0x1030077

/**
 * Theme for a window without a title bar that will be displayed either
 * full-screen on smaller screens (small, normal) or as a dialog on larger screens
 * (large, xlarge).
 * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
 */

@Deprecated public static final int Theme_Holo_DialogWhenLarge_NoActionBar = 16973944; // 0x1030078

/**
 * Variant of Theme.Holo.Dialog that has a nice minimum width for
 * a regular dialog.
 * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
 */

@Deprecated public static final int Theme_Holo_Dialog_MinWidth = 16973936; // 0x1030070

/**
 * Variant of Theme.Holo.Dialog that does not include a title bar.
 * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
 */

@Deprecated public static final int Theme_Holo_Dialog_NoActionBar = 16973937; // 0x1030071

/**
 * Variant of Theme.Holo.Dialog.NoActionBar that has a nice minimum width for
 * a regular dialog.
 * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
 */

@Deprecated public static final int Theme_Holo_Dialog_NoActionBar_MinWidth = 16973938; // 0x1030072

/**
 * Default theme for holo style input methods, which is used by the
 * {@link android.inputmethodservice.InputMethodService} class.
 * this inherits from Theme.Panel, but sets up IME appropriate animations
 * and a few custom attributes.
 * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
 */

@Deprecated public static final int Theme_Holo_InputMethod = 16973951; // 0x103007f

/**
 * Honeycomb holographic theme (light version).  The widgets in the
 * holographic theme are translucent on their brackground, so applications
 * must ensure that any background they use with this theme is itself
 * light; otherwise, it will be difficult to see the widgets.  This
 * UI style also includes a full action bar by default.
 * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
 */

@Deprecated public static final int Theme_Holo_Light = 16973934; // 0x103006e

/**
 * Variant of the holographic (light) theme that has a solid (opaque) action bar
 * with an inverse color profile. The dark action bar sharply stands out against
 * the light content.
 * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
 */

@Deprecated public static final int Theme_Holo_Light_DarkActionBar = 16974105; // 0x1030119

/**
 * Holo light theme for dialog windows and activities, which is used by the
 * {@link android.app.Dialog} class.  This changes the window to be
 * floating (not fill the entire screen), and puts a frame around its
 * contents.  You can set this theme on an activity if you would like to
 * make an activity that looks like a Dialog.
 * This is the default Dialog theme for applications targeting Honeycomb
 * or newer.
 * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
 */

@Deprecated public static final int Theme_Holo_Light_Dialog = 16973939; // 0x1030073

/**
 * Theme for a window that will be displayed either full-screen on
 * smaller screens (small, normal) or as a dialog on larger screens
 * (large, xlarge).
 * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
 */

@Deprecated public static final int Theme_Holo_Light_DialogWhenLarge = 16973945; // 0x1030079

/**
 * Theme for a window without an action bar that will be displayed either full-screen
 * on smaller screens (small, normal) or as a dialog on larger screens
 * (large, xlarge).
 * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
 */

@Deprecated public static final int Theme_Holo_Light_DialogWhenLarge_NoActionBar = 16973946; // 0x103007a

/**
 * Variant of Theme.Holo.Light.Dialog that has a nice minimum width for
 * a regular dialog.
 * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
 */

@Deprecated public static final int Theme_Holo_Light_Dialog_MinWidth = 16973940; // 0x1030074

/**
 * Variant of Theme.Holo.Light.Dialog that does not include a title bar.
 * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
 */

@Deprecated public static final int Theme_Holo_Light_Dialog_NoActionBar = 16973941; // 0x1030075

/**
 * Variant of Theme.Holo.Light.Dialog.NoActionBar that has a nice minimum width for
 * a regular dialog.
 * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
 */

@Deprecated public static final int Theme_Holo_Light_Dialog_NoActionBar_MinWidth = 16973942; // 0x1030076

/**
 * Variant of the holographic (light) theme with no action bar.
 * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
 */

@Deprecated public static final int Theme_Holo_Light_NoActionBar = 16974064; // 0x10300f0

/**
 * Variant of the holographic (light) theme that has no title bar and fills
 * the entire screen.  This theme
 * sets {@link android.R.attr#windowFullscreen} to true.
 * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
 */

@Deprecated public static final int Theme_Holo_Light_NoActionBar_Fullscreen = 16974065; // 0x10300f1

/**
 * Variant of the holographic (light) theme that has no title bar and fills
 * the entire screen and extends into the display overscan region.  This theme
 * sets {@link android.R.attr#windowFullscreen} and {@link android.R.attr#windowOverscan}
 * to true.
 * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
 */

@Deprecated public static final int Theme_Holo_Light_NoActionBar_Overscan = 16974302; // 0x10301de

/**
 * Variant of the holographic (light) theme that has no title bar and translucent
 * system decor.  This theme sets {@link android.R.attr#windowTranslucentStatus} and
 * {@link android.R.attr#windowTranslucentNavigation} to true.
 * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
 */

@Deprecated public static final int Theme_Holo_Light_NoActionBar_TranslucentDecor = 16974306; // 0x10301e2

/**
 * Default holo light theme for panel windows.  This removes all extraneous
 * window decorations, so you basically have an empty rectangle in which
 * to place your content.  It makes the window floating, with a transparent
 * background, and turns off dimming behind the window.
 * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
 */

@Deprecated public static final int Theme_Holo_Light_Panel = 16973948; // 0x103007c

/**
 * Variant of the holographic (dark) theme with no action bar.
 * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
 */

@Deprecated public static final int Theme_Holo_NoActionBar = 16973932; // 0x103006c

/**
 * Variant of the holographic (dark) theme that has no title bar and fills
 * the entire screen.  This theme
 * sets {@link android.R.attr#windowFullscreen} to true.
 * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
 */

@Deprecated public static final int Theme_Holo_NoActionBar_Fullscreen = 16973933; // 0x103006d

/**
 * Variant of the holographic (dark) theme that has no title bar and fills
 * the entire screen and extends into the display overscan region.  This theme
 * sets {@link android.R.attr#windowFullscreen} and {@link android.R.attr#windowOverscan}
 * to true.
 * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
 */

@Deprecated public static final int Theme_Holo_NoActionBar_Overscan = 16974301; // 0x10301dd

/**
 * Variant of the holographic (dark) theme that has no title bar and translucent
 * system decor.  This theme sets {@link android.R.attr#windowTranslucentStatus} and
 * {@link android.R.attr#windowTranslucentNavigation} to true.
 * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
 */

@Deprecated public static final int Theme_Holo_NoActionBar_TranslucentDecor = 16974305; // 0x10301e1

/**
 * Default holo dark theme for panel windows.  This removes all extraneous
 * window decorations, so you basically have an empty rectangle in which
 * to place your content.  It makes the window floating, with a transparent
 * background, and turns off dimming behind the window.
 * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
 */

@Deprecated public static final int Theme_Holo_Panel = 16973947; // 0x103007b

/**
 * Default holographic (dark) for windows that want to have the user's selected
 * wallpaper appear behind them.
 * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
 */

@Deprecated public static final int Theme_Holo_Wallpaper = 16973949; // 0x103007d

/**
 * Default holographic (dark) for windows that want to have the user's selected
 * wallpaper appear behind them and without an action bar.
 * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
 */

@Deprecated public static final int Theme_Holo_Wallpaper_NoTitleBar = 16973950; // 0x103007e

/**
 * Default theme for input methods (on API level 10 and lower), which is used by the
 * {@link android.inputmethodservice.InputMethodService} class.
 * this inherits from Theme.Panel, but sets up IME appropriate animations
 * and a few custom attributes.
 */

public static final int Theme_InputMethod = 16973908; // 0x1030054

/**
 * Theme for a light background with dark text on top.  Set your activity
 * to this theme if you would like such an appearance.  As with the
 * default theme, you should try to assume little more than that the
 * background will be a light color.
 * <p>This is designed for API level 10 and lower.</p>
 */

public static final int Theme_Light = 16973836; // 0x103000c

/**
 * Variant of {@link #Theme_Light} with no title bar
 */

public static final int Theme_Light_NoTitleBar = 16973837; // 0x103000d

/**
 * Variant of {@link #Theme_Light} that has no title bar and
 * no status bar.  This theme
 * sets {@link android.R.attr#windowFullscreen} to true.
 */

public static final int Theme_Light_NoTitleBar_Fullscreen = 16973838; // 0x103000e

/**
 * Default light theme for panel windows (on API level 10 and lower).  This removes all
 * extraneous window decorations, so you basically have an empty rectangle in which
 * to place your content.  It makes the window floating, with a transparent
 * background, and turns off dimming behind the window.
 */

public static final int Theme_Light_Panel = 16973914; // 0x103005a

/**
 * Theme for a wallpaper's setting activity, which is designed to be a transparent
 * background with a light shade, so the previous Activity is visible in the background.
 */

public static final int Theme_Light_WallpaperSettings = 16973922; // 0x1030062

/**
 * Material theme (dark version).
 * <p>If you want to ensure that your
 * app consistently uses the Material theme at all times, you must explicitly declare it in your
 * manifest. For example, {@code <application android:theme="@style/Theme.Material">}.
 * <p>Styles used by the Material theme are named using the convention Type.Material.Etc
 * (for example, {@code Widget.Material.Button} and {@code
 * TextAppearance.Material.Widget.PopupMenu.Large}).
 * Specific resources used by Material are named using the convention @type/foo_bar_baz_material
 * with trailing _dark or _light specifiers if they are not shared between both light and
 * dark versions of the theme.
 */

public static final int Theme_Material = 16974372; // 0x1030224

/**
 * Material theme for dialog windows and activities, which is used by the
 * {@link android.app.Dialog} class.  This changes the window to be
 * floating (not fill the entire screen), and puts a frame around its
 * contents.  You can set this theme on an activity if you would like to
 * make an activity that looks like a Dialog.
 * Force the background and floating colours to be the default colours.
 */

public static final int Theme_Material_Dialog = 16974373; // 0x1030225

/**
 * Theme for a window that will be displayed either full-screen on
 * smaller screens (small, normal) or as a dialog on larger screens
 * (large, xlarge).
 */

public static final int Theme_Material_DialogWhenLarge = 16974379; // 0x103022b

/**
 * Theme for a window without a title bar that will be displayed either
 * full-screen on smaller screens (small, normal) or as a dialog on larger screens
 * (large, xlarge).
 */

public static final int Theme_Material_DialogWhenLarge_NoActionBar = 16974380; // 0x103022c

/**
 * Material theme for alert dialog windows, which is used by the
 * {@link android.app.AlertDialog} class.  This is basically a dialog
 * but sets the background to empty so it can do two-tone backgrounds.
 * For applications targeting Honeycomb or newer, this is the default
 * AlertDialog theme.
 */

public static final int Theme_Material_Dialog_Alert = 16974374; // 0x1030226

/**
 * Variant of Theme.Material.Dialog that has a nice minimum width for
 * a regular dialog.
 */

public static final int Theme_Material_Dialog_MinWidth = 16974375; // 0x1030227

/**
 * Variant of Theme.Material.Dialog that does not include a title bar.
 */

public static final int Theme_Material_Dialog_NoActionBar = 16974376; // 0x1030228

/**
 * Variant of Theme.Material.Dialog.NoActionBar that has a nice minimum width for
 * a regular dialog.
 */

public static final int Theme_Material_Dialog_NoActionBar_MinWidth = 16974377; // 0x1030229

/**
 * Theme for a presentation window on a secondary display.
 */

public static final int Theme_Material_Dialog_Presentation = 16974378; // 0x103022a

/**
 * Default theme for material style input methods, which is used by the
 * {@link android.inputmethodservice.InputMethodService} class.
 * this inherits from Theme.Panel, but sets up IME appropriate animations
 * and a few custom attributes.
 * Default theme for material style input methods, which is used by the
 * {@link android.inputmethodservice.InputMethodService} class.
 * this inherits from Theme.Panel, but sets up IME appropriate animations
 * and a few custom attributes.
 */

public static final int Theme_Material_InputMethod = 16974381; // 0x103022d

/**
 * Material theme (light version).
 */

public static final int Theme_Material_Light = 16974391; // 0x1030237

/**
 * Variant of the material (light) theme that has a solid (opaque) action bar
 * with an inverse color profile. The dark action bar sharply stands out against
 * the light content.
 */

public static final int Theme_Material_Light_DarkActionBar = 16974392; // 0x1030238

/**
 * Material light theme for dialog windows and activities, which is used by the
 * {@link android.app.Dialog} class.  This changes the window to be
 * floating (not fill the entire screen), and puts a frame around its
 * contents.  You can set this theme on an activity if you would like to
 * make an activity that looks like a Dialog.
 * Force the background and floating colours to be the default colours.
 */

public static final int Theme_Material_Light_Dialog = 16974393; // 0x1030239

/**
 * Theme for a window that will be displayed either full-screen on
 * smaller screens (small, normal) or as a dialog on larger screens
 * (large, xlarge).
 */

public static final int Theme_Material_Light_DialogWhenLarge = 16974399; // 0x103023f

/**
 * Theme for a window with a dark title bar that will be displayed either
 * full-screen on smaller screens (small, normal) or as a dialog on larger screens
 * (large, xlarge).
 */

public static final int Theme_Material_Light_DialogWhenLarge_DarkActionBar = 16974552; // 0x10302d8

/**
 * Theme for a window without an action bar that will be displayed either full-screen
 * on smaller screens (small, normal) or as a dialog on larger screens
 * (large, xlarge).
 */

public static final int Theme_Material_Light_DialogWhenLarge_NoActionBar = 16974400; // 0x1030240

/**
 * Material light theme for alert dialog windows, which is used by the
 * {@link android.app.AlertDialog} class.  This is basically a dialog
 * but sets the background to empty so it can do two-tone backgrounds.
 * For applications targeting Honeycomb or newer, this is the default
 * AlertDialog theme.
 */

public static final int Theme_Material_Light_Dialog_Alert = 16974394; // 0x103023a

/**
 * Variant of Theme.Material.Light.Dialog that has a nice minimum width for
 * a regular dialog.
 */

public static final int Theme_Material_Light_Dialog_MinWidth = 16974395; // 0x103023b

/**
 * Variant of Theme.Material.Light.Dialog that does not include a title bar.
 */

public static final int Theme_Material_Light_Dialog_NoActionBar = 16974396; // 0x103023c

/**
 * Variant of Theme.Material.Light.Dialog.NoActionBar that has a nice minimum width for
 * a regular dialog.
 */

public static final int Theme_Material_Light_Dialog_NoActionBar_MinWidth = 16974397; // 0x103023d

/**
 * Theme for a presentation window on a secondary display.
 */

public static final int Theme_Material_Light_Dialog_Presentation = 16974398; // 0x103023e

/**
 * Variant of the material (light) theme that has a light status bar background with dark
 * status bar contents.
 */

public static final int Theme_Material_Light_LightStatusBar = 16974549; // 0x10302d5

/**
 * Variant of the material (light) theme with no action bar.
 */

public static final int Theme_Material_Light_NoActionBar = 16974401; // 0x1030241

/**
 * Variant of the material (light) theme that has no title bar and fills
 * the entire screen.  This theme
 * sets {@link android.R.attr#windowFullscreen} to true.
 */

public static final int Theme_Material_Light_NoActionBar_Fullscreen = 16974402; // 0x1030242

/**
 * Variant of the material (light) theme that has no title bar and fills
 * the entire screen and extends into the display overscan region.  This theme
 * sets {@link android.R.attr#windowFullscreen} and {@link android.R.attr#windowOverscan}
 * to true.
 */

public static final int Theme_Material_Light_NoActionBar_Overscan = 16974403; // 0x1030243

/**
 * Variant of the material (light) theme that has no title bar and translucent
 * system decor.  This theme sets {@link android.R.attr#windowTranslucentStatus} and
 * {@link android.R.attr#windowTranslucentNavigation} to true.
 */

public static final int Theme_Material_Light_NoActionBar_TranslucentDecor = 16974404; // 0x1030244

/**
 * Default material light theme for panel windows.  This removes all extraneous
 * window decorations, so you basically have an empty rectangle in which
 * to place your content.  It makes the window floating, with a transparent
 * background, and turns off dimming behind the window.
 */

public static final int Theme_Material_Light_Panel = 16974405; // 0x1030245

/**
 * Material light theme for an activity that is to be used for voice interaction.
 * This gives the activity a floating dialog style, to incorporate with the
 * system voice experience.
 */

public static final int Theme_Material_Light_Voice = 16974406; // 0x1030246

/**
 * Variant of the material (dark) theme with no action bar.
 */

public static final int Theme_Material_NoActionBar = 16974382; // 0x103022e

/**
 * Variant of the material (dark) theme that has no title bar and fills
 * the entire screen.  This theme
 * sets {@link android.R.attr#windowFullscreen} to true.
 */

public static final int Theme_Material_NoActionBar_Fullscreen = 16974383; // 0x103022f

/**
 * Variant of the material (dark) theme that has no title bar and fills
 * the entire screen and extends into the display overscan region.  This theme
 * sets {@link android.R.attr#windowFullscreen} and {@link android.R.attr#windowOverscan}
 * to true.
 */

public static final int Theme_Material_NoActionBar_Overscan = 16974384; // 0x1030230

/**
 * Variant of the material (dark) theme that has no title bar and translucent
 * system decor.  This theme sets {@link android.R.attr#windowTranslucentStatus} and
 * {@link android.R.attr#windowTranslucentNavigation} to true.
 */

public static final int Theme_Material_NoActionBar_TranslucentDecor = 16974385; // 0x1030231

/**
 * Default material dark theme for panel windows.  This removes all extraneous
 * window decorations, so you basically have an empty rectangle in which
 * to place your content.  It makes the window floating, with a transparent
 * background, and turns off dimming behind the window.
 */

public static final int Theme_Material_Panel = 16974386; // 0x1030232

/**
 * Default theme for Settings and activities launched from Settings.
 * Force all settings themes to use normal Material theme.
 */

public static final int Theme_Material_Settings = 16974387; // 0x1030233

/**
 * Material theme for an activity that is to be used for voice interaction.
 * This gives the activity a floating dialog style, to incorporate with the
 * system voice experience.
 */

public static final int Theme_Material_Voice = 16974388; // 0x1030234

/**
 * Default material (dark) for windows that want to have the user's selected
 * wallpaper appear behind them.
 */

public static final int Theme_Material_Wallpaper = 16974389; // 0x1030235

/**
 * Default material (dark) for windows that want to have the user's selected
 * wallpaper appear behind them and without an action bar.
 */

public static final int Theme_Material_Wallpaper_NoTitleBar = 16974390; // 0x1030236

/**
 * Default theme for activities that don't actually display a UI; that
 * is, they finish themselves before being resumed.
 */

public static final int Theme_NoDisplay = 16973909; // 0x1030055

/**
 * Variant of {@link #Theme} with no title bar
 */

public static final int Theme_NoTitleBar = 16973830; // 0x1030006

/**
 * Variant of {@link #Theme} that has no title bar and no status bar.  This theme
 * sets {@link android.R.attr#windowFullscreen} to true.
 */

public static final int Theme_NoTitleBar_Fullscreen = 16973831; // 0x1030007

/**
 * No title bar, but Action Mode bars will overlay application content
 * instead of pushing it down to make room.
 */

public static final int Theme_NoTitleBar_OverlayActionModes = 16973930; // 0x103006a

/**
 * Default dark theme for panel windows (on API level 10 and lower).  This removes all
 * extraneous window decorations, so you basically have an empty rectangle in which
 * to place your content.  It makes the window floating, with a transparent
 * background, and turns off dimming behind the window.
 */

public static final int Theme_Panel = 16973913; // 0x1030059

/**
 * Theme for translucent activities (on API level 10 and lower). That is, windows
 * that allow you to see through them to the windows behind.  This sets up the translucent
 * flag and appropriate animations for your windows.
 */

public static final int Theme_Translucent = 16973839; // 0x103000f

/**
 * Variant of {@link #Theme_Translucent} with no title bar
 */

public static final int Theme_Translucent_NoTitleBar = 16973840; // 0x1030010

/**
 * Variant of {@link #Theme_Translucent} that has no title bar and
 * no status bar
 */

public static final int Theme_Translucent_NoTitleBar_Fullscreen = 16973841; // 0x1030011

/**
 * Theme for windows that want to have the user's selected
 * wallpaper appear behind them (for API level 10 and lower).
 */

public static final int Theme_Wallpaper = 16973918; // 0x103005e

/**
 * Theme for a wallpaper's setting activity, which is designed to be a transparent
 * background with a dark shade, so the previous Activity is visible in the background.
 */

public static final int Theme_WallpaperSettings = 16973921; // 0x1030061

/**
 * Variant of {@link #Theme_Wallpaper} that has no title bar
 */

public static final int Theme_Wallpaper_NoTitleBar = 16973919; // 0x103005f

/**
 * Variant of {@link #Theme_Wallpaper} that
 * has no title bar or status bar.
 */

public static final int Theme_Wallpaper_NoTitleBar_Fullscreen = 16973920; // 0x1030060

/**
 * Default theme with an Action Bar.
 */

public static final int Theme_WithActionBar = 16973929; // 0x1030069

/**
 * Widget Styles
 */

public static final int Widget = 16973842; // 0x1030012

public static final int Widget_AbsListView = 16973843; // 0x1030013

public static final int Widget_ActionBar = 16973954; // 0x1030082

public static final int Widget_ActionBar_TabBar = 16974068; // 0x10300f4

public static final int Widget_ActionBar_TabText = 16974067; // 0x10300f3

public static final int Widget_ActionBar_TabView = 16974066; // 0x10300f2

public static final int Widget_ActionButton = 16973956; // 0x1030084

public static final int Widget_ActionButton_CloseMode = 16973960; // 0x1030088

public static final int Widget_ActionButton_Overflow = 16973959; // 0x1030087

public static final int Widget_AutoCompleteTextView = 16973863; // 0x1030027

public static final int Widget_Button = 16973844; // 0x1030014

public static final int Widget_Button_Inset = 16973845; // 0x1030015

public static final int Widget_Button_Small = 16973846; // 0x1030016

public static final int Widget_Button_Toggle = 16973847; // 0x1030017

public static final int Widget_CalendarView = 16974059; // 0x10300eb

public static final int Widget_CompoundButton = 16973848; // 0x1030018

public static final int Widget_CompoundButton_CheckBox = 16973849; // 0x1030019

public static final int Widget_CompoundButton_RadioButton = 16973850; // 0x103001a

public static final int Widget_CompoundButton_Star = 16973851; // 0x103001b

public static final int Widget_DatePicker = 16974062; // 0x10300ee

/**
 * Widget Styles
 */

public static final int Widget_DeviceDefault = 16974144; // 0x1030140

public static final int Widget_DeviceDefault_ActionBar = 16974187; // 0x103016b

public static final int Widget_DeviceDefault_ActionBar_Solid = 16974195; // 0x1030173

public static final int Widget_DeviceDefault_ActionBar_TabBar = 16974194; // 0x1030172

public static final int Widget_DeviceDefault_ActionBar_TabText = 16974193; // 0x1030171

public static final int Widget_DeviceDefault_ActionBar_TabView = 16974192; // 0x1030170

public static final int Widget_DeviceDefault_ActionButton = 16974182; // 0x1030166

public static final int Widget_DeviceDefault_ActionButton_CloseMode = 16974186; // 0x103016a

public static final int Widget_DeviceDefault_ActionButton_Overflow = 16974183; // 0x1030167

public static final int Widget_DeviceDefault_ActionButton_TextButton = 16974184; // 0x1030168

public static final int Widget_DeviceDefault_ActionMode = 16974185; // 0x1030169

public static final int Widget_DeviceDefault_AutoCompleteTextView = 16974151; // 0x1030147

public static final int Widget_DeviceDefault_Button = 16974145; // 0x1030141

public static final int Widget_DeviceDefault_Button_Borderless = 16974188; // 0x103016c

/**
 * Colored borderless ink button
 */

public static final int Widget_DeviceDefault_Button_Borderless_Colored = 16974561; // 0x10302e1

public static final int Widget_DeviceDefault_Button_Borderless_Small = 16974149; // 0x1030145

public static final int Widget_DeviceDefault_Button_Colored = 16974560; // 0x10302e0

public static final int Widget_DeviceDefault_Button_Inset = 16974147; // 0x1030143

public static final int Widget_DeviceDefault_Button_Small = 16974146; // 0x1030142

public static final int Widget_DeviceDefault_Button_Toggle = 16974148; // 0x1030144

public static final int Widget_DeviceDefault_CalendarView = 16974190; // 0x103016e

public static final int Widget_DeviceDefault_CheckedTextView = 16974299; // 0x10301db

public static final int Widget_DeviceDefault_CompoundButton_CheckBox = 16974152; // 0x1030148

public static final int Widget_DeviceDefault_CompoundButton_RadioButton = 16974169; // 0x1030159

public static final int Widget_DeviceDefault_CompoundButton_Star = 16974173; // 0x103015d

public static final int Widget_DeviceDefault_DatePicker = 16974191; // 0x103016f

public static final int Widget_DeviceDefault_DropDownItem = 16974177; // 0x1030161

public static final int Widget_DeviceDefault_DropDownItem_Spinner = 16974178; // 0x1030162

public static final int Widget_DeviceDefault_EditText = 16974154; // 0x103014a

public static final int Widget_DeviceDefault_ExpandableListView = 16974155; // 0x103014b

public static final int Widget_DeviceDefault_FastScroll = 16974313; // 0x10301e9

public static final int Widget_DeviceDefault_GridView = 16974156; // 0x103014c

public static final int Widget_DeviceDefault_HorizontalScrollView = 16974171; // 0x103015b

public static final int Widget_DeviceDefault_ImageButton = 16974157; // 0x103014d

public static final int Widget_DeviceDefault_Light = 16974196; // 0x1030174

public static final int Widget_DeviceDefault_Light_ActionBar = 16974243; // 0x10301a3

public static final int Widget_DeviceDefault_Light_ActionBar_Solid = 16974247; // 0x10301a7

/**
 * @deprecated Action bars are now themed using the inheritable android:theme attribute.
 */

@Deprecated public static final int Widget_DeviceDefault_Light_ActionBar_Solid_Inverse = 16974248; // 0x10301a8

public static final int Widget_DeviceDefault_Light_ActionBar_TabBar = 16974246; // 0x10301a6

/**
 * @deprecated Action bars are now themed using the inheritable android:theme attribute.
 */

@Deprecated public static final int Widget_DeviceDefault_Light_ActionBar_TabBar_Inverse = 16974249; // 0x10301a9

public static final int Widget_DeviceDefault_Light_ActionBar_TabText = 16974245; // 0x10301a5

/**
 * @deprecated Action bars are now themed using the inheritable android:theme attribute.
 */

@Deprecated public static final int Widget_DeviceDefault_Light_ActionBar_TabText_Inverse = 16974251; // 0x10301ab

public static final int Widget_DeviceDefault_Light_ActionBar_TabView = 16974244; // 0x10301a4

/**
 * @deprecated Action bars are now themed using the inheritable android:theme attribute.
 */

@Deprecated public static final int Widget_DeviceDefault_Light_ActionBar_TabView_Inverse = 16974250; // 0x10301aa

public static final int Widget_DeviceDefault_Light_ActionButton = 16974239; // 0x103019f

public static final int Widget_DeviceDefault_Light_ActionButton_CloseMode = 16974242; // 0x10301a2

public static final int Widget_DeviceDefault_Light_ActionButton_Overflow = 16974240; // 0x10301a0

public static final int Widget_DeviceDefault_Light_ActionMode = 16974241; // 0x10301a1

/**
 * @deprecated Action bars are now themed using the inheritable android:theme attribute.
 */

@Deprecated public static final int Widget_DeviceDefault_Light_ActionMode_Inverse = 16974252; // 0x10301ac

public static final int Widget_DeviceDefault_Light_AutoCompleteTextView = 16974203; // 0x103017b

public static final int Widget_DeviceDefault_Light_Button = 16974197; // 0x1030175

public static final int Widget_DeviceDefault_Light_Button_Borderless_Small = 16974201; // 0x1030179

public static final int Widget_DeviceDefault_Light_Button_Inset = 16974199; // 0x1030177

public static final int Widget_DeviceDefault_Light_Button_Small = 16974198; // 0x1030176

public static final int Widget_DeviceDefault_Light_Button_Toggle = 16974200; // 0x1030178

public static final int Widget_DeviceDefault_Light_CalendarView = 16974238; // 0x103019e

public static final int Widget_DeviceDefault_Light_CheckedTextView = 16974300; // 0x10301dc

public static final int Widget_DeviceDefault_Light_CompoundButton_CheckBox = 16974204; // 0x103017c

public static final int Widget_DeviceDefault_Light_CompoundButton_RadioButton = 16974224; // 0x1030190

public static final int Widget_DeviceDefault_Light_CompoundButton_Star = 16974228; // 0x1030194

public static final int Widget_DeviceDefault_Light_DropDownItem = 16974232; // 0x1030198

public static final int Widget_DeviceDefault_Light_DropDownItem_Spinner = 16974233; // 0x1030199

public static final int Widget_DeviceDefault_Light_EditText = 16974206; // 0x103017e

public static final int Widget_DeviceDefault_Light_ExpandableListView = 16974207; // 0x103017f

public static final int Widget_DeviceDefault_Light_FastScroll = 16974315; // 0x10301eb

public static final int Widget_DeviceDefault_Light_GridView = 16974208; // 0x1030180

public static final int Widget_DeviceDefault_Light_HorizontalScrollView = 16974226; // 0x1030192

public static final int Widget_DeviceDefault_Light_ImageButton = 16974209; // 0x1030181

public static final int Widget_DeviceDefault_Light_ListPopupWindow = 16974235; // 0x103019b

public static final int Widget_DeviceDefault_Light_ListView = 16974210; // 0x1030182

public static final int Widget_DeviceDefault_Light_ListView_DropDown = 16974205; // 0x103017d

public static final int Widget_DeviceDefault_Light_MediaRouteButton = 16974296; // 0x10301d8

public static final int Widget_DeviceDefault_Light_PopupMenu = 16974236; // 0x103019c

public static final int Widget_DeviceDefault_Light_PopupWindow = 16974211; // 0x1030183

public static final int Widget_DeviceDefault_Light_ProgressBar = 16974212; // 0x1030184

public static final int Widget_DeviceDefault_Light_ProgressBar_Horizontal = 16974213; // 0x1030185

public static final int Widget_DeviceDefault_Light_ProgressBar_Inverse = 16974217; // 0x1030189

public static final int Widget_DeviceDefault_Light_ProgressBar_Large = 16974216; // 0x1030188

public static final int Widget_DeviceDefault_Light_ProgressBar_Large_Inverse = 16974219; // 0x103018b

public static final int Widget_DeviceDefault_Light_ProgressBar_Small = 16974214; // 0x1030186

public static final int Widget_DeviceDefault_Light_ProgressBar_Small_Inverse = 16974218; // 0x103018a

public static final int Widget_DeviceDefault_Light_ProgressBar_Small_Title = 16974215; // 0x1030187

public static final int Widget_DeviceDefault_Light_RatingBar = 16974221; // 0x103018d

public static final int Widget_DeviceDefault_Light_RatingBar_Indicator = 16974222; // 0x103018e

public static final int Widget_DeviceDefault_Light_RatingBar_Small = 16974223; // 0x103018f

public static final int Widget_DeviceDefault_Light_ScrollView = 16974225; // 0x1030191

public static final int Widget_DeviceDefault_Light_SeekBar = 16974220; // 0x103018c

public static final int Widget_DeviceDefault_Light_Spinner = 16974227; // 0x1030193

public static final int Widget_DeviceDefault_Light_StackView = 16974316; // 0x10301ec

public static final int Widget_DeviceDefault_Light_Tab = 16974237; // 0x103019d

public static final int Widget_DeviceDefault_Light_TabWidget = 16974229; // 0x1030195

public static final int Widget_DeviceDefault_Light_TextView = 16974202; // 0x103017a

public static final int Widget_DeviceDefault_Light_TextView_SpinnerItem = 16974234; // 0x103019a

public static final int Widget_DeviceDefault_Light_WebTextView = 16974230; // 0x1030196

public static final int Widget_DeviceDefault_Light_WebView = 16974231; // 0x1030197

public static final int Widget_DeviceDefault_ListPopupWindow = 16974180; // 0x1030164

public static final int Widget_DeviceDefault_ListView = 16974158; // 0x103014e

public static final int Widget_DeviceDefault_ListView_DropDown = 16974153; // 0x1030149

public static final int Widget_DeviceDefault_MediaRouteButton = 16974295; // 0x10301d7

public static final int Widget_DeviceDefault_PopupMenu = 16974181; // 0x1030165

public static final int Widget_DeviceDefault_PopupWindow = 16974159; // 0x103014f

public static final int Widget_DeviceDefault_ProgressBar = 16974160; // 0x1030150

public static final int Widget_DeviceDefault_ProgressBar_Horizontal = 16974161; // 0x1030151

public static final int Widget_DeviceDefault_ProgressBar_Large = 16974164; // 0x1030154

public static final int Widget_DeviceDefault_ProgressBar_Small = 16974162; // 0x1030152

public static final int Widget_DeviceDefault_ProgressBar_Small_Title = 16974163; // 0x1030153

public static final int Widget_DeviceDefault_RatingBar = 16974166; // 0x1030156

public static final int Widget_DeviceDefault_RatingBar_Indicator = 16974167; // 0x1030157

public static final int Widget_DeviceDefault_RatingBar_Small = 16974168; // 0x1030158

public static final int Widget_DeviceDefault_ScrollView = 16974170; // 0x103015a

public static final int Widget_DeviceDefault_SeekBar = 16974165; // 0x1030155

public static final int Widget_DeviceDefault_Spinner = 16974172; // 0x103015c

public static final int Widget_DeviceDefault_StackView = 16974314; // 0x10301ea

public static final int Widget_DeviceDefault_Tab = 16974189; // 0x103016d

public static final int Widget_DeviceDefault_TabWidget = 16974174; // 0x103015e

public static final int Widget_DeviceDefault_TextView = 16974150; // 0x1030146

public static final int Widget_DeviceDefault_TextView_SpinnerItem = 16974179; // 0x1030163

public static final int Widget_DeviceDefault_WebTextView = 16974175; // 0x103015f

public static final int Widget_DeviceDefault_WebView = 16974176; // 0x1030160

public static final int Widget_DropDownItem = 16973867; // 0x103002b

public static final int Widget_DropDownItem_Spinner = 16973868; // 0x103002c

public static final int Widget_EditText = 16973859; // 0x1030023

public static final int Widget_ExpandableListView = 16973860; // 0x1030024

public static final int Widget_FastScroll = 16974309; // 0x10301e5

public static final int Widget_FragmentBreadCrumbs = 16973961; // 0x1030089

public static final int Widget_Gallery = 16973877; // 0x1030035

public static final int Widget_GridView = 16973874; // 0x1030032

/**
 * Widget Styles
 */

public static final int Widget_Holo = 16973962; // 0x103008a

public static final int Widget_Holo_ActionBar = 16974004; // 0x10300b4

public static final int Widget_Holo_ActionBar_Solid = 16974113; // 0x1030121

public static final int Widget_Holo_ActionBar_TabBar = 16974071; // 0x10300f7

public static final int Widget_Holo_ActionBar_TabText = 16974070; // 0x10300f6

public static final int Widget_Holo_ActionBar_TabView = 16974069; // 0x10300f5

public static final int Widget_Holo_ActionButton = 16973999; // 0x10300af

public static final int Widget_Holo_ActionButton_CloseMode = 16974003; // 0x10300b3

public static final int Widget_Holo_ActionButton_Overflow = 16974000; // 0x10300b0

public static final int Widget_Holo_ActionButton_TextButton = 16974001; // 0x10300b1

public static final int Widget_Holo_ActionMode = 16974002; // 0x10300b2

public static final int Widget_Holo_AutoCompleteTextView = 16973968; // 0x1030090

public static final int Widget_Holo_Button = 16973963; // 0x103008b

public static final int Widget_Holo_Button_Borderless = 16974050; // 0x10300e2

public static final int Widget_Holo_Button_Borderless_Small = 16974106; // 0x103011a

public static final int Widget_Holo_Button_Inset = 16973965; // 0x103008d

public static final int Widget_Holo_Button_Small = 16973964; // 0x103008c

public static final int Widget_Holo_Button_Toggle = 16973966; // 0x103008e

public static final int Widget_Holo_CalendarView = 16974060; // 0x10300ec

public static final int Widget_Holo_CheckedTextView = 16974297; // 0x10301d9

public static final int Widget_Holo_CompoundButton_CheckBox = 16973969; // 0x1030091

public static final int Widget_Holo_CompoundButton_RadioButton = 16973986; // 0x10300a2

public static final int Widget_Holo_CompoundButton_Star = 16973990; // 0x10300a6

public static final int Widget_Holo_DatePicker = 16974063; // 0x10300ef

public static final int Widget_Holo_DropDownItem = 16973994; // 0x10300aa

public static final int Widget_Holo_DropDownItem_Spinner = 16973995; // 0x10300ab

public static final int Widget_Holo_EditText = 16973971; // 0x1030093

public static final int Widget_Holo_ExpandableListView = 16973972; // 0x1030094

public static final int Widget_Holo_GridView = 16973973; // 0x1030095

public static final int Widget_Holo_HorizontalScrollView = 16973988; // 0x10300a4

public static final int Widget_Holo_ImageButton = 16973974; // 0x1030096

/**
 * Light widget styles
 */

public static final int Widget_Holo_Light = 16974005; // 0x10300b5

public static final int Widget_Holo_Light_ActionBar = 16974049; // 0x10300e1

public static final int Widget_Holo_Light_ActionBar_Solid = 16974114; // 0x1030122

public static final int Widget_Holo_Light_ActionBar_Solid_Inverse = 16974115; // 0x1030123

public static final int Widget_Holo_Light_ActionBar_TabBar = 16974074; // 0x10300fa

public static final int Widget_Holo_Light_ActionBar_TabBar_Inverse = 16974116; // 0x1030124

public static final int Widget_Holo_Light_ActionBar_TabText = 16974073; // 0x10300f9

public static final int Widget_Holo_Light_ActionBar_TabText_Inverse = 16974118; // 0x1030126

public static final int Widget_Holo_Light_ActionBar_TabView = 16974072; // 0x10300f8

public static final int Widget_Holo_Light_ActionBar_TabView_Inverse = 16974117; // 0x1030125

public static final int Widget_Holo_Light_ActionButton = 16974045; // 0x10300dd

public static final int Widget_Holo_Light_ActionButton_CloseMode = 16974048; // 0x10300e0

public static final int Widget_Holo_Light_ActionButton_Overflow = 16974046; // 0x10300de

public static final int Widget_Holo_Light_ActionMode = 16974047; // 0x10300df

public static final int Widget_Holo_Light_ActionMode_Inverse = 16974119; // 0x1030127

public static final int Widget_Holo_Light_AutoCompleteTextView = 16974011; // 0x10300bb

public static final int Widget_Holo_Light_Button = 16974006; // 0x10300b6

public static final int Widget_Holo_Light_Button_Borderless_Small = 16974107; // 0x103011b

public static final int Widget_Holo_Light_Button_Inset = 16974008; // 0x10300b8

public static final int Widget_Holo_Light_Button_Small = 16974007; // 0x10300b7

public static final int Widget_Holo_Light_Button_Toggle = 16974009; // 0x10300b9

public static final int Widget_Holo_Light_CalendarView = 16974061; // 0x10300ed

public static final int Widget_Holo_Light_CheckedTextView = 16974298; // 0x10301da

public static final int Widget_Holo_Light_CompoundButton_CheckBox = 16974012; // 0x10300bc

public static final int Widget_Holo_Light_CompoundButton_RadioButton = 16974032; // 0x10300d0

public static final int Widget_Holo_Light_CompoundButton_Star = 16974036; // 0x10300d4

public static final int Widget_Holo_Light_DropDownItem = 16974040; // 0x10300d8

public static final int Widget_Holo_Light_DropDownItem_Spinner = 16974041; // 0x10300d9

public static final int Widget_Holo_Light_EditText = 16974014; // 0x10300be

public static final int Widget_Holo_Light_ExpandableListView = 16974015; // 0x10300bf

public static final int Widget_Holo_Light_GridView = 16974016; // 0x10300c0

public static final int Widget_Holo_Light_HorizontalScrollView = 16974034; // 0x10300d2

public static final int Widget_Holo_Light_ImageButton = 16974017; // 0x10300c1

public static final int Widget_Holo_Light_ListPopupWindow = 16974043; // 0x10300db

public static final int Widget_Holo_Light_ListView = 16974018; // 0x10300c2

public static final int Widget_Holo_Light_ListView_DropDown = 16974013; // 0x10300bd

public static final int Widget_Holo_Light_MediaRouteButton = 16974294; // 0x10301d6

public static final int Widget_Holo_Light_PopupMenu = 16974044; // 0x10300dc

public static final int Widget_Holo_Light_PopupWindow = 16974019; // 0x10300c3

public static final int Widget_Holo_Light_ProgressBar = 16974020; // 0x10300c4

public static final int Widget_Holo_Light_ProgressBar_Horizontal = 16974021; // 0x10300c5

public static final int Widget_Holo_Light_ProgressBar_Inverse = 16974025; // 0x10300c9

public static final int Widget_Holo_Light_ProgressBar_Large = 16974024; // 0x10300c8

public static final int Widget_Holo_Light_ProgressBar_Large_Inverse = 16974027; // 0x10300cb

public static final int Widget_Holo_Light_ProgressBar_Small = 16974022; // 0x10300c6

public static final int Widget_Holo_Light_ProgressBar_Small_Inverse = 16974026; // 0x10300ca

public static final int Widget_Holo_Light_ProgressBar_Small_Title = 16974023; // 0x10300c7

public static final int Widget_Holo_Light_RatingBar = 16974029; // 0x10300cd

public static final int Widget_Holo_Light_RatingBar_Indicator = 16974030; // 0x10300ce

public static final int Widget_Holo_Light_RatingBar_Small = 16974031; // 0x10300cf

public static final int Widget_Holo_Light_ScrollView = 16974033; // 0x10300d1

public static final int Widget_Holo_Light_SeekBar = 16974028; // 0x10300cc

public static final int Widget_Holo_Light_Spinner = 16974035; // 0x10300d3

public static final int Widget_Holo_Light_Tab = 16974052; // 0x10300e4

public static final int Widget_Holo_Light_TabWidget = 16974037; // 0x10300d5

public static final int Widget_Holo_Light_TextView = 16974010; // 0x10300ba

public static final int Widget_Holo_Light_TextView_SpinnerItem = 16974042; // 0x10300da

public static final int Widget_Holo_Light_WebTextView = 16974038; // 0x10300d6

public static final int Widget_Holo_Light_WebView = 16974039; // 0x10300d7

public static final int Widget_Holo_ListPopupWindow = 16973997; // 0x10300ad

public static final int Widget_Holo_ListView = 16973975; // 0x1030097

public static final int Widget_Holo_ListView_DropDown = 16973970; // 0x1030092

public static final int Widget_Holo_MediaRouteButton = 16974293; // 0x10301d5

public static final int Widget_Holo_PopupMenu = 16973998; // 0x10300ae

public static final int Widget_Holo_PopupWindow = 16973976; // 0x1030098

public static final int Widget_Holo_ProgressBar = 16973977; // 0x1030099

public static final int Widget_Holo_ProgressBar_Horizontal = 16973978; // 0x103009a

public static final int Widget_Holo_ProgressBar_Large = 16973981; // 0x103009d

public static final int Widget_Holo_ProgressBar_Small = 16973979; // 0x103009b

public static final int Widget_Holo_ProgressBar_Small_Title = 16973980; // 0x103009c

public static final int Widget_Holo_RatingBar = 16973983; // 0x103009f

public static final int Widget_Holo_RatingBar_Indicator = 16973984; // 0x10300a0

public static final int Widget_Holo_RatingBar_Small = 16973985; // 0x10300a1

public static final int Widget_Holo_ScrollView = 16973987; // 0x10300a3

public static final int Widget_Holo_SeekBar = 16973982; // 0x103009e

public static final int Widget_Holo_Spinner = 16973989; // 0x10300a5

public static final int Widget_Holo_Tab = 16974051; // 0x10300e3

public static final int Widget_Holo_TabWidget = 16973991; // 0x10300a7

public static final int Widget_Holo_TextView = 16973967; // 0x103008f

public static final int Widget_Holo_TextView_SpinnerItem = 16973996; // 0x10300ac

public static final int Widget_Holo_WebTextView = 16973992; // 0x10300a8

public static final int Widget_Holo_WebView = 16973993; // 0x10300a9

public static final int Widget_ImageButton = 16973862; // 0x1030026

public static final int Widget_ImageWell = 16973861; // 0x1030025

public static final int Widget_KeyboardView = 16973911; // 0x1030057

public static final int Widget_ListPopupWindow = 16973957; // 0x1030085

public static final int Widget_ListView = 16973870; // 0x103002e

public static final int Widget_ListView_DropDown = 16973872; // 0x1030030

public static final int Widget_ListView_Menu = 16973873; // 0x1030031

public static final int Widget_ListView_White = 16973871; // 0x103002f

public static final int Widget_Material = 16974413; // 0x103024d

public static final int Widget_Material_ActionBar = 16974414; // 0x103024e

public static final int Widget_Material_ActionBar_Solid = 16974415; // 0x103024f

public static final int Widget_Material_ActionBar_TabBar = 16974416; // 0x1030250

public static final int Widget_Material_ActionBar_TabText = 16974417; // 0x1030251

public static final int Widget_Material_ActionBar_TabView = 16974418; // 0x1030252

public static final int Widget_Material_ActionButton = 16974419; // 0x1030253

public static final int Widget_Material_ActionButton_CloseMode = 16974420; // 0x1030254

public static final int Widget_Material_ActionButton_Overflow = 16974421; // 0x1030255

public static final int Widget_Material_ActionMode = 16974422; // 0x1030256

public static final int Widget_Material_AutoCompleteTextView = 16974423; // 0x1030257

/**
 * Bordered ink button
 */

public static final int Widget_Material_Button = 16974424; // 0x1030258

public static final int Widget_Material_ButtonBar = 16974431; // 0x103025f

public static final int Widget_Material_ButtonBar_AlertDialog = 16974432; // 0x1030260

/**
 * Borderless ink button
 */

public static final int Widget_Material_Button_Borderless = 16974425; // 0x1030259

/**
 * Colored borderless ink button
 */

public static final int Widget_Material_Button_Borderless_Colored = 16974426; // 0x103025a

/**
 * Small borderless ink button
 */

public static final int Widget_Material_Button_Borderless_Small = 16974427; // 0x103025b

/**
 * Colored bordered ink button
 */

public static final int Widget_Material_Button_Colored = 16974547; // 0x10302d3

public static final int Widget_Material_Button_Inset = 16974428; // 0x103025c

/**
 * Small bordered ink button
 */

public static final int Widget_Material_Button_Small = 16974429; // 0x103025d

public static final int Widget_Material_Button_Toggle = 16974430; // 0x103025e

public static final int Widget_Material_CalendarView = 16974433; // 0x1030261

public static final int Widget_Material_CheckedTextView = 16974434; // 0x1030262

public static final int Widget_Material_CompoundButton_CheckBox = 16974435; // 0x1030263

public static final int Widget_Material_CompoundButton_RadioButton = 16974436; // 0x1030264

public static final int Widget_Material_CompoundButton_Star = 16974437; // 0x1030265

public static final int Widget_Material_CompoundButton_Switch = 16974554; // 0x10302da

public static final int Widget_Material_DatePicker = 16974438; // 0x1030266

public static final int Widget_Material_DropDownItem = 16974439; // 0x1030267

public static final int Widget_Material_DropDownItem_Spinner = 16974440; // 0x1030268

public static final int Widget_Material_EditText = 16974441; // 0x1030269

public static final int Widget_Material_ExpandableListView = 16974442; // 0x103026a

public static final int Widget_Material_FastScroll = 16974443; // 0x103026b

public static final int Widget_Material_GridView = 16974444; // 0x103026c

public static final int Widget_Material_HorizontalScrollView = 16974445; // 0x103026d

public static final int Widget_Material_ImageButton = 16974446; // 0x103026e

/**
 * Light widget styles
 */

public static final int Widget_Material_Light = 16974478; // 0x103028e

public static final int Widget_Material_Light_ActionBar = 16974479; // 0x103028f

public static final int Widget_Material_Light_ActionBar_Solid = 16974480; // 0x1030290

public static final int Widget_Material_Light_ActionBar_TabBar = 16974481; // 0x1030291

public static final int Widget_Material_Light_ActionBar_TabText = 16974482; // 0x1030292

public static final int Widget_Material_Light_ActionBar_TabView = 16974483; // 0x1030293

public static final int Widget_Material_Light_ActionButton = 16974484; // 0x1030294

public static final int Widget_Material_Light_ActionButton_CloseMode = 16974485; // 0x1030295

public static final int Widget_Material_Light_ActionButton_Overflow = 16974486; // 0x1030296

public static final int Widget_Material_Light_ActionMode = 16974487; // 0x1030297

public static final int Widget_Material_Light_AutoCompleteTextView = 16974488; // 0x1030298

public static final int Widget_Material_Light_Button = 16974489; // 0x1030299

public static final int Widget_Material_Light_ButtonBar = 16974496; // 0x10302a0

public static final int Widget_Material_Light_ButtonBar_AlertDialog = 16974497; // 0x10302a1

public static final int Widget_Material_Light_Button_Borderless = 16974490; // 0x103029a

public static final int Widget_Material_Light_Button_Borderless_Colored = 16974491; // 0x103029b

public static final int Widget_Material_Light_Button_Borderless_Small = 16974492; // 0x103029c

public static final int Widget_Material_Light_Button_Inset = 16974493; // 0x103029d

public static final int Widget_Material_Light_Button_Small = 16974494; // 0x103029e

public static final int Widget_Material_Light_Button_Toggle = 16974495; // 0x103029f

public static final int Widget_Material_Light_CalendarView = 16974498; // 0x10302a2

public static final int Widget_Material_Light_CheckedTextView = 16974499; // 0x10302a3

public static final int Widget_Material_Light_CompoundButton_CheckBox = 16974500; // 0x10302a4

public static final int Widget_Material_Light_CompoundButton_RadioButton = 16974501; // 0x10302a5

public static final int Widget_Material_Light_CompoundButton_Star = 16974502; // 0x10302a6

public static final int Widget_Material_Light_CompoundButton_Switch = 16974555; // 0x10302db

public static final int Widget_Material_Light_DatePicker = 16974503; // 0x10302a7

public static final int Widget_Material_Light_DropDownItem = 16974504; // 0x10302a8

public static final int Widget_Material_Light_DropDownItem_Spinner = 16974505; // 0x10302a9

public static final int Widget_Material_Light_EditText = 16974506; // 0x10302aa

public static final int Widget_Material_Light_ExpandableListView = 16974507; // 0x10302ab

public static final int Widget_Material_Light_FastScroll = 16974508; // 0x10302ac

public static final int Widget_Material_Light_GridView = 16974509; // 0x10302ad

public static final int Widget_Material_Light_HorizontalScrollView = 16974510; // 0x10302ae

public static final int Widget_Material_Light_ImageButton = 16974511; // 0x10302af

public static final int Widget_Material_Light_ListPopupWindow = 16974512; // 0x10302b0

public static final int Widget_Material_Light_ListView = 16974513; // 0x10302b1

public static final int Widget_Material_Light_ListView_DropDown = 16974514; // 0x10302b2

public static final int Widget_Material_Light_MediaRouteButton = 16974515; // 0x10302b3

public static final int Widget_Material_Light_NumberPicker = 16974557; // 0x10302dd

public static final int Widget_Material_Light_PopupMenu = 16974516; // 0x10302b4

public static final int Widget_Material_Light_PopupMenu_Overflow = 16974517; // 0x10302b5

public static final int Widget_Material_Light_PopupWindow = 16974518; // 0x10302b6

public static final int Widget_Material_Light_ProgressBar = 16974519; // 0x10302b7

public static final int Widget_Material_Light_ProgressBar_Horizontal = 16974520; // 0x10302b8

public static final int Widget_Material_Light_ProgressBar_Inverse = 16974521; // 0x10302b9

public static final int Widget_Material_Light_ProgressBar_Large = 16974522; // 0x10302ba

public static final int Widget_Material_Light_ProgressBar_Large_Inverse = 16974523; // 0x10302bb

public static final int Widget_Material_Light_ProgressBar_Small = 16974524; // 0x10302bc

public static final int Widget_Material_Light_ProgressBar_Small_Inverse = 16974525; // 0x10302bd

public static final int Widget_Material_Light_ProgressBar_Small_Title = 16974526; // 0x10302be

public static final int Widget_Material_Light_RatingBar = 16974527; // 0x10302bf

public static final int Widget_Material_Light_RatingBar_Indicator = 16974528; // 0x10302c0

public static final int Widget_Material_Light_RatingBar_Small = 16974529; // 0x10302c1

public static final int Widget_Material_Light_ScrollView = 16974530; // 0x10302c2

public static final int Widget_Material_Light_SearchView = 16974531; // 0x10302c3

public static final int Widget_Material_Light_SeekBar = 16974532; // 0x10302c4

public static final int Widget_Material_Light_SegmentedButton = 16974533; // 0x10302c5

public static final int Widget_Material_Light_Spinner = 16974535; // 0x10302c7

public static final int Widget_Material_Light_Spinner_Underlined = 16974536; // 0x10302c8

public static final int Widget_Material_Light_StackView = 16974534; // 0x10302c6

public static final int Widget_Material_Light_Tab = 16974537; // 0x10302c9

public static final int Widget_Material_Light_TabWidget = 16974538; // 0x10302ca

public static final int Widget_Material_Light_TextView = 16974539; // 0x10302cb

public static final int Widget_Material_Light_TextView_SpinnerItem = 16974540; // 0x10302cc

public static final int Widget_Material_Light_TimePicker = 16974541; // 0x10302cd

public static final int Widget_Material_Light_WebTextView = 16974542; // 0x10302ce

public static final int Widget_Material_Light_WebView = 16974543; // 0x10302cf

public static final int Widget_Material_ListPopupWindow = 16974447; // 0x103026f

public static final int Widget_Material_ListView = 16974448; // 0x1030270

public static final int Widget_Material_ListView_DropDown = 16974449; // 0x1030271

public static final int Widget_Material_MediaRouteButton = 16974450; // 0x1030272

public static final int Widget_Material_NumberPicker = 16974556; // 0x10302dc

public static final int Widget_Material_PopupMenu = 16974451; // 0x1030273

public static final int Widget_Material_PopupMenu_Overflow = 16974452; // 0x1030274

public static final int Widget_Material_PopupWindow = 16974453; // 0x1030275

public static final int Widget_Material_ProgressBar = 16974454; // 0x1030276

public static final int Widget_Material_ProgressBar_Horizontal = 16974455; // 0x1030277

public static final int Widget_Material_ProgressBar_Large = 16974456; // 0x1030278

public static final int Widget_Material_ProgressBar_Small = 16974457; // 0x1030279

public static final int Widget_Material_ProgressBar_Small_Title = 16974458; // 0x103027a

public static final int Widget_Material_RatingBar = 16974459; // 0x103027b

public static final int Widget_Material_RatingBar_Indicator = 16974460; // 0x103027c

public static final int Widget_Material_RatingBar_Small = 16974461; // 0x103027d

public static final int Widget_Material_ScrollView = 16974462; // 0x103027e

public static final int Widget_Material_SearchView = 16974463; // 0x103027f

public static final int Widget_Material_SeekBar = 16974464; // 0x1030280

/**
 * A seek bar with tick marks at each progress value.
 */

public static final int Widget_Material_SeekBar_Discrete = 16974553; // 0x10302d9

public static final int Widget_Material_SegmentedButton = 16974465; // 0x1030281

public static final int Widget_Material_Spinner = 16974467; // 0x1030283

public static final int Widget_Material_Spinner_Underlined = 16974468; // 0x1030284

public static final int Widget_Material_StackView = 16974466; // 0x1030282

public static final int Widget_Material_Tab = 16974469; // 0x1030285

public static final int Widget_Material_TabWidget = 16974470; // 0x1030286

public static final int Widget_Material_TextView = 16974471; // 0x1030287

public static final int Widget_Material_TextView_SpinnerItem = 16974472; // 0x1030288

public static final int Widget_Material_TimePicker = 16974473; // 0x1030289

public static final int Widget_Material_Toolbar = 16974474; // 0x103028a

public static final int Widget_Material_Toolbar_Button_Navigation = 16974475; // 0x103028b

public static final int Widget_Material_WebTextView = 16974476; // 0x103028c

public static final int Widget_Material_WebView = 16974477; // 0x103028d

public static final int Widget_PopupMenu = 16973958; // 0x1030086

public static final int Widget_PopupWindow = 16973878; // 0x1030036

public static final int Widget_ProgressBar = 16973852; // 0x103001c

public static final int Widget_ProgressBar_Horizontal = 16973855; // 0x103001f

public static final int Widget_ProgressBar_Inverse = 16973915; // 0x103005b

public static final int Widget_ProgressBar_Large = 16973853; // 0x103001d

public static final int Widget_ProgressBar_Large_Inverse = 16973916; // 0x103005c

public static final int Widget_ProgressBar_Small = 16973854; // 0x103001e

public static final int Widget_ProgressBar_Small_Inverse = 16973917; // 0x103005d

public static final int Widget_RatingBar = 16973857; // 0x1030021

public static final int Widget_ScrollView = 16973869; // 0x103002d

public static final int Widget_SeekBar = 16973856; // 0x1030020

public static final int Widget_Spinner = 16973864; // 0x1030028

public static final int Widget_Spinner_DropDown = 16973955; // 0x1030083

public static final int Widget_StackView = 16974310; // 0x10301e6

public static final int Widget_TabWidget = 16973876; // 0x1030034

public static final int Widget_TextView = 16973858; // 0x1030022

public static final int Widget_TextView_PopupMenu = 16973865; // 0x1030029

public static final int Widget_TextView_SpinnerItem = 16973866; // 0x103002a

public static final int Widget_Toolbar = 16974311; // 0x10301e7

public static final int Widget_Toolbar_Button_Navigation = 16974312; // 0x10301e8

public static final int Widget_WebView = 16973875; // 0x1030033
}

@SuppressWarnings({"unchecked", "deprecation", "all"})
public static final class transition {

public transition() { throw new RuntimeException("Stub!"); }

/**
 * A transition that moves views in or out of the scene to or from the edges when
 * a view visibility changes.
 */

public static final int explode = 17760259; // 0x10f0003

/**
 * A transition that fades views in and out.
 */

public static final int fade = 17760258; // 0x10f0002

/**
 * A transition that moves and resizes a view
 */

public static final int move = 17760257; // 0x10f0001

/**
 * Used for Activity Transitions, this transition indicates that no Transition
 * should be used.
 */

public static final int no_transition = 17760256; // 0x10f0000

/**
 * A transition that moves views in or out of the scene to or from the bottom edge when
 * a view visibility changes.
 */

public static final int slide_bottom = 17760260; // 0x10f0004

/**
 * A transition that moves views in or out of the scene to or from the left edge when
 * a view visibility changes.
 */

public static final int slide_left = 17760263; // 0x10f0007

/**
 * A transition that moves views in or out of the scene to or from the right edge when
 * a view visibility changes.
 */

public static final int slide_right = 17760262; // 0x10f0006

/**
 * A transition that moves views in or out of the scene to or from the top edge when
 * a view visibility changes.
 */

public static final int slide_top = 17760261; // 0x10f0005
}

@SuppressWarnings({"unchecked", "deprecation", "all"})
public static final class xml {

public xml() { throw new RuntimeException("Stub!"); }
}

}

